"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchClient = void 0;
const tslib_1 = require("tslib");
const config_1 = require("../common/config");
const object_factory_1 = require("../impl-registry/object-factory");
let FetchClient = class FetchClient {
    async ckg(method, req = '') {
        const data = {
            service: 'ckg',
            method,
            data: req,
        };
        return this._fetch(data);
    }
    async ide(method, req) {
        const data = {
            service: 'ide',
            method,
            data: req,
        };
        return this._fetch(data);
    }
    async agent(method, req) {
        const data = {
            service: 'agent',
            method,
            data: req,
        };
        return this._fetch(data);
    }
    async agentSSE(method, data, callback) {
        const username = await this._configHelper.getUsername();
        const headers = await this._configHelper.getRequestHeaders();
        const userInfo = {
            name: username,
            token: headers.token,
        };
        const req = {
            service: 'agent',
            method,
            data: this.safeStringify({
                ...data,
                user_info: userInfo,
            })
        };
        const cli = await this._configHelper.getRPCClient();
        const res = await cli.callWebSocket({
            module_port: "ai/0",
            req: this.safeStringify(req),
        });
        return new Promise((resolve, reject) => {
            res.onmessage = (e) => {
                const data = JSON.parse(e.data);
                callback(data);
                if (data.event === "done") {
                    resolve(data);
                }
            };
            res.onerror = (e) => {
                reject(e);
            };
        });
    }
    async _fetch(req) {
        const cli = await this._configHelper.getRPCClient();
        const username = await this._configHelper.getUsername();
        const headers = await this._configHelper.getRequestHeaders();
        const userInfo = {
            name: username,
            token: headers.token,
        };
        const data = {
            service: req.service,
            method: req.method,
            data: this.safeStringify({
                ...(req.data || {}),
                user_info: userInfo,
            })
        };
        const res = await cli.callWebSocket({
            module_port: "ai/0",
        });
        return new Promise((resolve, reject) => {
            res.onmessage = (e) => {
                const data = JSON.parse(e.data);
                resolve(data);
                res.close(0, "end");
            };
            res.onerror = (e) => {
                reject(e);
            };
            res.onopen = () => {
                res.send(this.safeStringify(data));
            };
        });
    }
    safeStringify(data) {
        if (!data) {
            return '';
        }
        try {
            return JSON.stringify(data);
        }
        catch (error) {
            // ignore error
            return '';
        }
    }
};
exports.FetchClient = FetchClient;
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", config_1.AutoDebugConfigHelper)
], FetchClient.prototype, "_configHelper", void 0);
exports.FetchClient = FetchClient = tslib_1.__decorate([
    object_factory_1.SingletonInjectable
], FetchClient);
