"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchEntityTool = void 0;
const tslib_1 = require("tslib");
const i_tool_1 = require("../../common/base/i-tool");
const object_factory_1 = require("../../impl-registry/object-factory");
const ckg_1 = require("../../adaptor/ckg");
const enum_1 = require("../../typing/enum");
let SearchEntityTool = class SearchEntityTool extends i_tool_1.ITool {
    async isEnable() {
        return await this._ckg.isEnable();
    }
    async run() {
        this._logger.info("search entity...", JSON.stringify(this._input));
        const { entityName } = this._input;
        const entity = await this._ckg.retrieveEntity({
            entityName,
        });
        const relation = await this._ckg.retrieveRelation({
            entityList: entity.list,
        });
        const entities = [];
        for (const variable of relation.variablesList) {
            if (variable.pb_class || variable.method) {
                const isClass = !!variable.pb_class;
                const entity = isClass ? variable.pb_class : variable.method;
                if (entity) {
                    entities.push({
                        type: isClass ? enum_1.SearchEntityType.CLASS : enum_1.SearchEntityType.FUNCTION,
                        filePath: entity.filepath,
                        startLine: entity.startline,
                        endLine: entity.endline,
                        content: entity.content,
                    });
                }
            }
        }
        const relativePaths = await this._ide.batchToWorkspaceRelativePath(entities.map((entity) => entity.filePath));
        return {
            entities: entities.map((e, i) => ({
                ...e,
                filePath: relativePaths[i],
            })),
        };
    }
};
exports.SearchEntityTool = SearchEntityTool;
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", ckg_1.CKGService)
], SearchEntityTool.prototype, "_ckg", void 0);
exports.SearchEntityTool = SearchEntityTool = tslib_1.__decorate([
    (0, i_tool_1.ToolImpl)(enum_1.ToolType.SEARCH_ENTITY)
], SearchEntityTool);
