"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoDebugStep = exports.stepDeltaMethodImplRegistry = exports.StepDeltaTypeImpl = exports.stepMethodImplRegistry = exports.StepEventImpl = void 0;
const tslib_1 = require("tslib");
const i_sse_event_handler_1 = require("../common/base/i-sse-event-handler");
const method_1 = require("../impl-registry/method");
const enum_1 = require("../typing/enum");
const i_life_cycle_1 = require("../common/base/i-life-cycle");
const i_tool_1 = require("../common/base/i-tool");
const object_factory_1 = require("../impl-registry/object-factory");
const utils_1 = require("../common/utils");
_a = tslib_1.__read((0, method_1.createMethodImplRegistry)(), 2), exports.StepEventImpl = _a[0], exports.stepMethodImplRegistry = _a[1];
_b = tslib_1.__read((0, method_1.createMethodImplRegistry)(), 2), exports.StepDeltaTypeImpl = _b[0], exports.stepDeltaMethodImplRegistry = _b[1];
let AutoDebugStep = class AutoDebugStep extends i_sse_event_handler_1.AutoDebugSSEEventHandler {
    constructor() {
        super(...arguments);
        this._toolCalls = [];
        this._thinks = [];
        /** delta type end */
    }
    init(runId, listener) {
        this._runId = runId;
        void this._runId;
        this._listener = listener;
    }
    get id() {
        return this._data.id;
    }
    get thinks() {
        return this._thinks;
    }
    async runToolCalls() {
        this._logger.info("run step pending tool calls", JSON.stringify(this._toolCalls.map((t) => t.delta.toolCallRequired.toolId)));
        return await utils_1.Utils.promiseControl(this._toolCalls, async (event) => {
            const toolId = event.delta.toolCallRequired.toolId;
            void enum_1.ToolType;
            try {
                const tool = i_tool_1.toolRegistry.get(toolId, this._runId, utils_1.Utils.parseIncomingProtocol(JSON.parse(event.delta.toolCallRequired.arguments)));
                // const tool = toolRegistry.get(
                //   ToolType.REVIEW_DEFINITION,
                //   this._runId,
                //   Utils.parseIncomingProtocol({
                //     filePath: "xarray/tests/test_formatting.py",
                //     identifier: "test_inline_variable_array_repr_custom_repr",
                //     line: 395,
                //   })
                // );
                return {
                    toolId,
                    toolCallId: event.delta.toolCallRequired.id,
                    stepId: this.id,
                    output: JSON.stringify(utils_1.Utils.parseOutgoingProtocol(await tool.run())),
                };
            }
            catch (err) {
                this._logger.error(`tool call error`, err);
                return {
                    toolCallId: event.delta.toolCallRequired.id,
                    stepId: this.id,
                    toolId,
                    error: {
                        message: err.message,
                    },
                };
            }
        });
    }
    get methodImplRegistry() {
        return exports.stepMethodImplRegistry;
    }
    /** step event begin */
    async onCreated(event) {
        this._logger.info("on step event created", JSON.stringify(event));
        this._data = event.data;
    }
    async onDelta(event) {
        try {
            const method = exports.stepDeltaMethodImplRegistry.get(event.data.type);
            await method.call(this, event);
        }
        catch (err) {
            this._logger.error("on step delta error", err);
        }
    }
    async onComplete(event) {
        this._logger.info("on step event completed", JSON.stringify(event));
        this.setFinalized();
        this._listener.onEvent({
            agentStep: {
                isCompleted: true,
            },
        });
    }
    async onToolCallRequired(event) {
        this._logger.info(`tool call required step`, JSON.stringify(event));
        // 先缓存起来，等请求结束了一起执行
        this._toolCalls.push(event.data);
    }
    async onBypassStep(event) {
        // step failed 了不用管，等服务端下发事件 Run Failed 事件
        this._logger.info(`bypass step`, JSON.stringify(event));
    }
    /** step event begin */
    /** delta type begin */
    async onThinkDelta(event) {
        this._thinks.push(event.data);
        this._listener.onEvent({
            agentStep: {
                thought: event.data.delta.think.value,
            },
        });
    }
    async onToolCallDelta(event) {
        this._logger.info(`on step tool call delta`, JSON.stringify(event));
        this._listener.onEvent({
            agentStep: {
                action: event.data.delta.toolCall.description,
            },
        });
    }
};
exports.AutoDebugStep = AutoDebugStep;
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "runToolCalls", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepEventImpl)(enum_1.AutoDebugSSEEventType.STEP_CREATED),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onCreated", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepEventImpl)(enum_1.AutoDebugSSEEventType.STEP_DELTA),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onDelta", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepEventImpl)(enum_1.AutoDebugSSEEventType.STEP_COMPLETED),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onComplete", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepDeltaTypeImpl)(enum_1.AutoDebugStepDeltaType.TOOL_CALL_REQUIRED),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onToolCallRequired", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepDeltaTypeImpl)(enum_1.AutoDebugStepDeltaType.DEBUG),
    (0, exports.StepEventImpl)(enum_1.AutoDebugSSEEventType.STEP_FAILED),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onBypassStep", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepDeltaTypeImpl)(enum_1.AutoDebugStepDeltaType.THINK),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onThinkDelta", null);
tslib_1.__decorate([
    i_life_cycle_1.Alive,
    (0, exports.StepDeltaTypeImpl)(enum_1.AutoDebugStepDeltaType.TOOL_CALL),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AutoDebugStep.prototype, "onToolCallDelta", null);
exports.AutoDebugStep = AutoDebugStep = tslib_1.__decorate([
    object_factory_1.ExecutionInjectable
], AutoDebugStep);
