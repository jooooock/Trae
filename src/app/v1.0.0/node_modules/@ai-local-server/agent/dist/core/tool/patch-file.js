"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchFileTool = void 0;
const tslib_1 = require("tslib");
const i_tool_1 = require("../../common/base/i-tool");
const enum_1 = require("../../typing/enum");
const injection_1 = require("@artus/injection");
const server_1 = require("../../adaptor/server");
const cache_1 = require("../../core/cache");
const utils_1 = require("../../common/utils");
let PatchFileTool = class PatchFileTool extends i_tool_1.ITool {
    async run() {
        this._logger.info("patch file...", JSON.stringify(this._input));
        const succeed = [];
        const failed = [];
        // 串行防止 patches 间依赖关系
        for (const p of this._input.patches) {
            try {
                succeed.push(await this.getPatch(p));
            }
            catch (err) {
                failed.push({
                    filePath: p.filePath,
                    patch: p.patch,
                    error: err.message,
                });
            }
        }
        return {
            succeed: succeed.length ? succeed : null,
            failed: failed.length ? failed : null,
        };
    }
    async getPatch(input) {
        const { filePath, patch: conflict } = input;
        let fileContent;
        try {
            fileContent = await this._cache.getFileCache({
                runId: this._runId,
                filePath,
            });
            this._logger.info(`get file from cache: ${filePath}`);
        }
        catch (err) {
            this._logger.info(`get file error: ${err.message}, fallback to fs`);
            fileContent = await this._ide.readWorkspaceFile(filePath);
        }
        const patch = await this._server.pathFileDiff({
            fileContent,
            filePath,
            searchReplaceRaw: conflict,
            returnPatchedFileContent: true,
            diffTag: 'SEARCH/REPLACE',
        });
        this._logger.info("patch file result...", JSON.stringify(patch));
        utils_1.Utils.assert(!patch.message, `patch error: ${patch.message}`);
        // 记录数据切面，保证最终 diff 和此刻的一致性
        this._cache.setFileCache({
            filePath,
            runId: this._runId,
            fileContent: patch.patchedFileContent,
        });
        return {
            filePath,
            // 服务端返回 diff 部分就行
            patch: patch.diff,
        };
    }
};
exports.PatchFileTool = PatchFileTool;
tslib_1.__decorate([
    (0, injection_1.Inject)(),
    tslib_1.__metadata("design:type", server_1.Server)
], PatchFileTool.prototype, "_server", void 0);
tslib_1.__decorate([
    (0, injection_1.Inject)(),
    tslib_1.__metadata("design:type", cache_1.AutoDebugCache)
], PatchFileTool.prototype, "_cache", void 0);
exports.PatchFileTool = PatchFileTool = tslib_1.__decorate([
    (0, i_tool_1.ToolImpl)(enum_1.ToolType.PATCH_FILE)
], PatchFileTool);
