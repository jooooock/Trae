import { __decorate, __metadata } from "tslib";
import { LogLevel } from '@byted-icube/devtools-base';
import { SingletonInjectable } from '../common/injection';
import { Logger } from '../common/logger';
import { Inject } from '@artus/injection';
import { PRODUCT_AND_REGION_MAP } from '../common/constant';
import { Utils } from '../common/utils';
let AICommonOptionsHelper = class AICommonOptionsHelper {
    setup(options) {
        this._options = options;
        if (options.logWriter) {
            this._logger.setWriter(options.logWriter);
        }
        if (typeof this._options.logLevel !== 'undefined') {
            this._logger.setLevel(this._options.logLevel);
        }
        if (this._options.developmentMode) {
            this._logger.setLevel(LogLevel.Trace);
        }
    }
    get product() {
        return this._options.product;
    }
    get region() {
        return this._options.region;
    }
    get namespace() {
        return this._options.namespace;
    }
    get tea() {
        return this._options.tea;
    }
    get userContext() {
        return this._options.userContext;
    }
    get i18nResource() {
        return this._options.i18nResource;
    }
    get productAndRegion() {
        const regionMap = PRODUCT_AND_REGION_MAP[this.product];
        Utils.assert(regionMap, `[AICommon] product ${this.product} is not supported`);
        const value = regionMap[this.region];
        Utils.assert(value, `[AICommon] region ${this.region} is not supported for product ${this.product}`);
        return value;
    }
    get enableApiServer() {
        return Boolean(this._options.enableApiServer);
    }
    get enableSettings() {
        return Boolean(this._options.enableSettings);
    }
    getRequestPPEEnv() {
        return this._options.getRequestPPEEnv?.();
    }
    async getRequestToken() {
        return await this._options.getRequestToken();
    }
    getRequestAppVersion() {
        return this._options.getRequestAppVersion?.();
    }
    get developmentMode() {
        return Boolean(this._options.developmentMode);
    }
    get logLevel() {
        return this._options.logLevel;
    }
    get slardarExtraContext() {
        return this._options.slardarExtraContext || {};
    }
    get enableSlardar() {
        return Boolean(this._options.enableSlardar ?? true);
    }
};
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], AICommonOptionsHelper.prototype, "_logger", void 0);
AICommonOptionsHelper = __decorate([
    SingletonInjectable
], AICommonOptionsHelper);
export { AICommonOptionsHelper };
