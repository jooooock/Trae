import { __decorate, __metadata } from "tslib";
import { EventEmitter } from '../common/event';
import { AICommonOptionsHelper } from '../options/aiCommonOptions';
import { Inject } from '@artus/injection';
import { Logger } from '../common/logger';
export class BaseConfigStorage {
    constructor() {
        this._onRawConfigChange = new EventEmitter();
        this.onRawConfigChange = this._onRawConfigChange.event;
    }
    get(key) {
        const rawConfig = this._rawConfig || {};
        return rawConfig[key];
    }
    updateRawConfig(data) {
        this._logger.trace(`[ConfigCenter] update config: ${JSON.stringify(data)}`);
        this._rawConfig = data;
    }
    reset() {
        this._rawConfig = undefined;
    }
}
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], BaseConfigStorage.prototype, "_logger", void 0);
__decorate([
    Inject(),
    __metadata("design:type", AICommonOptionsHelper)
], BaseConfigStorage.prototype, "_optionsHelper", void 0);
