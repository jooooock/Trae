import { __decorate, __metadata } from "tslib";
import { BaseConfigStorage } from './base';
import { SettingsClient } from '../remote/settings';
import { ApiServerClient } from '../remote/apiServer';
import { SingletonInjectable } from '../common/injection';
import { Inject } from '@artus/injection';
let RemoteConfig = class RemoteConfig extends BaseConfigStorage {
    setup() {
        this._settingsClient.setup();
        this._apiServerClient.setup();
        this._settingsClient.onConfigChange(config => {
            this._rawConfig = Object.assign({}, this._rawConfig, config);
            this._onRawConfigChange.fire(this._rawConfig);
        });
        this._apiServerClient.onConfigChange(config => {
            this._rawConfig = Object.assign({}, this._rawConfig, config);
            this._onRawConfigChange.fire(this._rawConfig);
        });
    }
    async readRawConfig() {
        if (!this._rawConfig) {
            // 将 settings 和 api server 的配置数据合并一下
            const [settingsConfig, apiServerConfig] = await Promise.all([
                this._settingsClient.syncConfig(),
                this._apiServerClient.syncConfig(),
            ]);
            const allConfigs = Object.assign({}, settingsConfig, apiServerConfig);
            this._rawConfig = allConfigs;
            this._onRawConfigChange.fire(allConfigs);
        }
        return this._rawConfig || {};
    }
    reset() {
        super.reset();
        this._apiServerClient.reset();
        this._settingsClient.reset();
    }
};
__decorate([
    Inject(),
    __metadata("design:type", SettingsClient)
], RemoteConfig.prototype, "_settingsClient", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ApiServerClient)
], RemoteConfig.prototype, "_apiServerClient", void 0);
RemoteConfig = __decorate([
    SingletonInjectable
], RemoteConfig);
export { RemoteConfig };
