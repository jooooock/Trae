"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.alertFailure = void 0;
const api_1 = __importDefault(require("./api"));
const clientBase_1 = require("./clientBase");
const baseInfo = {
    projectName: process.env.CI_PROJECT_NAME,
    projectPath: process.env.CI_PROJECT_PATH,
    projectDir: process.env.CI_PROJECT_DIR,
    buildId: process.env.CI_PIPELINE_ID,
    buildVersion: process.env.TRON_BUILD_VERSION,
    machineTag: process.env.CI_RUNNER_TAGS,
    machineId: process.env.TRON_MACHINE_ID,
    machineCertificateSha1: process.env.TRON_SIGN_CERT,
};
const alertFailure = ({ type, message }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield api_1.default.post(clientBase_1.ALEART_API, Object.assign(Object.assign({}, baseInfo), { type,
            message, date: Date.now() }));
    }
    catch (e) { }
});
exports.alertFailure = alertFailure;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/alert.js.map