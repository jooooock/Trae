"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.increaseVersion = exports.memorizeBranch = void 0;
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const path_1 = require("path");
const logger_1 = __importDefault(require("./logger"));
const branch = process.env.CI_COMMIT_REF_NAME || (0, child_process_1.execSync)('git symbolic-ref --short -q HEAD').toString().trim();
/**
 * write branch and buildId into package.json
 */
function memorizeBranch() {
    try {
        let packagePath, packageFile;
        if (!process.cwd()) {
            logger_1.default.warn('please run command in npm run command');
            process.exit(1);
        }
        else {
            packagePath = (0, path_1.join)(process.cwd(), 'package.json');
            if ((0, fs_1.existsSync)(packagePath)) {
                packageFile = (0, fs_1.readFileSync)(packagePath, 'utf8');
            }
            else {
                logger_1.default.error('cant find package.json');
                process.exit(1);
            }
        }
        const content = JSON.parse(packageFile);
        content.buildId = process.env.CI_PIPELINE_ID || '';
        content.branch = branch;
        packageFile = JSON.stringify(content, null, 2);
        (0, fs_1.writeFileSync)(packagePath, packageFile, { encoding: 'utf8' });
        logger_1.default.info('tron client has saved branch and buildId info into package.json');
    }
    catch (e) {
        logger_1.default.error(e);
    }
}
exports.memorizeBranch = memorizeBranch;
/**
 * use branch as preid, and add prerelease version number
 */
function increaseVersion() {
    try {
        if (branch === 'master') {
            return;
        }
        else {
            (0, child_process_1.execSync)(`npm version prerelease --preid=${branch}`, { encoding: 'utf-8' });
        }
    }
    catch (e) {
        logger_1.default.error(e.stderr);
    }
}
exports.increaseVersion = increaseVersion;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/patch.js.map