"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TronClientOfflineChecker = void 0;
const clientBase_1 = require("./clientBase");
const logger_1 = __importDefault(require("./logger"));
const path_1 = require("path");
const fs_1 = require("fs");
const api_1 = __importDefault(require("./api"));
class TronClientOfflineChecker extends clientBase_1.TronClientBase {
    constructor(config) {
        super(config);
        this.deviceId = config.deviceId;
        this.appPath = config.appPath;
        this.branch = this.getBranch();
        this.version = this.getVersion();
    }
    /**
     * get current working branch
     */
    getBranch() {
        const packageFile = (0, fs_1.readFileSync)((0, path_1.join)(this.appPath, 'package.json'), 'utf-8');
        const { branch = 'master' } = JSON.parse(packageFile);
        if (branch) {
            logger_1.default.info(`tron checker branch is set to ${branch}`);
            return branch;
        }
        else {
            const message = `tron can't find branch in ${(0, path_1.join)(this.appPath, 'package.json')}, you must run tron-client memorize before build`;
            throw new Error(message);
        }
    }
    getVersion() {
        const packageFile = (0, fs_1.readFileSync)((0, path_1.join)(this.appPath, 'package.json'), 'utf-8');
        const { version } = JSON.parse(packageFile);
        if (version) {
            logger_1.default.info(`tron checker version is set to ${version}`);
            return version;
        }
        else {
            const message = `tron can't find version in ${(0, path_1.join)(this.appPath, 'package.json')}, you must run tron-client memorize before build`;
            throw new Error(message);
        }
    }
    /**
     * check for update
     */
    checkForUpdate(localOfflineConfig) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                logger_1.default.info(`offline get ${clientBase_1.CHECK_OFFLINE_API}?pid=${this.pid}&uid=${this.deviceId}&branch=${this.branch}&version=${this.version}`);
                if (!this.pid || !this.deviceId || !this.branch || !this.version) {
                    throw new Error('params invalid');
                }
                const { offlineConfigList: remoteOfflineConfig } = (yield api_1.default.get(`${clientBase_1.CHECK_OFFLINE_API}?pid=${this.pid}&uid=${this.deviceId}&branch=${this.branch}&version=${this.version}`)) || {};
                const _localOfflineConfig = localOfflineConfig.slice();
                const createOrUpdateList = remoteOfflineConfig.reduce((list, remote) => {
                    if (remote === null || remote === void 0 ? void 0 : remote.localPath) {
                        const index = _localOfflineConfig.findIndex(local => remote.localPath === (local === null || local === void 0 ? void 0 : local.localPath));
                        let action = "create" /* OfflineUpdateAction.CREATE */;
                        if (_localOfflineConfig[index]) {
                            action =
                                _localOfflineConfig[index].resourceCode === remote.resourceCode ?
                                    "none" /* OfflineUpdateAction.NONE */ :
                                    "update" /* OfflineUpdateAction.UPDATE */;
                            _localOfflineConfig.splice(index, 1);
                        }
                        list.push(Object.assign(Object.assign({}, remote), { action }));
                    }
                    return list;
                }, []);
                const deleteList = _localOfflineConfig.reduce((list, local) => {
                    if (local) {
                        list.push(Object.assign(Object.assign({}, local), { action: "delete" /* OfflineUpdateAction.DELETE */ }));
                    }
                    return list;
                }, []);
                const list = createOrUpdateList.concat(deleteList);
                const res = {
                    needUpdate: Boolean((_a = list === null || list === void 0 ? void 0 : list.some) === null || _a === void 0 ? void 0 : _a.call(list, item => (item === null || item === void 0 ? void 0 : item.action) && item.action !== "none" /* OfflineUpdateAction.NONE */)),
                    config: remoteOfflineConfig,
                    update: list,
                };
                return res;
            }
            catch (err) {
                console.log(err);
                throw err;
            }
        });
    }
}
exports.TronClientOfflineChecker = TronClientOfflineChecker;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/clientOfflineChecker.js.map