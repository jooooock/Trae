"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.notarizeV3 = exports.staple = exports.waitNotarizeTakeEffect = void 0;
const child_process_1 = require("child_process");
const spawn_1 = require("./spawn");
const logger_1 = __importDefault(require("./logger"));
const path = __importStar(require("path"));
const utils_1 = require("./utils");
// 用于 macOS 公证的账号信息，Tron TCC 会注入默认的 YIMING ZHANG 账号的值
const DEFAULT_USERNAME = process.env.TRON_NOTARIZE_USERNAME || '';
const DEFAULT_PASSWORD = process.env.TRON_NOTARIZE_PASSWORD || '';
const DEFAULT_TEAM_ID = process.env.TRON_NOTARIZE_TEAM_ID || '';
const checkInterval = 15 * 1000;
const timeout = 60 * 60 * 1000;
function notarize(targetFile, options) {
    let { retryCount = 0 } = options || {};
    const { appleId, appleIdPassword, teamId } = options || {};
    let uploadResult = '';
    try {
        const out = (0, child_process_1.spawnSync)('xcrun', [
            'notarytool',
            'submit',
            targetFile,
            '--team-id',
            teamId || DEFAULT_TEAM_ID,
            '--apple-id',
            appleId || DEFAULT_USERNAME,
            '--password',
            appleIdPassword || DEFAULT_PASSWORD,
            '-f',
            'json',
        ]);
        uploadResult = out.stdout.toString() || out.stderr.toString();
        logger_1.default.log('uploadResult:', uploadResult);
        let uploadResultObj = null;
        try {
            uploadResultObj = JSON.parse(uploadResult);
        }
        catch (e) {
            logger_1.default.log("uploadResult isn't JSON format:", uploadResult);
        }
        if ((uploadResultObj === null || uploadResultObj === void 0 ? void 0 : uploadResultObj.id) && (uploadResultObj === null || uploadResultObj === void 0 ? void 0 : uploadResultObj.message) === 'Successfully uploaded file') {
            const uuid = uploadResultObj.id;
            logger_1.default.log(`dmg notarize completed, uuid: ${uuid}`);
            return uuid;
        }
        else {
            if (retryCount < 5) {
                retryCount++;
                logger_1.default.log(`invalid notarize status for ${retryCount} time${retryCount > 1 ? 's' : ''}, will retry notarize 5s later...`);
                (0, utils_1.sleep)(5000);
                return notarize(targetFile, Object.assign(options || {}, { retryCount }));
            }
            throw new Error('invalid notarize status');
        }
    }
    catch (err) {
        logger_1.default.error(uploadResult);
        throw err;
    }
}
/**
 * check notarize status
 * @param uuid uuid from notarize result
 * @returns info status
 */
function checkNotarizeStatus(uuid, options) {
    let { retryCount = 0 } = options || {};
    const { appleId, appleIdPassword, teamId } = options || {};
    let checkResult = '';
    try {
        const out = (0, child_process_1.spawnSync)('xcrun', [
            'notarytool',
            'log',
            uuid,
            '--team-id',
            teamId || DEFAULT_TEAM_ID,
            '--apple-id',
            appleId || DEFAULT_USERNAME,
            '--password',
            appleIdPassword || DEFAULT_PASSWORD,
            '-f',
            'json',
        ]);
        checkResult = out.stdout.toString() || out.stderr.toString();
        let checkResultObj = null;
        try {
            checkResultObj = JSON.parse(checkResult);
        }
        catch (e) {
            logger_1.default.log("checkResult isn't JSON format:", checkResult);
        }
        if ((checkResultObj === null || checkResultObj === void 0 ? void 0 : checkResultObj.status) === 'Accepted') {
            logger_1.default.log('congratulations! notarize status has become success');
            logger_1.default.log('checkResult:', JSON.stringify(checkResultObj));
            return true;
        }
        else {
            if (retryCount < 180) {
                // 30min maximum check
                logger_1.default.log('notarize status still in progress or id does not exit, will check 10s later');
                retryCount++;
                (0, utils_1.sleep)(10000);
                return checkNotarizeStatus(uuid, Object.assign(options || {}, { retryCount }));
            }
        }
        logger_1.default.log('\n====> notarize check timeout <====\n');
        throw new Error('notarize check status unknown');
    }
    catch (err) {
        logger_1.default.error((err && err.message) || err);
        logger_1.default.error('checkResult:', checkResult);
        process.exit(1);
    }
}
/**
 * check if notarize has taken effect
 * normally became effective after notarize finish 3 minutes later
 * @param uuid uuid from notarize result
 */
function waitNotarizeTakeEffect(uuid, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let count = 0;
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            logger_1.default.log('start checking notarize status');
            while (count <= timeout / checkInterval) {
                if (checkNotarizeStatus(uuid, options)) {
                    resolve();
                    break;
                }
                else {
                    count++;
                    // eslint-disable-next-line @typescript-eslint/no-shadow
                    yield new Promise(resolve => setTimeout(resolve, checkInterval));
                    logger_1.default.log(`notarize checking for ${count} time${count > 1 ? 's' : ''}`);
                }
            }
            reject(new Error(`notarize exceed timeout ${timeout / 1000}s`));
        }));
    });
}
exports.waitNotarizeTakeEffect = waitNotarizeTakeEffect;
function staple(targetFile) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.info('attempting to staple app:', targetFile);
        const result = yield (0, spawn_1.spawn)('xcrun', ['stapler', 'staple', '-v', path.basename(targetFile)], {
            cwd: path.dirname(targetFile),
        });
        if (result.code !== 0) {
            throw new Error(`Failed to staple your application with code: ${result.code}\n\n${result.output}`);
        }
        logger_1.default.info('staple succeeded');
        return;
    });
}
exports.staple = staple;
/**
 * 在签名之后，进行公证
 * @param targetFile 待公证文件的绝对路径
 * @param options    参数
 */
function notarizeV3(targetFile, options) {
    return __awaiter(this, void 0, void 0, function* () {
        logger_1.default.info(`[notarizeV3]starting notarize process for:${targetFile}`);
        logger_1.default.info(`[notarizeV3]options:${JSON.stringify(options)}`);
        // 1、公证
        const id = notarize(targetFile, options);
        // 2、等待公证生效
        yield waitNotarizeTakeEffect(id, options);
        if (!(options === null || options === void 0 ? void 0 : options.isIgnoreStaple)) {
            logger_1.default.info('[notarizeV3] start staple!');
            // 3、装订票据
            yield staple(targetFile);
        }
        logger_1.default.info('[notarizeV3]notarize process success!');
    });
}
exports.notarizeV3 = notarizeV3;
(0, utils_1.checkSDKVersion)();//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/macNotarize.js.map