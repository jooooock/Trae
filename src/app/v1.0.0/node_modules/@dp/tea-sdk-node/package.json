{
  "name": "@dp/tea-sdk-node",
  "version": "3.0.8",
  "description": "",
  "main": "lib/index.js",
  "keywords": [],
  "author": "",
  "license": "ISC",
  "engines": {
    "node": ">=10.0.0"
  },
  "types": "./lib/index.d.ts",
  "dependencies": {
    "@logsdk/node-utils": "^3.0.6",
    "@types/node": "^12.12.50"
  },
  "scripts": {
    "build": "npm run clean && tsc --build tsconfig.build.json",
    "clean": "rm -rf ./lib",
    "watch": "npm run build -- --watch",
    "test": "jest"
  },
  "readme": "### Usage\n\nPlease refer to [wiki](https://bytedance.feishu.cn/wiki/wikcnJPblCCOgCuFriIZiIONeCe) for more information\n\n### Changelog\n\n`[3.0.8]`\n- fix issue that pluginContext.meta does not return latest value\n\n`[3.0.7]`\n- `teaSDK.collect` support override `header.custom`\n```ts\nteaSDK.collect({\n  header: { ...originHeaderConfig },\n  // will append(internal implementation is `Object.assign`) `field1` into `header.custom`, not replacement\n  custom: { field1: 1 }\n});\n```\n\n`[3.0.6]`\n- support config `header.custom` field directly via `teaSDK.config` api. Which looks like this\n\n```ts\nteaSDK.config({\n  header: { ...originHeaderConfig },\n  // will append(internal implementation is `Object.assign`) `field1` into `header.custom`, not replacement\n  custom: { field1: 1 }\n});\n```\nNote: From now on, config `header.custom` via `teaSDK.config({ header: { custom: '' } })` will get an deprecated warning.\n\n`[3.0.5]`\n- fix un-match `logLevel` options.\n\n`[3.0.4]`\n- `sdk.meta` add `caller` field\n\n`[3.0.3]`\n- update deps descriptions\n\n`[3.0.2]`\n- update type definition\n\n`[3.0.1]`\n`collectEvents` support for easier migration from `@byted-service/tea`.\n\n`[3.0.0]` \n**what's new**\n- Unified packages, one package with n plugins for all your needs.\n- Flexiable plugin system support\n- Stable libra plugin\n\n`[2.1.1]` support `event_verify_url` & `enableETTest` is deprecated\n\n**possible values**\n\n- （mainland China）：https://mcs.bytedance.net\n- （overseas）：https://mcs.byteoversea.net\n- （TikTok）：https://mcs-tiktok.byteoversea.net\n\n`[2.1.0]` transparent mode\noptimize for cli app.\n\n```diff\nexport interface InitialConfig {\n  /**\n   * @description prevent event report operation being included in Node.js event loop reference count [aka. unref api],\n   * Note: with this flag on, the success rate of event report is not guaranteed\n   */\n+  transparentMode?: boolean;\n}\n```\n\n`[2.0.0]` multi-instance support\n\n**API Changes & Migration Guide**\n\nIn order to make things more clear, there is some API changes, includes:\n\n- Instead of *initialize* the sdk, *construct* one is more ideal.\n\n```typescript\nimport { TeaSDK } from \"@dp/tea-sdk-node\";\n//or commonjs with\n// const { TeaSDK } = require(\"@dp/tea-sdk-node\");\n\nconst sdkInstance = new TeaSDK({\n  /**\n   * With all InitConfig support. Those values are only available on construction.\n   * @Note: InitConfig is now renamed to InitialConfig out of semantic concerning.\n   * */\n  app_id: 12345,\n  channel: 'cn',\n  logLevel: 'verbose'\n})\n\nsdkInstance.config({\n  user_unique_id: 'linyong.branson@bytedance.com', // as a global fallback value if you don't want to specify it every time.\n  custom: { // specify custom header content here\n    prop1: 'value1'\n  },\n});\n\nsdkInstance.collect(\"test_event\", { data: 'event content' })\nsdkInstance.collect(\"test_event\", { data: 'event content' }, {\n  user_unique_id: 'another_user@bytedance.com',\n  isolated: true // with this flag on, corresponding event will be send to isolated database, which is not available from tea or finder. Useful for development testing.\n})\n```\n- proxy configuration is isolated for respective instance.\n\n```typescript\nsdkInstance.setRequestProxy(\"http://localhost:7890\");\n```\n\n---\n\n`[1.2.2]` bugfix\n- fix possible null-access in some network circumstance.\n\n`[1.2.1]` bugfix\n- fix https.request arguments count error on node v8.0\n\n`[1.2.0]` feature update & bugfix\n- fix an issue that predefined properties like `user_is_auth` is missing after set.\n- new init & collect option `isolated`, which indicate that specific events should not be regard as producation statistics.\n\n```diff\ninterface InitConfig {\n  /**\n   * @description Warning: enable this global flag will send all events to isolated database,\n   * which is not consumable from tea or finder, make sure to disable before producation.\n   */\n+ isolated?: boolean;\n  app_id: number;\n}\n\ninterface ICollectFuncParams {\n  user_unique_id?: string;\n  /**\n   * @description local shortcut as init.isolated\n   */\n+ isolated?: boolean;\n}\n\nstatic collect(\n  name: string,\n  params: Object,\n  options?: ICollectFuncParams,\n): Promise<{ e: number } | { type: ErrorType; detail: string }>;\nstatic collect(\n  info: { name: string; params: Object }[],\n  options?: ICollectFuncParams,\n): Promise<{ e: number } | { type: ErrorType; detail: string }>;\n```\n\n`[1.1.4]` bugfix\n\n- fix an issue of `can not read property of undefined` when `options` parameter of `collect` is empty.\n- cache `ssid` for 50 most recently used `uuid`.\n\n`[1.1.3]` update README\n\n`[1.1.2]` enable ET test\n\n```typescript\nTeaSDK.init({\n  enableETTest: true\n})\n```\n\n`[1.1.1]` Nothing changed, `README.md` updated\n\n`[1.1.0]` API update and bugfix\n\n- `TeaSDK.collect` api change\n- fix an issue of event params being ignore when report event\n- remove `debugMode`, update to `logLevel`\n\n```typescript\ntype LogLevel = 'silent' | 'error' | 'verbose';\n```\n\n```typescript\nstatic collect(\n  name: string,\n  params: Object,\n  options?: ICollectFuncParams,\n): Promise<{ e: number } | { type: ErrorType; detail: string }>;\nstatic collect(\n  info: { name: string; params: Object }[],\n  options?: ICollectFuncParams,\n): Promise<{ e: number } | { type: ErrorType; detail: string }>;\n```\n\n`[1.0.1]` debug mode support, enable it via `debugMode` on init, or set environment variable `TeaDEBUG` to true\n\n```typescript\nTeaSDK.init({\n  ...,\n  debugMode: true\n})\n```\n\nor\n```shell\nexport TeaDEBUG=true\n```\n"
}