var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const package_json_1 = require("../package.json");
const timeZoneMin = new Date().getTimezoneOffset();
const tz_offset = timeZoneMin * 60;
const osNameDict = new Proxy({ darwin: 'mac', win32: 'windows' }, {
    get(target, property) {
        return target[property] || property;
    },
});
class ConfigManager {
    constructor(options) {
        this.options = options;
        this.userFields = {};
        // custom of event header;
        this.customField = {};
        this.partialHeaderFields = {
            app_id: options.app_id,
        };
        Object.assign(this.partialHeaderFields, {
            platform: 'Node.js',
            os_name: osNameDict[process.platform],
            tz_offset,
            sdk_version: package_json_1.version,
        });
    }
    get headerFields() {
        return Object.assign(Object.assign({}, this.partialHeaderFields), { custom: JSON.stringify(this.customField) });
    }
    get logger() {
        return this.options.logger;
    }
    /**
     * @description global caller
     */
    get caller() {
        return this.options.caller;
    }
    get appId() {
        return this.options.app_id;
    }
    configure(config) {
        var _a;
        this.logger.trace('Re-configure with %o', config);
        if ((_a = config.header) === null || _a === void 0 ? void 0 : _a.custom) {
            this.logger.warn('Set custom params inside header is deprecated, use `config` instead. which looks like:', `
teaSDK.config({
  header: { ... },
  user: { ... },
  custom: {/** custom content */},
})`);
        }
        const _b = config.header || {}, { custom } = _b, restHeader = __rest(_b, ["custom"]);
        // follow impl of prior version
        this.customField = JSON.parse(custom || '{}');
        Object.assign(this.partialHeaderFields, restHeader);
        Object.assign(this.userFields, config.user);
        Object.assign(this.customField, config.custom);
    }
    compose(event, context) {
        const userFields = Object.assign({}, this.userFields, event.user);
        if (!userFields.user_unique_id) {
            userFields.user_unique_id = 'anonymous';
            this.logger.warn('Composing events without specifying `user_unique_id` is strongly deprecated, use `sdk.config()` to add a global fallback value for anonymous users');
        }
        const useCustomField = Object.assign({}, this.customField, event.customOfHeader);
        return {
            id: (context === null || context === void 0 ? void 0 : context.id) || Math.random().toString(32).slice(2),
            originatedBy: (context === null || context === void 0 ? void 0 : context.originatedBy) || 'logsdk',
            createdAt: (context === null || context === void 0 ? void 0 : context.createdAt) || Date.now(),
            event: {
                server_time: Math.ceil(Date.now() / 1000),
                caller: event.caller || this.caller || '',
                user: userFields,
                header: Object.assign({
                    custom: JSON.stringify(useCustomField),
                }, this.partialHeaderFields, event.header),
                events: event.events.map(evt => (Object.assign(Object.assign({}, evt), { _staging_flag: this.options.isolated }))),
            },
        };
    }
}
exports.default = ConfigManager;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@dp/tea-sdk-node/lib/config-manager.js.map