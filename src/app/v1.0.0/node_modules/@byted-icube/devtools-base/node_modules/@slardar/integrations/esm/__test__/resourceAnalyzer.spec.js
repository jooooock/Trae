import anyTest from 'ava';
import sinon from 'sinon';
import { createBrowserClient } from '@slardar/web';
import { resourceAnalyzer } from '../resourceAnalyzer';
import { proxyLocalStorage } from './common';
var browserEnv = require('browser-env');
var test = anyTest;
test.beforeEach(function (t) {
    t.context.clock = sinon.useFakeTimers();
});
test.before(function () {
    browserEnv();
    proxyLocalStorage();
});
var resource_payload_1 = {
    name: 'http://test',
    entryType: 'resource',
    startTime: 1,
    duration: 1,
    initiatorType: 'script',
    nextHopProtocol: 'http/1.1',
    workerStart: 0,
    redirectStart: 1,
    redirectEnd: 1,
    fetchStart: 1,
    domainLookupStart: 1,
    domainLookupEnd: 1,
    connectStart: 1,
    secureConnectionStart: 0,
    connectEnd: 1,
    requestStart: 1,
    responseStart: 1,
    responseEnd: 1,
    transferSize: 60,
    encodedBodySize: 50,
    decodedBodySize: 200,
};
var resource_payload_2 = {
    name: 'http://test',
    entryType: 'resource',
    startTime: 1,
    duration: 1,
    initiatorType: 'script',
    nextHopProtocol: 'http/1.1',
    workerStart: 0,
    redirectStart: 1,
    redirectEnd: 1,
    fetchStart: 1,
    domainLookupStart: 1,
    domainLookupEnd: 1,
    connectStart: 1,
    secureConnectionStart: 0,
    connectEnd: 1,
    requestStart: 1,
    responseStart: 1,
    responseEnd: 1,
    transferSize: 70,
    encodedBodySize: 60,
    decodedBodySize: 300,
};
var resource_payload_cached = {
    name: 'http://test',
    entryType: 'resource',
    startTime: 1,
    duration: 0,
    initiatorType: 'script',
    nextHopProtocol: 'http/1.1',
    workerStart: 0,
    redirectStart: 1,
    redirectEnd: 1,
    fetchStart: 1,
    domainLookupStart: 1,
    domainLookupEnd: 1,
    connectStart: 1,
    secureConnectionStart: 0,
    connectEnd: 1,
    requestStart: 1,
    responseStart: 1,
    responseEnd: 1,
    transferSize: 0,
    encodedBodySize: 200,
    decodedBodySize: 500,
};
var resource_payload_service_worker = {
    name: 'http://test',
    entryType: 'resource',
    startTime: 1,
    duration: 11,
    initiatorType: 'script',
    nextHopProtocol: 'http/1.1',
    workerStart: 1,
    redirectStart: 1,
    redirectEnd: 1,
    fetchStart: 1,
    domainLookupStart: 1,
    domainLookupEnd: 1,
    connectStart: 1,
    secureConnectionStart: 0,
    connectEnd: 1,
    requestStart: 1,
    responseStart: 1,
    responseEnd: 1,
    transferSize: 22,
    encodedBodySize: 200,
    decodedBodySize: 500,
};
test('resourceAnalyzer', function (t) {
    var sb = sinon.createSandbox();
    var client = createBrowserClient();
    // 避免第一次自动发送 tti 导致 resourceAnalyzer 误计算
    var hackBeforeSend = function (e) {
        if (e.ev_type === 'performance' || e.ev_type === 'pageview') {
            return false;
        }
        return e;
    };
    client.on('beforeSend', hackBeforeSend);
    client.init({
        bid: 'xx',
        useLocalConfig: true,
        integrations: [resourceAnalyzer()],
    });
    client.start();
    client.off('beforeSend', hackBeforeSend);
    var firstPageviewPayload = {
        pid: 'first_page',
        source: 'init',
    };
    client.report({
        ev_type: 'pageview',
        payload: firstPageviewPayload,
    });
    var sendFake = sinon.fake();
    client.on('send', sendFake);
    client.report({
        ev_type: 'resource',
        payload: resource_payload_1,
    });
    client.report({
        ev_type: 'resource',
        payload: resource_payload_2,
    });
    client.report({
        ev_type: 'resource',
        payload: resource_payload_cached,
    });
    client.report({
        ev_type: 'performance',
        payload: {
            name: 'tti',
            value: 11,
            type: 'custom',
        },
    });
    t.like(sendFake.args[0][0].payload, resource_payload_1);
    t.like(sendFake.args[1][0].payload, resource_payload_2);
    t.like(sendFake.args[2][0].payload, resource_payload_cached);
    var homePageResource = {
        decodedBodySize: resource_payload_1.decodedBodySize + resource_payload_2.decodedBodySize + resource_payload_cached.decodedBodySize,
        encodedBodySize: resource_payload_1.encodedBodySize + resource_payload_2.encodedBodySize + resource_payload_cached.encodedBodySize,
        transferSize: resource_payload_1.transferSize + resource_payload_2.transferSize + resource_payload_cached.transferSize,
        resourceCount: 3,
        cacheRate: parseFloat((1 / 3).toFixed(2)),
        serviceWorkerRate: 0,
    };
    t.is(sendFake.args[3][0].ev_type, 'custom');
    t.deepEqual(sendFake.args[3][0].payload.metrics, homePageResource);
    // 在 integration 中的 send 中发送 custom，custom 又是同步的，所以比单测中的 send 来的晚
    t.is(sendFake.args[4][0].payload.name, 'tti');
    client.report({
        ev_type: 'resource',
        payload: resource_payload_1,
    });
    t.like(sendFake.args[5][0].payload, resource_payload_1);
    client.sendPageview('test_pageview_1');
    var firstPageviewResource = {
        decodedBodySize: resource_payload_1.decodedBodySize +
            resource_payload_2.decodedBodySize +
            resource_payload_cached.decodedBodySize +
            resource_payload_1.decodedBodySize,
        encodedBodySize: resource_payload_1.encodedBodySize +
            resource_payload_2.encodedBodySize +
            resource_payload_cached.encodedBodySize +
            resource_payload_1.encodedBodySize,
        transferSize: resource_payload_1.transferSize +
            resource_payload_2.transferSize +
            resource_payload_cached.transferSize +
            resource_payload_1.transferSize,
        resourceCount: 4,
        cacheRate: parseFloat((1 / 4).toFixed(2)),
        serviceWorkerRate: 0,
    };
    t.is(sendFake.args[6][0].ev_type, 'custom');
    t.deepEqual(sendFake.args[6][0].payload.metrics, firstPageviewResource);
    t.deepEqual(sendFake.args[6][0].payload.categories, {
        relevant_pid: firstPageviewPayload.pid,
        relevant_source: firstPageviewPayload.source,
    });
    t.is(sendFake.args[7][0].ev_type, 'pageview');
    client.report({
        ev_type: 'resource',
        payload: resource_payload_cached,
    });
    t.is(sendFake.args[8][0].ev_type, 'resource');
    client.report({
        ev_type: 'resource',
        payload: resource_payload_service_worker,
    });
    t.is(sendFake.args[9][0].ev_type, 'resource');
    var secondPageviewResource = {
        decodedBodySize: resource_payload_cached.decodedBodySize + resource_payload_service_worker.decodedBodySize,
        encodedBodySize: resource_payload_cached.encodedBodySize + resource_payload_service_worker.encodedBodySize,
        transferSize: resource_payload_cached.transferSize + resource_payload_service_worker.transferSize,
        resourceCount: 2,
        cacheRate: 0.5,
        serviceWorkerRate: 0.5,
    };
    client.sendPageview('test_pageview_2');
    t.deepEqual(sendFake.args[10][0].payload.metrics, secondPageviewResource);
    t.deepEqual(sendFake.args[10][0].payload.categories, {
        relevant_pid: 'test_pageview_1',
        relevant_source: 'user_set',
    });
    t.is(sendFake.args[11][0].ev_type, 'pageview');
    window.dispatchEvent(new window.Event('unload'));
    var sessionResourceMetric = {
        decodedBodySize: firstPageviewResource.decodedBodySize + secondPageviewResource.decodedBodySize,
        encodedBodySize: firstPageviewResource.encodedBodySize + secondPageviewResource.encodedBodySize,
        transferSize: firstPageviewResource.transferSize + secondPageviewResource.transferSize,
        resourceCount: firstPageviewResource.resourceCount + secondPageviewResource.resourceCount,
        cacheRate: parseFloat((2 / 6).toFixed(2)),
        serviceWorkerRate: parseFloat((1 / 6).toFixed(2)),
    };
    t.deepEqual(sendFake.args[12][0].ev_type, 'custom');
    t.deepEqual(sendFake.args[12][0].payload.metrics, sessionResourceMetric);
    sb.restore();
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/esm/__test__/resourceAnalyzer.spec.js.map