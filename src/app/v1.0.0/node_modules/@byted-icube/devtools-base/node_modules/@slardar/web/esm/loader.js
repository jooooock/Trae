import { __assign } from "tslib";
/* eslint-disable no-unused-labels */
import { camelToKebab, log, warn } from '@slardar/sdk-template';
import { getDefaultBrowser, loadScript, onPageLoad, getGlobalRegistry, reportSelfError, } from '@slardar/sdk-web';
import { EXTRA_INDEPENDENT_PLUGINS, SDK_VERSION } from './constants';
var isDebug = '';
debug: {
    isDebug = 'debug.';
}
export function loadPluginsOnPageLoad(client, registry, lp) {
    if (lp === void 0) { lp = loadPlugins; }
    onPageLoad(function () {
        client.on('init', function () {
            lp(client, registry);
        });
    });
}
export var loadCombinedPlugins = function (combinedPlugins, client, registry, ld) {
    if (ld === void 0) { ld = loadNow; }
    var _a = client.config(), plugins = _a.plugins, pluginBundle = _a.pluginBundle;
    // combined plugins
    var combinedPluginsToLoad = combinedPlugins.filter(function (name) { return plugins[name] && !client.destroyAgent.has(name); });
    var applyCombinedPlugins = function () { return combinedPluginsToLoad.forEach(function (name) { return applyPlugin(client, name, registry); }); };
    combinedPluginsToLoad.every(function (name) { return doesPluginExistInRegistry(name, registry); })
        ? applyCombinedPlugins()
        : ld(client, { name: pluginBundle.name }, applyCombinedPlugins);
};
export var loadIndependentPlugins = function (independentPlugins, client, registry, ld) {
    if (ld === void 0) { ld = loadNow; }
    var plugins = client.config().plugins;
    independentPlugins
        .filter(function (name) { return plugins[name] && !client.destroyAgent.has(name); })
        .forEach(function (name) {
        if (doesPluginExistInRegistry(name, registry)) {
            applyPlugin(client, name, registry);
        }
        else {
            ld(client, { name: name, config: plugins[name] }, function () { return applyPlugin(client, name, registry); });
        }
    });
};
var reloadWithClient = function (client) {
    return function (pluginName, pluginConfig) {
        var _a;
        var pluginBundle = client.config().pluginBundle;
        client.destroyAgent.has(pluginName) && client.destroyAgent.remove(pluginName);
        pluginConfig !== undefined && client.set({ plugins: __assign(__assign({}, client.config().plugins), (_a = {}, _a[pluginName] = pluginConfig, _a)) });
        pluginBundle && ~pluginBundle.plugins.indexOf(pluginName)
            ? loadCombinedPlugins([pluginName], client)
            : loadIndependentPlugins([pluginName], client);
    };
};
export function loadPlugins(client, registry, ld) {
    if (ld === void 0) { ld = loadNow; }
    var pluginBundle = client.config().pluginBundle;
    var combinedPlugins = pluginBundle ? pluginBundle.plugins : [];
    loadCombinedPlugins(combinedPlugins, client, registry, ld);
    loadIndependentPlugins(EXTRA_INDEPENDENT_PLUGINS, client, registry, ld);
    client.provide('reloadPlugin', reloadWithClient(client));
}
export function loadNow(client, _a, runAfterLoadScript, ls) {
    var name = _a.name, config = _a.config;
    if (ls === void 0) { ls = loadScript; }
    var path = getPluginPath(client, name, config);
    ls(path, function () {
        runAfterLoadScript();
    });
}
function getPluginPath(client, name, config) {
    var _a;
    return (_a = config === null || config === void 0 ? void 0 : config.path) !== null && _a !== void 0 ? _a : client.config().pluginPathPrefix + "/" + camelToKebab(name) + "." + SDK_VERSION + "." + isDebug + "js";
}
export function applyPlugin(client, name, registry) {
    if (registry === void 0) { registry = getGlobalRegistry(getDefaultBrowser()); }
    if (!registry)
        return;
    var plugin = getPluginFromRegistry(registry, name);
    if (!plugin) {
        warn('[loader].applyPlugin not found', name);
        return;
    }
    try {
        // perhaps integration has already set up
        if (client.destroyAgent.has(name)) {
            return;
        }
        plugin.apply(client);
    }
    catch (err) {
        reportSelfError(err);
        warn('[loader].applyPlugin failed', name, err);
    }
}
export function getPluginFromRegistry(registry, name) {
    return registry.plugins.filter(function (l) { return l.name === name && l.version === SDK_VERSION; })[0];
}
export function doesPluginExistInRegistry(name, registry) {
    if (registry === void 0) { registry = getGlobalRegistry(getDefaultBrowser()); }
    if (!registry || !registry.plugins)
        return false;
    if (getPluginFromRegistry(registry, name))
        return true;
    return false;
}
/**
 * Registers a plugin by adding it to the global registry.
 *
 * @param {string} name - The name of the plugin to register.
 * @param {PluginApplyFnForVol} apply - The function to apply the plugin.
 * @param {Registry} registry - The registry to add the plugin to.
 * @return {void}
 */
export function register(name, apply, registry) {
    if (registry === void 0) { registry = getGlobalRegistry(getDefaultBrowser()); }
    if (!registry || !registry.plugins)
        return;
    if (getPluginFromRegistry(registry, name)) {
        return;
    }
    registry.plugins.push({
        name: name,
        version: SDK_VERSION,
        apply: apply,
    });
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/loader.js.map