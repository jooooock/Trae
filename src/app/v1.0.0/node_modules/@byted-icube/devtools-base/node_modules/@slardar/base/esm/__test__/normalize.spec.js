import test from 'ava';
import { noop } from '@slardar/sdk-template';
import { now } from '@slardar/sdk-web';
import { normalizeInitConfig, normalizeUserConfig, validateInitConfig, parseServerConfig, normalizeStrictFields, } from '../normalize';
test('validateInitConfig', function (t) {
    t.true(validateInitConfig({ bid: '123', transport: { get: noop, post: noop } }));
    t.true(validateInitConfig({ bid: '123', pid: 'index', transport: { get: noop, post: noop } }));
    t.false(validateInitConfig(undefined));
    t.false(validateInitConfig(null));
    t.false(validateInitConfig({}));
    t.false(validateInitConfig({ pid: 'index' }));
});
test('normalizeStrictFields', function (t) {
    var cfg = {
        bid: 'bid',
        userId: '',
        deviceId: undefined,
        sessionId: null,
        env: 0,
    };
    t.is(normalizeStrictFields(cfg), cfg);
    t.deepEqual(normalizeStrictFields(cfg), { bid: 'bid' });
    var cfg2 = {
        bid: 'bid',
        userId: 'uid',
        deviceId: 'did',
        sessionId: 'sid',
        env: 'prod',
    };
    t.is(normalizeStrictFields(cfg2), cfg2);
    t.deepEqual(normalizeStrictFields(cfg2), cfg2);
});
test('normalizeUserConfig', function (t) {
    var cfg = {
        pid: 'index',
    };
    t.not(normalizeUserConfig(cfg), cfg);
    t.deepEqual(normalizeUserConfig(cfg), cfg);
    var cfg2 = {
        pid: 'index',
        userId: '',
    };
    t.deepEqual(normalizeUserConfig(cfg2), {
        pid: 'index',
    });
});
test('normalizeInitConfig', function (t) {
    var cfg = {
        bid: 'bid',
        pid: 'index',
    };
    t.deepEqual(normalizeInitConfig(cfg), cfg);
    var cfg2 = {
        pid: 'index',
        userId: '',
    };
    t.deepEqual(normalizeInitConfig(cfg2), {
        pid: 'index',
    });
});
test('parseServerConfig', function (t) {
    var fakeServerTimestamp = now();
    t.deepEqual(parseServerConfig(), {});
    t.deepEqual(parseServerConfig({}), {});
    t.deepEqual(parseServerConfig({
        user_id: 'cookie-id',
    }), {});
    t.deepEqual(parseServerConfig({
        user_id: 'user-id',
        sample: {
            sample_rate: 1,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: [
                {
                    name: 'pageview',
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            ],
        },
        timestamp: fakeServerTimestamp,
    }), {
        sample: {
            sample_rate: 1,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: {
                pageview: {
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            },
        },
        serverTimestamp: fakeServerTimestamp,
    });
    t.deepEqual(parseServerConfig({
        user_id: 'user-id',
        quota_rate: 0,
        sample: {
            sample_rate: 0.7,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: [
                {
                    name: 'pageview',
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            ],
        },
        timestamp: fakeServerTimestamp,
        apdex: {
            satisfying_threshold: 0,
            frustrating_threshold: 0,
            error_weight: [0, 0, 0],
            duration_apdex: [[{ weight: 3, threshold: 3000 }]],
            perf_apdex: {
                fcp: [{ weight: 3, threshold: 3000 }],
            },
            last_n: 180000,
        },
    }), {
        sample: {
            sample_rate: 0,
            sample_granularity: 'session',
            include_users: ['loz'],
            rules: {
                pageview: {
                    enable: true,
                    sample_rate: 0.3,
                    conditional_sample_rules: [],
                },
            },
        },
        serverTimestamp: fakeServerTimestamp,
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/base/esm/__test__/normalize.spec.js.map