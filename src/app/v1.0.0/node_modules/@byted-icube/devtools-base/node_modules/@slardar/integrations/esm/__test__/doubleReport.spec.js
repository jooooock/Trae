import { __assign, __read } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { doubleReport } from '../doubleReport';
import { createTestClient } from './common';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('doubleReport plugin', function (t) {
    var clientSend = sinon.fake();
    var testClient = createTestClient(clientSend);
    var bid = '1';
    var url = 'init-url';
    var initConfig = {
        bid: bid,
        url: url,
    };
    var configOption = {
        sessionId: '111',
        deviceId: '222',
        env: 'production',
        release: 'v1.0.0',
        userId: '1111',
        offset: 11,
    };
    testClient.init(initConfig);
    testClient.config(configOption);
    var _a = __read(doubleReport(testClient, bid), 1), sender = _a[0];
    testClient.start();
    testClient.report({
        ev_type: 'mock',
        payload: {
            id: 123,
        },
        extra: {
            bid: bid,
            url: url,
        },
    });
    t.true(clientSend.calledOnce);
    var list = JSON.parse(sender.getBatchData()).list;
    var clientSendArgs = clientSend.args[0][0];
    t.deepEqual(__assign(__assign({}, clientSendArgs), { common: __assign(__assign({}, clientSendArgs.common), {
            device_id: configOption.deviceId,
            env: configOption.env,
            release: configOption.release,
            session_id: configOption.sessionId,
            user_id: configOption.userId,
            sdk_offset: configOption.offset,
        }) }), list[0]);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/esm/__test__/doubleReport.spec.js.map