import test from 'ava';
import { handleBase64, isSkipBeforeCheck, measure, serializeDom2String } from '../util';
var browserEnv = require('browser-env');
test.beforeEach(function () {
    browserEnv();
});
test('isSkipBeforeCheck should work', function (t) {
    t.truthy(isSkipBeforeCheck({
        ev_type: 'performance',
        payload: {},
    }));
    t.truthy(isSkipBeforeCheck({
        ev_type: 'performance_longtask',
        payload: {},
    }));
    t.truthy(isSkipBeforeCheck({
        ev_type: 'performance_timing',
        payload: {},
    }));
    t.truthy(isSkipBeforeCheck({
        ev_type: 'custom',
        payload: {},
    }));
    t.falsy(isSkipBeforeCheck({
        ev_type: 'http',
        payload: {},
    }));
});
test('handleBase64 should work', function (t) {
    var input = 'data:image/png;base64';
    t.is(handleBase64(input), input);
});
test.skip('getBlankImageBase64 should work within handleBase64', function (t) {
    // node-canvas 的依赖太多，严重影响 CI install
    // https://github.com/Automattic/node-canvas/wiki/Installation%3A-Fedora-and-other-RPM-based-distributions
    // @napi-rs/canvas 作为 node-canvas 替代品，无依赖，但 jsdom 只会寻找 node-canvas 包，没有暴露对外接口，暂时 skip
    var input_2 = 'data:imag;';
    t.true(handleBase64(input_2).startsWith('data:image/jpeg;base64'));
    var input_3 = 'data:,';
    t.true(handleBase64(input_3).startsWith('data:image/jpeg;base64'));
});
test('measure should work', function (t) {
    // @ts-expect-error
    Element.prototype.getBoundingClientRect = function () {
        return {
            bottom: 0,
            height: 10,
            left: 0,
            right: 0,
            top: 0,
            width: 10,
        };
    };
    // @ts-expect-error
    window.innerHeight = 1080;
    var htmlString = "\n<main>\n  <div id=\"root\">\n  <div>123</div>\n  </div>\n</main>\n";
    var htmlString_2 = "\n<main>\n  <div id=\"root\">\n  <div>123</div>\n  <div>456</div>\n  </div>\n</main>\n";
    var htmlString_3 = "\n<main>\n  <div id=\"root\">\n  <div>\n  <div>123</div>\n  </div>\n  </div>\n</main>\n";
    var parser = new DOMParser();
    var html_1 = parser.parseFromString(htmlString, 'text/html');
    var html_2 = parser.parseFromString(htmlString_2, 'text/html');
    var html_3 = parser.parseFromString(htmlString_3, 'text/html');
    t.is(measure(html_1.getElementById('root')), 1);
    t.is(measure(html_2.getElementById('root')), 2);
    t.is(measure(html_3.getElementById('root')), 1.5);
});
test('serializeDom2String should work', function (t) {
    // @ts-expect-error
    Element.prototype.getBoundingClientRect = function () {
        return {
            bottom: 0,
            height: 1,
            left: 0,
            right: 0,
            top: 0,
            width: 0,
        };
    };
    var htmlString = "\n    <main>\n      <div id=\"root\">\n        <div id=\"div-1\" class=\"class-div-1\">id=div-1</div>\n        <p id=\"p-1\" class=\"class-p-1\">id=p-1</p>\n        <section id=\"section-1\" class=\"class-section-1\">\n          <div id=\"div-2\" class=\"class-div-2\">\n            <p id=\"p-3\" class=\"class-p-3\">id=p-3</p>\n            <div id=\"div-3\" class=\"class-div-3\">\n              <div id=\"div-4\" class=\"class-div-4\">\n                <div id=\"div-5\" class=\"class-div-5\">id=div-5</div>\n                <p id=\"p-5\" class=\"class-p-5\">id=p-5</p>\n              </div>\n            <p id=\"p-4\" class=\"class-p-4\">id=p-4</p>\n            </div>\n          </div>\n          <p id=\"p-2\" class=\"class-p-2\">id=p-2</p>\n        </section>\n    </div>\n    </main>\n";
    var parser = new DOMParser();
    var html = parser.parseFromString(htmlString, 'text/html');
    var domString_1 = serializeDom2String(html.getElementById('root'));
    t.truthy(domString_1.includes('p-1'));
    t.truthy(domString_1.includes('p-2'));
    t.truthy(domString_1.includes('p-3'));
    t.truthy(domString_1.includes('p-4'));
    t.falsy(domString_1.includes('p-5'));
    t.truthy(domString_1.includes('class-p-1'));
    t.truthy(domString_1.includes('class-p-2'));
    t.truthy(domString_1.includes('class-p-3'));
    t.truthy(domString_1.includes('class-p-4'));
    t.falsy(domString_1.includes('class-p-5'));
    var domString_2 = serializeDom2String(html.getElementById('root'), 1);
    t.truthy(domString_2.includes('p-1'));
    t.truthy(domString_2.includes('p-2'));
    t.truthy(domString_2.includes('p-3'));
    t.falsy(domString_2.includes('p-4'));
    t.falsy(domString_2.includes('p-5'));
    t.truthy(domString_2.includes('class-p-1'));
    t.truthy(domString_2.includes('class-p-2'));
    t.truthy(domString_2.includes('class-p-3'));
    t.falsy(domString_2.includes('class-p-4'));
    t.falsy(domString_2.includes('class-p-5'));
    var domString_3 = serializeDom2String(html.getElementById('root'), 2);
    t.truthy(domString_3.includes('p-1'));
    t.truthy(domString_3.includes('p-2'));
    t.falsy(domString_3.includes('p-3'));
    t.falsy(domString_3.includes('p-4'));
    t.falsy(domString_3.includes('p-5'));
    t.truthy(domString_3.includes('class-p-1'));
    t.truthy(domString_3.includes('class-p-2'));
    t.falsy(domString_3.includes('class-p-3'));
    t.falsy(domString_3.includes('class-p-4'));
    t.falsy(domString_3.includes('class-p-5'));
    var htmlString_2 = "\n    <main>\n      <div id=\"root\">\n        <div id=\"div-1\" class=\"class-div-1 test_classname\">id=div-1</div>\n    </div>\n    </main>\n";
    var html_2 = parser.parseFromString(htmlString_2, 'text/html');
    // @ts-expect-error
    window.innerHeight = 1080;
    var domString_4 = serializeDom2String(html_2.getElementById('root'));
    t.is(domString_4, '<div width="0" height="1" top="0" id="root" innerHeight="1080"><div width="0" height="1" top="0" id="div-1" class="class-div-1 test_classname"></div></div>');
    t.is(serializeDom2String(null), '');
    t.is(serializeDom2String(undefined), '');
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/sdk-web/esm/monitors/blank-screen/__test__/util.spec.js.map