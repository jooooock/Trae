import ava from 'ava';
import sinon from 'sinon';
import { actionPlugin } from '@slardar/integrations/src/action';
import { blankScreenPlugin } from '@slardar/integrations/src/blankscreen';
import { PAGEVIEW_MONITOR_PLUGIN_NAME, PageviewMonitorPlugin, getDefaultBrowser, getGlobalRegistry, BLANK_SCREEN_MONITOR_PLUGIN_NAME, ACTION_MONITOR_PLUGIN_NAME, } from '@slardar/sdk-web';
import { createBrowserClient } from '../index';
import { applyPlugin, getPluginFromRegistry, loadNow, loadPlugins, loadPluginsOnPageLoad, register } from '../loader';
import { createMinimalBrowserClient } from '../minimal';
import { createTestWebClient, proxyLocalStorage } from './util';
var browserEnv = require('browser-env');
var test = ava;
test.before(function () {
    browserEnv();
    proxyLocalStorage();
});
test.serial('loadPluginsOnPageLoad should work before page load', function (t) {
    var REGISTRY = getGlobalRegistry(getDefaultBrowser());
    REGISTRY.plugins = [];
    t.context.clock = sinon.useFakeTimers();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('loading');
    var client = createTestWebClient();
    var loadPlugins = sinon.fake();
    var TestPluginFakeFn = sinon.fake();
    var TestPlugin = function (client) {
        client.on('init', function () {
            TestPluginFakeFn();
        });
    };
    TestPlugin(client);
    loadPluginsOnPageLoad(client, REGISTRY, loadPlugins);
    t.assert(TestPluginFakeFn.notCalled);
    client.init({
        bid: 'bid',
        plugins: {
            pageview: {},
        },
    });
    t.assert(TestPluginFakeFn.calledOnce);
    t.assert(loadPlugins.notCalled);
    window.dispatchEvent(new window.Event('load'));
    t.context.clock.tick(10);
    t.assert(loadPlugins.called);
    sb.restore();
    t.context.clock.restore();
});
test.serial('loadPluginsOnPageLoad should work after page load', function (t) {
    var REGISTRY = getGlobalRegistry(getDefaultBrowser());
    REGISTRY.plugins = [];
    t.context.clock = sinon.useFakeTimers();
    var sb = sinon.createSandbox();
    var client = createTestWebClient();
    sb.stub(document, 'readyState').value('complete');
    var loadPlugins = sinon.fake();
    var TestPluginFakeFn = sinon.fake();
    var orders = [];
    var TestPlugin = function (client) {
        client.on('init', function () {
            TestPluginFakeFn();
            orders.push('TestPlugin');
        });
    };
    TestPlugin(client);
    loadPluginsOnPageLoad(client, REGISTRY, function () {
        orders.push('loadPlugins');
        loadPlugins();
    });
    client.init({
        bid: 'bid',
        plugins: {
            pageview: {},
        },
    });
    t.deepEqual(orders, ['TestPlugin', 'loadPlugins']);
    t.assert(TestPluginFakeFn.calledOnce);
    t.assert(loadPlugins.calledOnce);
    sb.restore();
});
test.serial('loadPlugins', function (t) {
    var REGISTRY = {
        plugins: [],
        errors: [],
        subject: {},
    };
    var client = createTestWebClient();
    client.init({
        bid: 'bid',
        // combine plugins
        pluginBundle: {
            name: 'bundle',
            plugins: ['pageview', 'jsError'],
        },
        plugins: {
            pageview: {},
            jsError: {},
            blankScreen: {},
        },
    });
    var loadNow = sinon.fake();
    loadPlugins(client, REGISTRY, loadNow);
    t.assert(loadNow.calledTwice);
    t.deepEqual(loadNow.args[0][1], {
        name: 'bundle',
    });
    t.deepEqual(loadNow.args[1][1], {
        name: 'blankScreen',
        config: {},
    });
    // set info into registry to mock fetch script successfully
    REGISTRY.plugins.push({
        name: 'pageview',
        version: '',
        apply: function () { },
    });
    REGISTRY.plugins.push({
        name: 'blankScreen',
        version: '',
        apply: function () { },
    });
    REGISTRY.plugins.push({
        name: 'jsError',
        version: '',
        apply: function () { },
    });
    //  loadPlugins should store pre-plugins in registry, so that reusing by next instance
    var client_2 = createTestWebClient();
    client_2.init({
        bid: 'bid_2',
        pluginBundle: {
            name: 'bundle',
            plugins: ['pageview', 'jsError'],
        },
        plugins: {
            pageview: {},
            jsError: {},
        },
    });
    var loadNow_2 = sinon.fake();
    loadPlugins(client_2, REGISTRY, loadNow_2);
    t.assert(loadNow_2.notCalled);
    // independent plugin
    var client_3 = createTestWebClient();
    client_3.init({
        bid: 'bid_2',
        plugins: {
            jsError: {},
            action: {
                pure: true,
            },
            blankScreen: {
                // new
                screenshot: true,
            },
        },
    });
    var loadNow_3 = sinon.fake();
    loadPlugins(client_3, REGISTRY, loadNow_3);
    t.assert(loadNow_3.calledOnce);
    t.deepEqual(loadNow_3.args[0][1], {
        name: 'action',
        config: { pure: true },
    });
});
test.serial('loadNow', function (t) {
    var p = {
        name: 'pageview',
        config: {
            path: 'pageview-path',
        },
        apply: sinon.fake(),
    };
    var blankScreen = {
        name: 'blankScreen',
        config: {},
        apply: sinon.fake(),
    };
    var client = createTestWebClient();
    var loadScriptCbs = [];
    var loadScript = sinon.spy(function (url, cb) {
        loadScriptCbs.push({
            url: url,
            cb: cb,
        });
    });
    client.init({
        bid: 'bid',
    });
    var runAfterLoadScript = sinon.fake();
    loadNow(client, p, runAfterLoadScript, loadScript);
    t.assert(loadScript.calledOnce);
    t.is(loadScript.args[0][0], 'pageview-path');
    loadScript.args[0][1]();
    t.assert(runAfterLoadScript.calledOnce);
    t.is(loadScriptCbs.length, 1);
    loadNow(client, p, runAfterLoadScript, loadScript);
    t.is(loadScript.args[1][0], 'pageview-path');
    loadScript.args[1][1]();
    t.assert(runAfterLoadScript.calledTwice);
    t.is(loadScriptCbs.length, 2);
    loadNow(client, blankScreen, runAfterLoadScript, loadScript);
    loadScript.args[2][1]();
    t.assert(runAfterLoadScript.callCount === 3);
    t.is(loadScriptCbs.length, 3);
    t.is(loadScript.args[2][0], '/blank-screen..debug.js');
});
test.serial('applyPlugin should work together with createMinimalBrowserClient and destroyAgent', function (t) {
    var REGISTRY = {
        plugins: [],
        errors: [],
        subject: {},
    };
    register(PAGEVIEW_MONITOR_PLUGIN_NAME, PageviewMonitorPlugin, REGISTRY);
    var client = createMinimalBrowserClient();
    client.init({
        bid: '1',
        useLocalConfig: true,
    });
    t.false(client.destroyAgent.has(PAGEVIEW_MONITOR_PLUGIN_NAME));
    applyPlugin(client, PAGEVIEW_MONITOR_PLUGIN_NAME, REGISTRY);
    t.true(client.destroyAgent.has(PAGEVIEW_MONITOR_PLUGIN_NAME));
    applyPlugin(client, PAGEVIEW_MONITOR_PLUGIN_NAME, REGISTRY);
    t.true(client.destroyAgent.has(PAGEVIEW_MONITOR_PLUGIN_NAME));
    var ThrowErrorPlugin = {
        name: 'ThrowErrorPlugin',
        apply: function () {
            throw new Error('error');
        },
    };
    t.throws(ThrowErrorPlugin.apply);
    register(ThrowErrorPlugin.name, ThrowErrorPlugin.apply, REGISTRY);
    t.notThrows(function () {
        applyPlugin(client, ThrowErrorPlugin.name, REGISTRY);
    });
});
test('register', function (t) {
    var global = {};
    var r = getGlobalRegistry(global);
    var p = {
        name: 'pageview',
        apply: function () { },
    };
    t.notThrows(function () {
        register(p.name, p.apply, {});
    });
    register(p.name, p.apply, r);
    t.is(global.__SLARDAR_REGISTRY__['Slardar'].plugins.length, 1);
    t.is(global.__SLARDAR_REGISTRY__['Slardar'].plugins[0].name, 'pageview');
    t.is(global.__SLARDAR_REGISTRY__['Slardar'].plugins[0].apply, p.apply);
    t.is(global.__SLARDAR_REGISTRY__['Slardar'].plugins[0].version, '');
    t.notThrows(function () {
        register(p.name, p.apply, r);
        t.is(global.__SLARDAR_REGISTRY__['Slardar'].plugins.length, 1);
    });
});
test('getPluginFromRegistry', function (t) {
    var REGISTRY = {
        plugins: [],
        errors: [],
        subject: {},
    };
    t.falsy(getPluginFromRegistry(REGISTRY, 'test_plugin'));
    var TestPlugin = {
        name: 'test_plugin',
        apply: function () { },
    };
    register(TestPlugin.name, TestPlugin.apply, REGISTRY);
    var testPluginFromRegistry = getPluginFromRegistry(REGISTRY, TestPlugin.name);
    t.true(testPluginFromRegistry.apply === TestPlugin.apply);
});
test('getGlobalRegistry', function (t) {
    t.is(getGlobalRegistry(), undefined);
    var global = {};
    var r = getGlobalRegistry(global);
    t.deepEqual(r, {
        plugins: [],
        errors: [],
        subject: {},
    });
    t.is(r, global.__SLARDAR_REGISTRY__['Slardar']);
});
test('ReloadPlugin should work with createBrowserClient and registry', function (t) {
    var client = createBrowserClient();
    client.init({
        bid: '1',
        useLocalConfig: true,
        plugins: {
            pageview: {
                sendInit: false,
            },
        },
    });
    register(PAGEVIEW_MONITOR_PLUGIN_NAME, PageviewMonitorPlugin);
    PageviewMonitorPlugin(client);
    t.true(client.destroyAgent.has('pageview'));
    t.like(client.config().plugins[PAGEVIEW_MONITOR_PLUGIN_NAME], {
        sendInit: false,
    });
    client.reloadPlugin('pageview');
    t.true(client.destroyAgent.has('pageview'));
    t.like(client.config().plugins[PAGEVIEW_MONITOR_PLUGIN_NAME], {
        sendInit: false,
    });
    client.reloadPlugin('pageview', {
        sendInit: true,
    });
    t.true(client.destroyAgent.has('pageview'));
    t.like(client.config().plugins[PAGEVIEW_MONITOR_PLUGIN_NAME], {
        sendInit: true,
    });
});
test('ReloadPlugin should work with createBrowserClient and integrations', function (t) {
    var client = createBrowserClient();
    client.init({
        bid: '1',
        useLocalConfig: true,
        plugins: {
            blankScreen: {
                screenshot: true,
            },
            action: {
                pure: true,
            },
        },
        integrations: [blankScreenPlugin(), actionPlugin()],
    });
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('complete');
    t.true(client.destroyAgent.has(BLANK_SCREEN_MONITOR_PLUGIN_NAME));
    client.reloadPlugin(BLANK_SCREEN_MONITOR_PLUGIN_NAME);
    t.true(client.destroyAgent.has(BLANK_SCREEN_MONITOR_PLUGIN_NAME));
    t.like(client.config().plugins[BLANK_SCREEN_MONITOR_PLUGIN_NAME], {
        screenshot: true,
    });
    client.reloadPlugin(BLANK_SCREEN_MONITOR_PLUGIN_NAME, {
        screenshot: false,
    });
    t.deepEqual(client.config().plugins[ACTION_MONITOR_PLUGIN_NAME], {
        pure: true,
    });
    t.true(client.destroyAgent.has(BLANK_SCREEN_MONITOR_PLUGIN_NAME));
    t.like(client.config().plugins[BLANK_SCREEN_MONITOR_PLUGIN_NAME], {
        screenshot: false,
    });
    sb.restore();
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/__test__/loader.spec.js.map