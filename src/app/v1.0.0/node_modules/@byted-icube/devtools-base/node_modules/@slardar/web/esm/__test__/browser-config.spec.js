import { __assign } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { getXhrTransport, now } from '@slardar/sdk-web';
import { configHolder, createBrowserConfigManager, getServerConfig, mergeSampleConfig } from '../browser-config';
test.serial('getServerConfig', function (t) {
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var cb = sinon.fake();
    getServerConfig(getXhrTransport(), 'some domain', 'some-bid', cb);
    t.is(requests.length, 1);
    t.is(requests[0].url, 'https://some domain/monitor_web/settings/browser-settings?bid=some-bid&store=1');
    t.is(requests[0].withCredentials, true);
    t.is(requests[0].method, 'GET');
    requests[0].respond(200, {}, JSON.stringify({
        data: {
            sample: {
                sampleRate: 1,
            },
        },
    }));
    t.assert(cb.calledOnce);
    t.deepEqual(cb.args[0][0], {
        sample: {
            sampleRate: 1,
        },
    });
    getServerConfig(getXhrTransport(), 'some domain', 'another-bid', cb);
    t.is(requests.length, 2);
    t.is(requests[1].url, 'https://some domain/monitor_web/settings/browser-settings?bid=another-bid&store=1');
    requests[1].respond(0, undefined, undefined);
    t.assert(cb.calledTwice);
    t.deepEqual(cb.args[1][0], { sample: { sample_rate: 0.001 } });
    xhr.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('BrowserConfigManager - getConfig', function (t) {
    var timer = sinon.useFakeTimers();
    var xhr = sinon.useFakeXMLHttpRequest();
    // @ts-expect-error
    global.XMLHttpRequest = xhr;
    var requests = [];
    xhr.onCreate = function (req) {
        requests.push(req);
    };
    var cfg = {
        bid: 'bid',
        pid: 'pid',
        viewId: 'pid_' + now(),
        deviceId: '',
        userId: '',
        sessionId: '',
        release: 'release',
        env: 'env',
        domain: 'test-domain',
        pluginPathPrefix: '',
        plugins: {},
        transport: getXhrTransport(),
    };
    var bfm = createBrowserConfigManager(__assign({}, cfg));
    var onReady = sinon.fake();
    var onChange = sinon.fake();
    bfm.onChange(onChange);
    bfm.onReady(onReady);
    t.deepEqual(bfm.getConfig(), cfg);
    t.assert(onReady.notCalled);
    t.assert(onChange.notCalled);
    timer.tick(567);
    bfm.setConfig({
        pid: 'init-pid',
    });
    t.assert(onChange.calledOnce);
    t.assert(onReady.notCalled);
    t.is(requests.length, 1);
    t.is(requests[0].url, 'https://test-domain/monitor_web/settings/browser-settings?bid=bid&store=1');
    t.is(requests[0].withCredentials, true);
    t.is(requests[0].method, 'GET');
    requests[0].respond(200, {}, JSON.stringify({
        data: {
            user_id: 'server-id',
        },
    }));
    t.assert(onReady.calledOnce);
    t.assert(onChange.calledTwice);
    bfm.setConfig({
        userId: 'local-id',
    });
    t.assert(onChange.calledThrice);
    t.is(bfm.getConfig().userId, 'local-id');
    xhr.restore();
    timer.restore();
    // @ts-expect-error
    global.XMLHttpRequest = undefined;
});
test.serial('BrowserConfigManager - localConfig', function (t) {
    var timer = sinon.useFakeTimers();
    var cfg = {
        bid: 'bid',
        pid: 'pid',
        viewId: 'pid_' + now(),
        deviceId: '',
        userId: '',
        sessionId: '',
        release: 'release',
        env: 'env',
        useLocalConfig: true,
        domain: 'test-domain',
        pluginPathPrefix: '',
        plugins: {},
        transport: getXhrTransport(),
    };
    var bfm = createBrowserConfigManager(__assign({}, cfg));
    var onReady = sinon.fake();
    var onChange = sinon.fake();
    bfm.onChange(onChange);
    bfm.onReady(onReady);
    t.deepEqual(bfm.getConfig(), cfg);
    t.assert(onReady.notCalled);
    t.assert(onChange.notCalled);
    timer.tick(234);
    bfm.setConfig({
        pid: 'init-pid',
    });
    t.assert(onChange.calledOnce);
    t.assert(onReady.calledOnce);
    t.is(bfm.getConfig().userId, '');
    timer.restore();
});
test.serial('BrowserConfigManager - already ready', function (t) {
    var timer = sinon.useFakeTimers();
    var cfg = {
        bid: 'bid',
        pid: 'pid',
        viewId: 'pid_' + now(),
        deviceId: '',
        userId: '',
        sessionId: '',
        release: 'release',
        env: 'env',
        useLocalConfig: true,
        domain: 'test-domain',
        pluginPathPrefix: '',
        plugins: {},
        transport: getXhrTransport(),
    };
    var bfm = createBrowserConfigManager(__assign({}, cfg));
    timer.tick(789);
    bfm.setConfig({
        pid: 'init-pid',
    });
    var onReady = sinon.fake();
    var onChange = sinon.fake();
    bfm.onChange(onChange);
    bfm.onReady(onReady);
    t.assert(onChange.notCalled);
    t.assert(onReady.calledOnce);
    t.is(bfm.getConfig().userId, '');
    timer.restore();
});
test.serial('BrowserConfigManager - configHolder', function (t) {
    var stub = sinon.stub(configHolder, 'get').returns({
        user_id: 'server-id',
    });
    var cfg = {
        bid: 'bid',
        pid: 'pid',
        viewId: 'pid_' + now(),
        deviceId: '',
        userId: '',
        sessionId: '',
        release: 'release',
        env: 'env',
        domain: 'test-domain',
        pluginPathPrefix: '',
        plugins: {},
        transport: getXhrTransport(),
    };
    var bfm = createBrowserConfigManager(__assign({}, cfg));
    var onReady = sinon.fake();
    var onChange = sinon.fake();
    bfm.onChange(onChange);
    bfm.onReady(onReady);
    t.deepEqual(bfm.getConfig(), cfg);
    t.assert(onReady.notCalled);
    t.assert(onChange.notCalled);
    bfm.setConfig({
        pid: 'init-pid',
    });
    t.assert(onChange.calledTwice);
    t.assert(onReady.calledOnce);
    t.is(bfm.getConfig().userId, '');
    stub.restore();
});
test('mergeSampleConfig', function (t) {
    t.is(mergeSampleConfig(), undefined);
    t.deepEqual(mergeSampleConfig({ sample_rate: 1 }), { sample_rate: 1 });
    t.deepEqual(mergeSampleConfig(undefined, { sample_rate: 1 }), { sample_rate: 1 });
    t.deepEqual(mergeSampleConfig({ sample_rate: 1, include_users: ['123'] }, { sample_rate: 0.5, include_users: ['456'] }), {
        sample_rate: 0.5,
        include_users: ['123', '456'],
        rules: {},
    });
    t.deepEqual(mergeSampleConfig({
        sample_rate: 1,
        rules: {
            pageview: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    }, {
        sample_rate: 0.5,
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.3,
                conditional_sample_rules: [],
            },
            jserr: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    }), {
        sample_rate: 0.5,
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.3,
                conditional_sample_rules: [],
            },
            jserr: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/__test__/browser-config.spec.js.map