/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
/* eslint-disable no-unused-labels */
import { ContextPlugin, createClient, LoggerPlugin, noop, IntegrationPlugin } from '@slardar/sdk-template';
import { SamplePlugin, CustomPlugin } from '@slardar/sdk-web';
import { builder as baseBuilder } from './builder';
import { createConfigManager } from './config';
import { DEFAULT_SAMPLE_CONFIG, REPORT_DOMAIN, DEFAULT_SENDER_SIZE } from './constants';
import { normalizeInitConfig, normalizeUserConfig, validateInitConfig } from './normalize';
import { InjectEnvPlugin, InjectConfigPlugin } from './plugins';
import { createSender as createBaseSender } from './sender';
import { getDefaultDeviceId, getDefaultSessionId, getDefaultUserId, getReportUrl, getViewId } from './util';
export var getDefaultConfig = function (_c) { return ({
    bid: '',
    pid: '',
    viewId: getViewId('_'),
    userId: getDefaultUserId(),
    deviceId: getDefaultDeviceId(),
    sessionId: getDefaultSessionId(),
    domain: REPORT_DOMAIN,
    release: '',
    env: 'production',
    sample: DEFAULT_SAMPLE_CONFIG,
    plugins: {},
    transport: {
        get: noop,
        post: noop,
    },
    useLocalConfig: false,
}); };
export var createMinimalClient = function (_a) {
    var _b = _a === void 0 ? {} : _a, _d = _b.createSender, createSender = _d === void 0 ? function (config) {
        return createBaseSender({
            size: DEFAULT_SENDER_SIZE,
            endpoint: getReportUrl(config.domain),
            transport: config.transport,
        });
    } : _d, _e = _b.builder, builder = _e === void 0 ? baseBuilder : _e, _f = _b.createDefaultConfig, createDefaultConfig = _f === void 0 ? getDefaultConfig : _f;
    var client = createClient({
        validateInitConfig: validateInitConfig,
        initConfigNormalizer: normalizeInitConfig,
        userConfigNormalizer: normalizeUserConfig,
        createSender: createSender,
        builder: builder,
        createDefaultConfig: createDefaultConfig,
        createConfigManager: createConfigManager,
    });
    ContextPlugin(client);
    InjectConfigPlugin(client);
    InjectEnvPlugin(client);
    IntegrationPlugin(client);
    return client;
};
export var createBaseClient = function (config) {
    if (config === void 0) { config = {}; }
    var client = createMinimalClient(config);
    SamplePlugin(client);
    debug: {
        // for debug
        LoggerPlugin(client);
    }
    CustomPlugin(client);
    return client;
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/base/esm/client.js.map