import { __assign, __read, __spreadArray } from "tslib";
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
/* eslint-disable @typescript-eslint/prefer-optional-chain */
import { noop, log } from '@slardar/sdk-template';
import { parseServerConfig } from './normalize';
import { getSettingsUrl } from './util';
export var createConfigManager = function (defaultConfig) {
    // the merged config
    var config = defaultConfig;
    // save it so we know when initConfig is set
    var initConfig;
    // save UserConfig so we can merge with priority
    var userConfig = {};
    // save the original server config, from get_setting response
    var serverConfig;
    // cache the parsed ServerConfig, used in merge
    var parsedServerConfig;
    var onReady = noop;
    // call when config changed
    var onChange = noop;
    return {
        getConfig: function () {
            return config;
        },
        setConfig: function (c) {
            userConfig = __assign(__assign({}, userConfig), (c || {}));
            updateConfig();
            if (!initConfig) {
                // handle init
                initConfig = c;
                if (config.useLocalConfig || !config.bid) {
                    parsedServerConfig = {};
                    onReady();
                }
                else {
                    getServerConfig(config.transport, config.domain, config.bid, function (res) {
                        serverConfig = res;
                        handleServerConfig();
                    });
                }
            }
            return config;
        },
        onChange: function (fn) {
            onChange = fn;
        },
        onReady: function (fn) {
            onReady = fn;
            if (parsedServerConfig) {
                onReady();
            }
        },
    };
    function updateConfig() {
        var newConfig = __assign(__assign(__assign({}, defaultConfig), (parsedServerConfig || {})), userConfig);
        newConfig.sample = mergeSampleConfig(mergeSampleConfig(defaultConfig.sample, parsedServerConfig === null || parsedServerConfig === void 0 ? void 0 : parsedServerConfig.sample), userConfig.sample);
        config = newConfig;
        onChange();
    }
    function handleServerConfig() {
        parsedServerConfig = parseServerConfig(serverConfig);
        updateConfig();
        onReady();
    }
};
export function getServerConfig(transport, domain, bid, cb) {
    if (!transport.get) {
        return cb({});
    }
    transport.get({
        withCredentials: true,
        url: getSettingsUrl(domain) + "?bid=" + bid + "&store=1",
        success: function (res) {
            cb(res.data || {});
        },
        fail: function () {
            cb({ sample: { sample_rate: 0.001 } });
        },
    });
}
export function mergeSampleConfig(a, b) {
    if (!a || !b)
        return a || b;
    var res = __assign(__assign({}, a), b);
    res.include_users = __spreadArray(__spreadArray([], __read((a.include_users || [])), false), __read((b.include_users || [])), false);
    res.rules = __spreadArray(__spreadArray([], __read(Object.keys(a.rules || {})), false), __read(Object.keys(b.rules || {})), false).reduce(function (obj, key) {
        var _a, _b;
        if (!(key in obj)) {
            if (key in (a.rules || {}) && key in (b.rules || {})) {
                obj[key] = __assign(__assign({}, a.rules[key]), b.rules[key]);
                obj[key].conditional_sample_rules = __spreadArray(__spreadArray([], __read((a.rules[key].conditional_sample_rules || [])), false), __read((b.rules[key].conditional_sample_rules || [])), false);
            }
            else {
                obj[key] = ((_a = a.rules) === null || _a === void 0 ? void 0 : _a[key]) || ((_b = b.rules) === null || _b === void 0 ? void 0 : _b[key]);
            }
        }
        return obj;
    }, {});
    return res;
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/base/esm/config.js.map