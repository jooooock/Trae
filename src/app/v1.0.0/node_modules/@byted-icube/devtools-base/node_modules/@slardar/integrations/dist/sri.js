'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var noop = function () { return ({}); };

// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(o) {
    return typeof o === 'object' && o !== null;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(o) {
    return typeof o === 'function';
}

function getDefaultBrowser() {
    if (typeof window === 'object' && isObject(window))
        return window;
}
function getDefaultDocument() {
    if (typeof document === 'object' && isObject(document))
        return document;
}
function getDefaultPromise() {
    if (getDefaultBrowser() && 'Promise' in window)
        return Promise;
}
function getDefaultFetch() {
    try {
        // eslint-disable-next-line compat/compat
        new Headers();
        // eslint-disable-next-line compat/compat
        new Request('');
        // eslint-disable-next-line compat/compat
        new Response();
        // eslint-disable-next-line compat/compat
        return window.fetch;
    }
    catch (_a) {
        //
    }
}

function getFullUrl(url) {
    var document = getDefaultDocument();
    if (!document || !url)
        return '';
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}

var SRI_INTEGRATION_NAME = 'SriPlugin';
var SRI_EV_TYPE = 'sri';
var sriPlugin = function (onError) {
    var tearDownFn = noop;
    return {
        name: SRI_INTEGRATION_NAME,
        setup: function (client) {
            var window = getDefaultBrowser();
            var fetch = getDefaultFetch();
            var promise = getDefaultPromise();
            if (!window || !fetch || !promise) {
                return;
            }
            var loadScript = createLoadScript(function (payload) {
                client.report({ ev_type: SRI_EV_TYPE, payload: payload });
            }, promise, fetch, onError);
            var sriErrorLog = staticSRIErrorLog(loadScript, window);
            window.addEventListener('error', sriErrorLog, true);
            tearDownFn = function () { return window.removeEventListener('error', sriErrorLog, true); };
        },
        tearDown: function () { return tearDownFn(); },
    };
};
var staticSRIErrorLog = function (loadScript, window) { return function (event) {
    var _a, _b, _c;
    var e = event || window.event || {};
    var target;
    try {
        target = ((_b = (_a = e.target) !== null && _a !== void 0 ? _a : e.srcElement) !== null && _b !== void 0 ? _b : {});
    }
    catch (e) {
        return;
    }
    if (!checkHasIntegrity(target)) {
        return;
    }
    var url = getSrc(target);
    var tagName = ((_c = target.tagName) === null || _c === void 0 ? void 0 : _c.toLowerCase()) || '';
    if (!url || !tagName || url === location.href) {
        return;
    }
    loadScript(url);
}; };
var checkHasIntegrity = function (target) {
    if (isFunction(target.getAttribute)) {
        return Boolean(target.getAttribute('integrity'));
    }
    else if (target.integrity) {
        return true;
    }
    return false;
};
var getSrc = function (target) {
    if (isFunction(target.getAttribute)) {
        return target.getAttribute('src');
    }
    return target.src || target.href || '';
};
var createLoadScript = function (cb, promise, _fetch, onError) {
    return function (src) {
        promise
            .all([loadScript(src, _fetch), loadScript(src + "?vt=" + Date.now(), _fetch, false)])
            .then(function (_a) {
            var _b = __read(_a, 2), errorFileRes = _b[0], realFileRes = _b[1];
            if (errorFileRes.status === 200 && realFileRes.status === 200) {
                return promise.all([errorFileRes.text(), realFileRes.text()]).then(function (contexts) {
                    var errorFileContext = contexts[0] || errorFileRes.status + "," + realFileRes.status;
                    var errorFileSize = errorFileContext.length;
                    var realFileSize = contexts[1].length;
                    return [errorFileSize, realFileSize, errorFileContext, src];
                });
            }
        })
            .then(function (ret) {
            if (!ret || !cb) {
                return;
            }
            var _a = __read(ret, 3), errorFileSize = _a[0], realFileSize = _a[1], errorFileContext = _a[2];
            if (errorFileContext && errorFileSize !== realFileSize) {
                cb(getSourceData.apply(void 0, __spreadArray([], __read(ret), false)));
            }
        })
            .catch(function (e) {
            if (onError) {
                onError(e);
            }
        });
    };
};
// 加载文件
var loadScript = function (url, fetch, cache) {
    if (cache === void 0) { cache = true; }
    return fetch(url, cache ? { cache: 'force-cache' } : { cache: 'no-store' }).then(function (res) {
        return res.ok ? res : new Response();
    });
};
var getSourceData = function (error_file_size, real_file_size, error_file_context, static_file_src) { return ({
    error_file_size: error_file_size,
    real_file_size: real_file_size,
    error_file_context: error_file_context,
    static_file_src: static_file_src,
    static_file_url: getFullUrl(static_file_src) || '',
}); };

exports.SRI_INTEGRATION_NAME = SRI_INTEGRATION_NAME;
exports.sriPlugin = sriPlugin;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/dist/sri.js.map
