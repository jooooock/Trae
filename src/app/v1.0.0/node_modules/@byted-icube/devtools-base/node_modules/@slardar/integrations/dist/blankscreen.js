'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

var noop = function () { return ({}); };

// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(o) {
    return typeof o === 'object' && o !== null;
}
function isUndefined(o) {
    return o === undefined;
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(o) {
    return typeof o === 'function';
}
function isNumber(o) {
    return typeof o === 'number';
}

/**
 * 将tearDownGroup 注册到 destroyAgent，destroyAgent会在实例销毁时自动销毁tearDownGroup
 */
var registerTearDownGroup = function (client, pluginName, evType, tearDownGroup) {
    return client.destroyAgent.set(pluginName, evType, tearDownGroup);
};

/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
function initSubjectInGlobal(client, args) {
    return client.initSubject(args);
}

var now = function () { return Date.now(); };

function getDefaultBrowser() {
    if (typeof window === 'object' && isObject(window))
        return window;
}
function getDefaultDocument() {
    if (typeof document === 'object' && isObject(document))
        return document;
}
function getDefaultPromise() {
    if (getDefaultBrowser() && 'Promise' in window)
        return Promise;
}
function getDefaultMutationObserver() {
    if (getDefaultBrowser() && isFunction(window.MutationObserver))
        return window.MutationObserver;
}
function getDefaultPerformanceObserver() {
    if (getDefaultBrowser() && isFunction(window.PerformanceObserver))
        return window.PerformanceObserver;
}

var applyMutationObserver = function (MutationObserver, callback) {
    // eslint-disable-next-line compat/compat
    var observer = MutationObserver && new MutationObserver(callback);
    var observe = function (target, options) {
        observer && target && observer.observe(target, options);
    };
    var disconnect = function () { return observer && observer.disconnect(); };
    return [observe, disconnect];
};
var applyPerformance = function (performance) {
    // eslint-disable-next-line compat/compat
    var timing = (performance && performance.timing) || undefined;
    var now = function () {
        if (performance && performance.now)
            return performance.now();
        var time = Date.now ? Date.now() : +new Date();
        var start = (timing && timing.navigationStart) || 0;
        return time - start;
    };
    var getEntriesByType = function (type) {
        var getEntriesByType = (performance || {}).getEntriesByType;
        return (isFunction(getEntriesByType) && getEntriesByType.call(performance, type)) || [];
    };
    var getEntriesByName = function (name) {
        var getEntriesByName = (performance || {}).getEntriesByName;
        return (isFunction(getEntriesByName) && getEntriesByName.call(performance, name)) || [];
    };
    var clearResourceTiming = function () {
        var clearResourceTimings = (performance || {}).clearResourceTimings;
        isFunction(clearResourceTimings) && clearResourceTimings.call(performance);
    };
    return [timing, now, getEntriesByType, clearResourceTiming, getEntriesByName];
};
var applyRequestIdleCallback = function (win) {
    return (win.requestIdleCallback ||
        function (cb) {
            return win.setTimeout(cb, 1);
        });
};

var addListenerToWindow = function (w, type, listener, options) {
    if (options === void 0) { options = false; }
    w.addEventListener(type, listener, options);
    return function () {
        w.removeEventListener(type, listener, options);
    };
};
var addListenerToDocument = function (d, type, listener, options) {
    if (options === void 0) { options = false; }
    d.addEventListener(type, listener, options);
    return function () {
        d.removeEventListener(type, listener, options);
    };
};
var invokeCallbackOnce = function (cb) {
    var hasInvoked = false;
    var invoke = function (params) {
        if (hasInvoked)
            return;
        hasInvoked = true;
        cb && cb(params);
    };
    return [invoke];
};
var getConfig = function (c, defaultConfig) {
    if (isObject(c)) {
        return __assign(__assign({}, defaultConfig), c);
    }
    else {
        return c ? defaultConfig : false;
    }
};

var getReportPathRegExp = function () {
    var SELF_REPORT_PATH_REGEXP = new RegExp('\\/monitor_web\\/collect|\\/monitor_browser\\/collect\\/batch', 'i');
    return function (url) { return SELF_REPORT_PATH_REGEXP.test(url); };
};

var RESOURCE_TYPE = ['resource']; // used by resourceMonitor / resourceErrorMonitor / HttpMonitor
var LONGTASK_TYPE = ['longtask']; // used by ttiMonitor / longtaskMonitor / actionMonitor / mpfidMonitor
var applyPerformanceObserver = function (PerformanceObserver, callback, onFail) {
    var observer = PerformanceObserver &&
        new PerformanceObserver(function (list, ob) {
            if (list.getEntries) {
                list.getEntries().forEach(function (val, i, arr) { return callback(val, i, arr, ob); });
            }
            else {
                onFail && onFail();
            }
        });
    var observe = function (types) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ entryTypes: types });
        }
        catch (_a) {
            return onFail && onFail();
        }
    };
    var bufferedObserver = function (type, durationThreshold) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            var options = { type: type, buffered: true };
            !isUndefined(durationThreshold) && (options.durationThreshold = durationThreshold);
            observer.observe(options);
        }
        catch (_a) {
            return onFail && onFail();
        }
        observer.observe({ type: type, buffered: false });
    };
    var disconnect = function () { return observer && observer.disconnect(); };
    return [observe, bufferedObserver, disconnect];
};
var observePerf = function (Ob, pipe, types) {
    var _a = __read(applyPerformanceObserver(Ob, pipe), 3), observe = _a[0], disconnect = _a[2];
    observe(types);
    return disconnect;
};
var LONGTASK_SUBJECT_NAME = 'longtask_0';
var observeLongtask = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    tearDown(observePerf(PerformanceObserver, next, LONGTASK_TYPE));
};
var longtaskSubject = [LONGTASK_SUBJECT_NAME, observeLongtask];
var RESOURCE_SUBJECT_NAME = 'resource_0';
var observeResource = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    var hitReportPath = getReportPathRegExp();
    tearDown(observePerf(PerformanceObserver, function (entry) {
        !hitReportPath(entry.name) && next(entry);
    }, RESOURCE_TYPE));
};
var resourceSubject = [RESOURCE_SUBJECT_NAME, observeResource];

var JS_ERROR_EV_TYPE = 'js_error';
var HTTP_EV_TYPE = 'http';
var RESOURCE_ERROR_EV_TYPE = 'resource_error';
var CUSTOM_EV_TYPE = 'custom';
var PERFORMANCE_METRIC_EV_TYPE = 'performance';
var PERFORMANCE_TIMING_EV_TYPE = 'performance_timing';
var LONG_TASK_EV_TYPE = 'performance_longtask';
var BLANK_SCREEN_EV_TYPE = 'blank_screen';

function getPluginConfig(client, pluginName, defaultConfig) {
    var _a;
    var c = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[pluginName];
    return getConfig(c, defaultConfig);
}

var UNLOAD_SUBJECT_NAME = 'unload_0';
var observeUnload = function (next, tearDown) {
    var window = getDefaultBrowser();
    if (!window)
        return;
    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    var _a = __read(invokeCallbackOnce(next), 1), invokeCbOnce = _a[0];
    var unloadEventList = ['unload', 'beforeunload', 'pagehide'];
    var handler = function () {
        invokeCbOnce();
    };
    var tearDowns = [];
    unloadEventList.forEach(function (ev) {
        tearDowns.push(addListenerToWindow(window, ev, handler, false));
    });
    tearDown(function () {
        tearDowns.forEach(function (e) { return e(); });
    });
};
var unloadSubject = [UNLOAD_SUBJECT_NAME, observeUnload];
var DOM_CONTENT_LOAD_SUBJECT_NAME = 'domLoad_1';
var observeDOMContentLoad = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onceTriggered = false;
    var removeListener = noop;
    var onDOMContentLoad = function () {
        setTimeout(function () {
            next();
            onceTriggered = true;
        }, 0);
    };
    if (document.readyState !== 'loading') {
        onDOMContentLoad();
    }
    else {
        removeListener = addListenerToDocument(document, 'DOMContentLoaded', onDOMContentLoad, false);
    }
    tearDown(function () {
        removeListener();
    }, function (subscriber) {
        onceTriggered && subscriber();
    });
};
/**
 * When subscribing to DOMContentLoadSubject, it's important to note that it may immediately and synchronously trigger.
 */
var DOMContentLoadSubject = [
    DOM_CONTENT_LOAD_SUBJECT_NAME,
    observeDOMContentLoad,
];
var ACTIVATED_SUBJECT_NAME = 'activated_0';
var observeActivated = function (next, tearDown) {
    var document = getDefaultDocument();
    if (!document)
        return;
    var onceTriggered = false;
    var removeListener = noop;
    var onActivated = function () {
        next();
        onceTriggered = true;
    };
    // @ts-expect-error
    if (document && document.prerendering) {
        removeListener = addListenerToDocument(document, 'prerenderingchange', onActivated, true);
    }
    else {
        onActivated();
    }
    tearDown(function () {
        removeListener();
    }, function (subscriber) {
        onceTriggered && subscriber();
    });
};
/**
 * When subscribing to activatedSubject, it's important to note that it may immediately and synchronously trigger.
 */
var activatedSubject = [ACTIVATED_SUBJECT_NAME, observeActivated];

var DEFAULT_IGNORE_TAGS = ['SCRIPT', 'STYLE', 'META', 'HEAD'];
var ERROR_RELATED_TYPE = [JS_ERROR_EV_TYPE, HTTP_EV_TYPE, RESOURCE_ERROR_EV_TYPE];
var DEFAULT_THRESHOLD = 1.5;
var MAX_RENDER_TIME = 10000;
var MAX_CHECK_TIME = 8000;
var DEFAULT_CHECK_TIME = 4000;
var MAX_RELATED_TIME = 10000;
var DEFAULT_T0_DATA_URL_QUALITY = 0.1;
var DEFAULT_MAX_DEPTH = 4;
var CHECK_EXCLUSIVE_EV_TYPES = [
    PERFORMANCE_METRIC_EV_TYPE,
    LONG_TASK_EV_TYPE,
    PERFORMANCE_TIMING_EV_TYPE,
    CUSTOM_EV_TYPE,
];
var isSkipBeforeCheck = function (ev) { return ~CHECK_EXCLUSIVE_EV_TYPES.indexOf(ev.ev_type); };
var blankErrorCompare = function (relatedError, ev) {
    if (ERROR_RELATED_TYPE.indexOf(ev.ev_type) === -1)
        return relatedError;
    if (ev.ev_type === HTTP_EV_TYPE && ev.payload.response.status < 400) {
        return relatedError;
    }
    if (relatedError && ERROR_RELATED_TYPE.indexOf(relatedError.type) < ERROR_RELATED_TYPE.indexOf(ev.ev_type)) {
        return relatedError;
    }
    var message = '';
    switch (ev.ev_type) {
        case JS_ERROR_EV_TYPE:
            message = ev.payload.error.message;
            break;
        case HTTP_EV_TYPE:
            message = ev.payload.request.url;
            break;
        case RESOURCE_ERROR_EV_TYPE:
            message = ev.payload.url;
            break;
    }
    return { type: ev.ev_type, message: message, timestamp: now() };
};
var isSkipMeasure = function (element, depth) {
    return ~DEFAULT_IGNORE_TAGS.indexOf(element.tagName) || depth > DEFAULT_MAX_DEPTH;
};
var getBounding = function (element) {
    var _a = element.getBoundingClientRect(), width = _a.width, height = _a.height, top = _a.top;
    return { width: width, height: height, top: top };
};
var getElementByRootSelector = function (rootSelector) {
    return rootSelector ? document.querySelector(rootSelector) : document.body;
};
var measure = function (element, depth, sum, threshold) {
    if (depth === void 0) { depth = 0; }
    if (sum === void 0) { sum = 0; }
    if (threshold === void 0) { threshold = DEFAULT_THRESHOLD; }
    if (!element || isSkipMeasure(element, depth) || sum >= threshold) {
        return sum;
    }
    var score = (function () {
        // skip the first level element
        if (!depth)
            return 0;
        var _a = getBounding(element), top = _a.top, height = _a.height;
        // (1 << (depth - 1)) === Math.pow(2, depth - 1)
        return top > innerHeight || height <= 0 ? 0 : 1 / (1 << (depth - 1));
    })();
    return [].reduceRight.call(element.children, function (all, child) { return measure(child, depth + 1, all, threshold); }, sum + score);
};
/**
 * Serializes an HTML element and its children to a string representation.
 *
 * @param {Element | undefined | null} element - The element to serialize.
 * @param {number} [depth=0] - The depth of the element in the DOM tree.
 * @param {boolean} [onceAttributeFlag=true] - Whether to include the innerHeight attribute.
 * @return {string} The serialized string representation of the HTML element and its children.
 */
function serializeDom2String(element, depth, onceAttributeFlag) {
    if (depth === void 0) { depth = 0; }
    if (onceAttributeFlag === void 0) { onceAttributeFlag = true; }
    if (!element || isSkipMeasure(element, depth))
        return '';
    var attributeGathering = __assign(__assign({}, getBounding(element)), { id: element.getAttribute('id'), class: element.getAttribute('class') });
    var attrString = Object.keys(attributeGathering).reduce(function (accumulator, key) {
        return "" + accumulator + (isNumber(attributeGathering[key]) || attributeGathering[key] ? " " + key + "=\"" + attributeGathering[key] + "\"" : '');
    }, '');
    var tagName = element.tagName.toLowerCase();
    var children = [].reduce.call(element.children, function (acc, child) { return acc + serializeDom2String(child, depth + 1, false); }, '');
    return "<" + tagName + attrString + (onceAttributeFlag ? " innerHeight=\"" + innerHeight + "\"" : '') + ">" + children + "</" + tagName + ">";
}
/* c8 ignore start */
var screenshot = function (_a) {
    var _b;
    var cb = _a.cb, screenshotUrl = _a.screenshotUrl, window = _a.window, document = _a.document, mask = _a.mask, partialShot = _a.partialShot, quality = _a.quality, rootSelector = _a.rootSelector;
    if (!getDefaultPromise() || !window || !document) {
        return;
    }
    function onload() {
        var requestIdleCallback = applyRequestIdleCallback(window);
        requestIdleCallback(function () {
            window.html2canvas &&
                window.html2canvas((partialShot && rootSelector && document.querySelector(rootSelector)) || document.body, {
                    scale: 360 / window.innerWidth,
                    mask: mask,
                })
                    .then(function (canvas) {
                    cb(handleBase64(canvas.toDataURL('image/jpeg', quality)));
                })
                    .catch(function () {
                    cb(getBlankImageBase64());
                });
        });
    }
    if (window.html2canvas) {
        return onload();
    }
    var script = document.createElement('script');
    script.src = screenshotUrl;
    script.crossOrigin = 'anonymous';
    script.onload = onload;
    script.onerror = function () {
        cb();
    };
    // eslint-disable-next-line compat/compat
    (_b = document.head) === null || _b === void 0 ? void 0 : _b.appendChild(script);
};
/* c8 ignore end */
/**
 *
 * @param base64
 * @see https://html2canvas.hertzen.com/faq#why-is-the-produced-canvas-empty-or-cuts-off-half-way-through
 * @returns
 */
function handleBase64(base64) {
    // if element's width or height is 0 or greater than maximum canvas size, html2canvas will return "data:," in base64
    return base64.slice(0, 10) === 'data:image' ? base64 : getBlankImageBase64();
}
/**
 * Creates a blank image of the specified width and height and returns it as a
 * base64-encoded JPEG data URL.
 *
 * @param {number} width - The desired width of the image in pixels.
 * @param {number} height - The desired height of the image in pixels.
 * @returns {string} The base64-encoded JPEG data URL of the blank image.
 */
/* c8 ignore start */
function getBlankImageBase64(width, height) {
    if (width === void 0) { width = 192; }
    if (height === void 0) { height = 108; }
    var canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    var ctx = canvas.getContext('2d');
    if (ctx) {
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, width, height);
    }
    return canvas.toDataURL('image/jpeg');
}
/* c8 ignore stop */

var blankScreenGetterWithObserver = function (report, tearDownGroup, _a, _b) {
    var _c = __read(_a, 5), activatedObserver = _c[0], getDomContentLoadObserver = _c[1], getLongtaskObserver = _c[2], getResourceObserver = _c[3], unloadObserver = _c[4];
    var threshold = _b.threshold, takeScreenshot = _b.screenshot, rootSelector = _b.rootSelector, autoDetect = _b.autoDetect, ssUrl = _b.ssUrl, quality = _b.quality, mask = _b.mask, partialShot = _b.partialShot, initDetTime = _b.initDetTime, runDetTime = _b.runDetTime;
    var win = getDefaultBrowser();
    var document = getDefaultDocument();
    var rAF = win.requestAnimationFrame || noop;
    var cAF = win.cancelAnimationFrame || noop;
    var _d = __read(applyPerformance(performance), 2), relativeNow = _d[1];
    var blankInfo;
    var errorInfo;
    var otherReportedTimestamp = 0;
    var reported = false;
    var timer;
    var rAFTimer;
    var checkTimer;
    var hasTakeScreenshot = !takeScreenshot;
    var calculateBlankInfo = function () {
        var element = getElementByRootSelector(rootSelector);
        if (!element) {
            return;
        }
        var score = measure(element, 0, 0, threshold);
        if (score < threshold) {
            return [now(), score];
        }
    };
    var sendOnceAndTearDown = function (reportTimestamp, base64) {
        if (reported)
            return;
        // calculate blank info once more to make sure blank info is matched with serialized_dom
        blankInfo = calculateBlankInfo();
        if (!blankInfo) {
            return;
        }
        // set flag here to make sure that only take screenshot once
        reported = true;
        // tear down all observer in pure report function to mark sure blankInfo correctly
        tearDownGroup.forEach(function (e) { return e(); });
        tearDownGroup.length = 0;
        report({
            ev_type: BLANK_SCREEN_EV_TYPE,
            payload: {
                timestamp: blankInfo[0],
                score: blankInfo[1],
                screenshot: base64,
                error: errorInfo,
                serialized_dom: serializeDom2String(getElementByRootSelector(rootSelector)),
            },
            overrides: {
                timestamp: reportTimestamp || blankInfo[0],
            },
        });
    };
    var reportIfAllowed = function () {
        if (!blankInfo || reported) {
            return;
        }
        if (hasTakeScreenshot) {
            sendOnceAndTearDown();
        }
        else {
            hasTakeScreenshot = true;
            screenshot({
                cb: sendOnceAndTearDown.bind(null, now()),
                screenshotUrl: ssUrl,
                window: win,
                document: document,
                mask: mask,
                partialShot: partialShot,
                quality: quality,
                rootSelector: rootSelector,
            });
        }
    };
    var applyOtherReport = function (ev) {
        if (reported || isSkipBeforeCheck(ev))
            return;
        otherReportedTimestamp = now();
        if (errorInfo && otherReportedTimestamp - errorInfo.timestamp > MAX_RELATED_TIME) {
            errorInfo = undefined;
        }
        errorInfo = blankErrorCompare(errorInfo, ev);
    };
    var schedule = function () {
        checkTimer && clearTimeout(checkTimer);
        timer && clearTimeout(timer);
        timer = win.setTimeout(function () {
            rAFTimer = rAF(function () {
                blankInfo = calculateBlankInfo();
                blankInfo && checkAndReport();
            });
        }, 1000);
    };
    var applyCheck = function (cb) {
        var checkTimestamp;
        return function () {
            checkTimer && clearTimeout(checkTimer);
            checkTimestamp = now();
            checkTimer = win.setTimeout(function () {
                if (otherReportedTimestamp > checkTimestamp) {
                    schedule();
                    return;
                }
                cb();
            }, relativeNow() > MAX_RENDER_TIME ? runDetTime : initDetTime);
        };
    };
    var checkAndReport = applyCheck(reportIfAllowed);
    tearDownGroup.push(unloadObserver[0](function () {
        errorInfo && sendOnceAndTearDown();
    }));
    if (autoDetect)
        // start observe blank screen after DOMContentLoaded and prerendering
        tearDownGroup.push(activatedObserver[0](function () {
            var domContentLoadObserver = getDomContentLoadObserver();
            tearDownGroup.push(domContentLoadObserver[0](function () {
                var _a;
                // observe dom and schedule
                var _b = __read(applyMutationObserver(getDefaultMutationObserver(), schedule), 2), mutObserve = _b[0], mutDisconnect = _b[1];
                tearDownGroup.push(function () {
                    clearTimeout(timer);
                    clearTimeout(checkTimer);
                    cAF(rAFTimer);
                    mutDisconnect && mutDisconnect();
                });
                mutObserve((_a = getDefaultDocument()) === null || _a === void 0 ? void 0 : _a.body, { subtree: true, childList: true });
                // observe resource & longtask and schedule
                tearDownGroup.push(getLongtaskObserver()[0](function () {
                    timer && schedule();
                }));
                tearDownGroup.push(getResourceObserver()[0](function () {
                    timer && schedule();
                }));
                // start first schedule by default
                schedule();
            }));
        }));
    return [applyOtherReport, schedule];
};

var BLANK_SCREEN_MONITOR_PLUGIN_NAME = 'blankScreen';
var SCREEN_SHOT_FILE_NAME = 'screenshot.min.js';
function BlankScreenMonitorBasePlugin(client, config) {
    var document = getDefaultDocument();
    var window = getDefaultBrowser();
    if (!document || !window)
        return;
    var tearDownGroup = [];
    var _a = __read(blankScreenGetterWithObserver(client.report.bind(client), tearDownGroup, [
        initSubjectInGlobal(client, activatedSubject),
        function () { return initSubjectInGlobal(client, DOMContentLoadSubject); },
        function () { return initSubjectInGlobal(client, longtaskSubject); },
        function () { return initSubjectInGlobal(client, resourceSubject); },
        initSubjectInGlobal(client, unloadSubject),
    ], config), 2), applyOtherReport = _a[0], detectBlankScreen = _a[1];
    var listenOtherReport = function (ev) {
        applyOtherReport(ev);
        return ev;
    };
    client.on('report', listenOtherReport);
    tearDownGroup.push(function () {
        client.off('report', listenOtherReport);
    });
    registerTearDownGroup(client, BLANK_SCREEN_MONITOR_PLUGIN_NAME, BLANK_SCREEN_EV_TYPE, tearDownGroup);
    client.provide('detectBlankScreen', detectBlankScreen);
}
function BlankScreenMonitorPlugin(client, overrideConfig) {
    client.on('init', function () {
        var defaultConfig = {
            autoDetect: true,
            threshold: DEFAULT_THRESHOLD,
            screenshot: true,
            mask: false,
            ssUrl: client.config().pluginPathPrefix + "/" + SCREEN_SHOT_FILE_NAME,
            partialShot: true,
            quality: DEFAULT_T0_DATA_URL_QUALITY,
            initDetTime: MAX_CHECK_TIME,
            runDetTime: DEFAULT_CHECK_TIME,
        };
        var config = overrideConfig
            ? getConfig(overrideConfig, defaultConfig)
            : getPluginConfig(client, BLANK_SCREEN_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        BlankScreenMonitorBasePlugin(client, config);
    });
}

var BLANK_SCREEN_INTEGRATION_NAME = BLANK_SCREEN_MONITOR_PLUGIN_NAME;
var blankScreenPlugin = function (blankScreenConfig) {
    if (blankScreenConfig === void 0) { blankScreenConfig = {}; }
    return ({
        name: BLANK_SCREEN_INTEGRATION_NAME,
        setup: function (client) {
            BlankScreenMonitorPlugin(client, blankScreenConfig);
        },
    });
};

exports.BLANK_SCREEN_INTEGRATION_NAME = BLANK_SCREEN_INTEGRATION_NAME;
exports.blankScreenPlugin = blankScreenPlugin;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/dist/blankscreen.js.map
