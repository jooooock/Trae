'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var noop = function () { return ({}); };
function id(v) {
    return v;
}

// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(o) {
    return typeof o === 'object' && o !== null;
}
function isUndefined(o) {
    return o === undefined;
}
var objProto = Object.prototype;
function isArray(o) {
    return objProto.toString.call(o) === '[object Array]';
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(o) {
    return typeof o === 'function';
}
function isString(o) {
    return typeof o === 'string';
}

var arrayRemove = function (arr, e) {
    if (!isArray(arr)) {
        return arr;
    }
    var i = arr.indexOf(e);
    if (i >= 0) {
        var arr_ = arr.slice();
        arr_.splice(i, 1);
        return arr_;
    }
    return arr;
};

function getRegexp(ignore) {
    if (!isArray(ignore)) {
        return null;
    }
    return ignore.length ? joinRegExp(ignore) : null;
}
function joinRegExp(patterns) {
    var sources = [];
    var len = patterns.length;
    for (var i = 0; i < len; i++) {
        var pattern = patterns[i];
        if (isString(pattern)) {
            sources.push(pattern.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1'));
        }
        else if (pattern && pattern.source) {
            sources.push(pattern.source);
        }
    }
    return new RegExp(sources.join('|'), 'i');
}
var checkIfHit = function (rules, url) {
    var Rgx = getRegexp(rules || []);
    return !!Rgx && Rgx.test(url);
};

/**
 * 劫持对象方法
 * 必须记得给 hookFunc 劫持的方法包 try catch ！
 * 不在本方法里包是为了避免对象原方法被调用两次
 */
// eslint-disable-next-line @typescript-eslint/ban-types
var hookMethodDangerously = function (obj, key, hookFunc) {
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        if (!obj) {
            return noop;
        }
        var origin = obj[key];
        var hookedUnsafe = hookFunc.apply(void 0, __spreadArray([origin], __read(params), false));
        var hooked = hookedUnsafe;
        if (isFunction(hooked)) {
            hooked = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return hookedUnsafe.apply(this, args);
            };
        }
        obj[key] = hooked;
        return function () {
            hooked === obj[key] ? (obj[key] = origin) : (hookedUnsafe = origin);
        };
    };
};

var isHitBySampleRate = function (sampleRate) {
    if (Math.random() < Number(sampleRate)) {
        return true;
    }
    return false;
};

var BUFFER_TIME = 300000; // 5分钟
var applyBufferTimer = function (checkIfNeedCancel, cb, bufferTime) {
    var tid = 0;
    if (bufferTime === -1)
        return noop;
    return function () {
        if (checkIfNeedCancel()) {
            tid && clearTimeout(tid);
            tid = 0;
            return;
        }
        tid === 0 && (tid = setTimeout(cb, bufferTime));
    };
};

var nextLink = function (args, cb) {
    var nextCbs = [];
    try {
        nextCbs = cb.reduce(function (sum, s) {
            try {
                var nextCb = s(args);
                typeof nextCb === 'function' && sum.push(nextCb);
            }
            catch (_a) {
                // do nothing
            }
            return sum;
        }, []);
    }
    catch (_a) {
        // do nothing
    }
    return function (nextArgs) { return nextLink(nextArgs, nextCbs); };
};
var toObservable = function (bufferTime) {
    if (bufferTime === void 0) { bufferTime = BUFFER_TIME; }
    var subscribers = [];
    var __complete = [];
    var closed = false;
    var attachCb;
    // 暂缓的自动销毁机制，比如5min 没有人订阅就自动销毁
    var setCloseIfNeed = applyBufferTimer(function () { return !!subscribers.length; }, function () {
        closed = true;
        attachCb && attachCb[0]();
        __complete.forEach(function (e) { return e(); });
        __complete.length = 0;
        attachCb = undefined;
    }, bufferTime);
    var unsubscribe = function (o) {
        subscribers = arrayRemove(subscribers, o);
        !closed && setCloseIfNeed();
    };
    return {
        next: function (args) {
            return nextLink(args, subscribers);
        },
        complete: function (cb) {
            __complete.push(cb);
        },
        attach: function (disconnect, onSubscribe) {
            attachCb = [disconnect, onSubscribe];
        },
        subscribe: function (o) {
            if (closed)
                throw new Error('Observer is closed');
            subscribers.push(o);
            attachCb && attachCb[1] && attachCb[1](o);
            setCloseIfNeed();
            return function () { return unsubscribe(o); };
        },
        unsubscribe: unsubscribe,
    };
};
var createSafeObserver = function (observer, completeCb, bufferTime) {
    var cur = toObservable(bufferTime);
    try {
        observer(cur.next, cur.attach);
        completeCb && cur.complete(completeCb);
    }
    catch (_a) {
        //
    }
    return [cur.subscribe, cur.unsubscribe];
};

/**
 * 将tearDownGroup 注册到 destroyAgent，destroyAgent会在实例销毁时自动销毁tearDownGroup
 */
var registerTearDownGroup = function (client, pluginName, evType, tearDownGroup) {
    return client.destroyAgent.set(pluginName, evType, tearDownGroup);
};

/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
function initSubjectInGlobal(client, args) {
    return client.initSubject(args);
}

var now = function () { return Date.now(); };

function getDefaultBrowser() {
    if (typeof window === 'object' && isObject(window))
        return window;
}
function getDefaultDocument() {
    if (typeof document === 'object' && isObject(document))
        return document;
}
function getDefaultLocation() {
    return getDefaultBrowser() && window.location;
}
function getDefaultPerformanceObserver() {
    if (getDefaultBrowser() && isFunction(window.PerformanceObserver))
        return window.PerformanceObserver;
}

function getFullUrl(url) {
    var document = getDefaultDocument();
    if (!document || !url)
        return '';
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}
function getLocationUrl() {
    var location = getDefaultBrowser() && getDefaultLocation();
    return location ? location.href : '';
}

var getViewOverrides = function (config) {
    return {
        pid: config.pid,
        view_id: config.viewId,
        url: getLocationUrl(),
    };
};
var getOverrides = function (client) {
    var clientConfig = client.config();
    var overrides = getViewOverrides(clientConfig);
    overrides.context = client.context ? client.context.toString() : {};
    return overrides;
};
var reportWithCurrentContext = function (client, timeRequiresAdjustment) {
    if (timeRequiresAdjustment === void 0) { timeRequiresAdjustment = false; }
    var overrides = getOverrides(client);
    timeRequiresAdjustment && (overrides.timestamp = now());
    return function (ev) {
        client.report(__assign(__assign({}, ev), { overrides: overrides }));
    };
};

var getConfig = function (c, defaultConfig) {
    if (isObject(c)) {
        return __assign(__assign({}, defaultConfig), c);
    }
    else {
        return c ? defaultConfig : false;
    }
};

var XHR_SUBJECT_NAME = 'xhr_0';
var getReportPathRegExp = function () {
    var SELF_REPORT_PATH_REGEXP = new RegExp('\\/monitor_web\\/collect|\\/monitor_browser\\/collect\\/batch', 'i');
    return function (url) { return SELF_REPORT_PATH_REGEXP.test(url); };
};
var hookOpen = function (open) {
    return function () {
        var _a;
        var openOptions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            openOptions[_i] = arguments[_i];
        }
        _a = __read(openOptions, 2), this._method = _a[0], this._url = _a[1];
        return open.apply(this, openOptions);
    };
};
var hookSetHeader = function (setRequestHeader) {
    return function () {
        var setOptions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            setOptions[_i] = arguments[_i];
        }
        this._reqHeaders = this._reqHeaders || {};
        var _a = __read(setOptions, 2), name = _a[0], value = _a[1];
        this._reqHeaders[name] = value;
        return setRequestHeader && setRequestHeader.apply(this, setOptions);
    };
};
var hookOnreadystatechange = function (xhr, endNext) {
    return hookMethodDangerously(xhr, 'onreadystatechange', function (origin) {
        return function () {
            var ev = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                ev[_i] = arguments[_i];
            }
            // @ts-expect-error
            this.readyState === 4 && endNext(xhr);
            return origin && origin.apply(this, ev);
        };
    });
};
var hookSend = function (send, next) {
    var hitReportPath = getReportPathRegExp();
    return function () {
        var sendOptions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sendOptions[_i] = arguments[_i];
        }
        this._start = now();
        this._data = sendOptions === null || sendOptions === void 0 ? void 0 : sendOptions[0];
        // not trigger the xhr subject if hit the report path
        if (!hitReportPath(this._url)) {
            var endNext = next([this._method, this._url, this._start, this]);
            hookOnreadystatechange(this, endNext)();
        }
        return send.apply(this, sendOptions);
    };
};
var applyXHR = function (xhr) {
    return function (next, tearDown) {
        if (!xhr)
            return;
        var tearDownGroup = [];
        tearDownGroup.push(hookMethodDangerously(xhr, 'open', hookOpen)());
        tearDownGroup.push(hookMethodDangerously(xhr, 'setRequestHeader', hookSetHeader)());
        tearDownGroup.push(hookMethodDangerously(xhr, 'send', hookSend)(next));
        tearDown(function () {
            tearDownGroup.forEach(function (e) { return e(); });
        });
    };
};

var RESOURCE_TYPE = ['resource']; // used by resourceMonitor / resourceErrorMonitor / HttpMonitor
var applyPerformanceObserver = function (PerformanceObserver, callback, onFail) {
    var observer = PerformanceObserver &&
        new PerformanceObserver(function (list, ob) {
            if (list.getEntries) {
                list.getEntries().forEach(function (val, i, arr) { return callback(val, i, arr, ob); });
            }
            else {
                onFail && onFail();
            }
        });
    var observe = function (types) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ entryTypes: types });
        }
        catch (_a) {
            return onFail && onFail();
        }
    };
    var bufferedObserver = function (type, durationThreshold) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            var options = { type: type, buffered: true };
            !isUndefined(durationThreshold) && (options.durationThreshold = durationThreshold);
            observer.observe(options);
        }
        catch (_a) {
            return onFail && onFail();
        }
        observer.observe({ type: type, buffered: false });
    };
    var disconnect = function () { return observer && observer.disconnect(); };
    return [observe, bufferedObserver, disconnect];
};
var observePerf = function (Ob, pipe, types) {
    var _a = __read(applyPerformanceObserver(Ob, pipe), 3), observe = _a[0], disconnect = _a[2];
    observe(types);
    return disconnect;
};
var RESOURCE_SUBJECT_NAME = 'resource_0';
var observeResource = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    var hitReportPath = getReportPathRegExp();
    tearDown(observePerf(PerformanceObserver, function (entry) {
        !hitReportPath(entry.name) && next(entry);
    }, RESOURCE_TYPE));
};
var resourceSubject = [RESOURCE_SUBJECT_NAME, observeResource];

var HTTP_EV_TYPE = 'http';

var VERSION = '03';
var SAMPLED = '01';
var TRACEPARENT = 'traceparent';
var DEFAULT_TRACE_CONFIG = {
    sampleRate: 1,
    origins: [],
};
var uuid4 = function () {
    var crypto = window && (window.crypto || window.msCrypto);
    if (crypto !== void 0 && crypto.getRandomValues) {
        var arr = new Uint16Array(8);
        crypto.getRandomValues(arr);
        var pad = function (num) {
            var v = num.toString(16);
            while (v.length < 4) {
                v = "0" + v;
            }
            return v;
        };
        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
    }
    return 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {
        var r = (Math.random() * 16) | 0;
        return r.toString(16);
    });
};
var setTraceContext = function (traceConfig) {
    var config = getConfig(traceConfig, DEFAULT_TRACE_CONFIG);
    if (!config)
        return;
    var sampled = isHitBySampleRate(config.sampleRate);
    if (!sampled)
        return;
    return function (url, cb) {
        var origins = config.origins;
        if (origins.length && checkIfHit(origins, url)) {
            cb(TRACEPARENT, VERSION + "-" + uuid4() + "-" + uuid4().substring(16) + "-" + SAMPLED);
        }
    };
};

var headerKeyRe = new RegExp('(cookie|auth|jwt|token|key|ticket|secret|credential|session|password)', 'i');
var headerValueRe = new RegExp('(bearer|session)', 'i');
var isSensitiveHeader = function (key, value) {
    if (!key || !value)
        return true;
    return headerKeyRe.test(key) || headerValueRe.test(value);
};
/**
 * Handles the full URL and payload with optional URL extraction.
 *
 * @param {string} fullUrl - The full URL to handle.
 * @param {HttpPayload} payload - The payload object to handle. Will be mutated in function inside.
 * @param {function} extractUrl - (Optional) A function to extract the URL from the full URL.
 */
var handleWithExtractUrl = function (payload, extractUrl) {
    try {
        if (extractUrl) {
            var original_url = payload.request.url;
            payload.request.url = extractUrl(original_url);
            payload.extra = __assign(__assign({}, payload.extra), { original_url: original_url });
            // Since PerformanceResourceTiming.toJSON only works for >= Chrome V45,
            // back-end will assign payload.response.timing.name to payload.request.url after data reported
        }
    }
    catch (_e) {
        // do nothing
    }
};

var httpGetterWithXhrObserver = function (tearDownGroup, _a, xhrConfig) {
    var _b = __read(_a, 2), xhrObserver = _b[0], getResourceObserver = _b[1];
    var setTraceHeader = xhrConfig.setTraceHeader, ignoreUrls = xhrConfig.ignoreUrls, setContextAtReq = xhrConfig.setContextAtReq, extractUrl = xhrConfig.extractUrl;
    tearDownGroup.push(xhrObserver[0](function (_a) {
        var _b = __read(_a, 4); _b[0]; var _url = _b[1]; _b[2]; var xhr = _b[3];
        if (!_url)
            return noop;
        var fullUrl = getFullUrl(_url);
        if (checkIfHit(ignoreUrls, fullUrl))
            return noop;
        setTraceHeader && setTraceHeader(fullUrl, function (key, value) { return xhr.setRequestHeader(key, value); });
        var reportWithContext = setContextAtReq();
        var timing = undefined;
        var resourceTearDown = getResourceObserver()[0](function (entry) {
            fullUrl === entry.name && !timing && (timing = entry);
        });
        return function (xhrAfterReady) {
            var payload = getEventParams(xhrAfterReady, xhrConfig);
            setTimeout(function () {
                timing && (payload.response.timing = timing);
                handleWithExtractUrl(payload, extractUrl);
                reportWithContext && reportWithContext({ ev_type: HTTP_EV_TYPE, payload: payload });
                resourceTearDown();
            }, 100);
        };
    }));
};
function formatXHRAllResponseHeaders(headers) {
    if (isString(headers) && headers) {
        return headers.split('\r\n').reduce(function (result, line) {
            if (isString(line)) {
                var _a = __read(line.split(': '), 2), name_1 = _a[0], value = _a[1];
                !isSensitiveHeader(name_1, value) && (result[name_1.toLowerCase()] = value);
            }
            return result;
        }, {});
    }
    return {};
}
function formatRequestHeaders(headers) {
    return Object.keys(headers).reduce(function (result, name) {
        !isSensitiveHeader(name, headers[name]) && (result[name.toLowerCase()] = headers[name]);
        return result;
    }, {});
}
var getEventParams = function (xhr, props) {
    var _method = xhr._method, _reqHeaders = xhr._reqHeaders, _url = xhr._url, _start = xhr._start, _data = xhr._data;
    var fullUrl = getFullUrl(_url);
    var params = {
        api: 'xhr',
        request: {
            url: fullUrl,
            method: (_method || '').toLowerCase(),
            headers: _reqHeaders && formatRequestHeaders(_reqHeaders),
            timestamp: _start,
        },
        response: {
            status: xhr.status || 0,
            is_custom_error: false,
            timestamp: now(),
        },
        duration: now() - _start,
    };
    if (typeof xhr.getAllResponseHeaders === 'function') {
        params.response.headers = formatXHRAllResponseHeaders(xhr.getAllResponseHeaders());
    }
    var status = params.response.status;
    var collectBodyOnError = props.collectBodyOnError, extraExtractor = props.extraExtractor;
    try {
        var extra = extraExtractor === null || extraExtractor === void 0 ? void 0 : extraExtractor(xhr.response, params, _data);
        extra && (params.extra = extra);
        extra && (params.response.is_custom_error = true);
        // 非 2xx , 3xx 请求，上传request body
        if (collectBodyOnError && (extra || status >= 400)) {
            params.request.body = _data ? "" + _data : undefined;
            params.response.body = xhr.response ? "" + xhr.response : undefined;
        }
    }
    catch (_o) {
        // do nothing
    }
    return params;
};

var AJAX_MONITOR_PLUGIN_NAME = 'ajax';
var defaultConfig = {
    autoWrap: true,
    setContextAtReq: function () { return id; },
    ignoreUrls: [],
    collectBodyOnError: false,
};
function AjaxMonitorBasePlugin(client, c) {
    var config = getConfig(c, defaultConfig);
    if (!config) {
        return;
    }
    var tearDownGroup = [];
    var xhrConfig = __assign(__assign({}, config), { setContextAtReq: function () { return reportWithCurrentContext(client, true); }, setTraceHeader: setTraceContext(config.trace) });
    var getResourceSubject = function () { return initSubjectInGlobal(client, resourceSubject); };
    xhrConfig.autoWrap &&
        httpGetterWithXhrObserver(tearDownGroup, [
            initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
            getResourceSubject,
        ], xhrConfig);
    registerTearDownGroup(client, AJAX_MONITOR_PLUGIN_NAME, HTTP_EV_TYPE, tearDownGroup);
    client.provide('wrapXhr', function (Xhr) {
        function Ctor() {
            var xhr = new Xhr();
            httpGetterWithXhrObserver(tearDownGroup, [createSafeObserver(applyXHR(xhr)), getResourceSubject], xhrConfig);
            return xhr;
        }
        Ctor.prototype = new Xhr();
        ['DONE', 'HEADERS_RECIEVED', 'LOADING', 'OPENED', 'UNSENT'].forEach(function (key) {
            Ctor[key] = Xhr[key];
        });
        return Ctor;
    });
}

var AJAX_INTEGRATION_NAME = AJAX_MONITOR_PLUGIN_NAME;
var ajaxPlugin = function (config) {
    if (config === void 0) { config = {}; }
    return ({
        name: AJAX_INTEGRATION_NAME,
        setup: function (client) {
            AjaxMonitorBasePlugin(client, config);
        },
    });
};

exports.AJAX_INTEGRATION_NAME = AJAX_INTEGRATION_NAME;
exports.ajaxPlugin = ajaxPlugin;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/dist/ajax.js.map
