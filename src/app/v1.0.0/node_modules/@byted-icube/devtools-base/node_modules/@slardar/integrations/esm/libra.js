import { __assign } from "tslib";
import { hookObjectProperty } from '@slardar/sdk-template';
var DEFAULT_PREFIX = 'libra_';
var DEFAULT_CAPACITY = 30;
export var LIBRA_INTEGRATION_NAME = 'libra';
var defaultLibraOptions = {
    prefix: DEFAULT_PREFIX,
    isHook: true,
    isPause: true,
    capacity: DEFAULT_CAPACITY,
    isResume: true,
};
// dependent on pause integration
export var libra = function (tea, options) {
    var restoreFns = [];
    return {
        name: LIBRA_INTEGRATION_NAME,
        setup: function (client) {
            var _a = __assign(__assign({}, defaultLibraOptions), options), prefix = _a.prefix, isHook = _a.isHook, isPause = _a.isPause, capacity = _a.capacity, isResume = _a.isResume;
            if (isPause && !client.pause)
                return;
            // hook tea getVar, when user invoke it, we will add its test.
            if (isHook && tea.getVar) {
                restoreFns.push(hookObjectProperty(tea, 'getVar', function (origin) {
                    return function (name, defaultValue, callback) {
                        try {
                            addTest(name);
                            // eslint-disable-next-line no-empty
                        }
                        catch (error) { }
                        origin.apply(tea, [name, defaultValue, callback]);
                    };
                })());
            }
            // invoke tea.getAllVars to get the vid of ab test
            function _waitTeaValues(cb) {
                var _a, _b;
                // pause client utils getAllVars invoke callback to avoid sending event with out-of-date context.
                isPause && ((_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction({ capacity: capacity, isResume: isResume }));
                //  make sure getAllVars invoke before any getVar in the new page
                (_b = tea.getAllVars) === null || _b === void 0 ? void 0 : _b.call(tea, function (values) {
                    var _a;
                    cb(values);
                    // resume client
                    isPause && ((_a = client.pause) === null || _a === void 0 ? void 0 : _a.startAction());
                });
            }
            function _getKey(testName) {
                return prefix + testName;
            }
            function addTest(testName) {
                _waitTeaValues(function (testValues) {
                    var _a;
                    if (!testValues[testName] || !testValues[testName].vid) {
                        return;
                    }
                    // context plugin is loaded synchronously
                    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set(_getKey(testName), testValues[testName].vid);
                });
            }
            function removeTest(testName) {
                var _a;
                (_a = client.context) === null || _a === void 0 ? void 0 : _a.delete(_getKey(testName));
            }
            function getAllTests() {
                if (client.context) {
                    return Object.keys(client.context.toString())
                        .filter(function (key) { return key.startsWith(prefix); })
                        .map(function (key) { return key.substring(prefix.length); });
                }
            }
            function clearTest() {
                if (client.context) {
                    Object.keys(client.context.toString()).forEach(function (key) {
                        var _a;
                        if (key.startsWith(prefix)) {
                            (_a = client.context) === null || _a === void 0 ? void 0 : _a.delete(key);
                        }
                    });
                }
            }
            client.on('init', function () {
                client.provide(LIBRA_INTEGRATION_NAME, { addTest: addTest, removeTest: removeTest, getAllTests: getAllTests, clearTest: clearTest });
            });
            restoreFns.push(clearTest);
        },
        tearDown: function () { return restoreFns.forEach(function (fn) { return fn(); }); },
    };
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/esm/libra.js.map