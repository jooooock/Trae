import { __assign, __values } from "tslib";
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { isObject } from '@slardar/sdk-template';
import { DEFAULT_SAMPLE_GRANULARITY } from './constants';
export function normalizeStrictFields(config) {
    var e_1, _a;
    var strictFields = ['userId', 'deviceId', 'sessionId', 'env'];
    try {
        for (var strictFields_1 = __values(strictFields), strictFields_1_1 = strictFields_1.next(); !strictFields_1_1.done; strictFields_1_1 = strictFields_1.next()) {
            var k = strictFields_1_1.value;
            if (!config[k]) {
                delete config[k];
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (strictFields_1_1 && !strictFields_1_1.done && (_a = strictFields_1.return)) _a.call(strictFields_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return config;
}
export function normalizeInitConfig(config) {
    var plugins = config.plugins || {};
    for (var k in plugins) {
        if (plugins[k] && !isObject(plugins[k])) {
            plugins[k] = {};
        }
    }
    return normalizeStrictFields(__assign(__assign({}, config), { plugins: plugins }));
}
export function validateInitConfig(config) {
    return isObject(config) && 'bid' in config;
}
export function normalizeUserConfig(config) {
    return normalizeStrictFields(__assign({}, config));
}
export function parseServerConfig(serverConfig) {
    var _a;
    if (!serverConfig) {
        return {};
    }
    var sample = serverConfig.sample, plugins = serverConfig.plugins, timestamp = serverConfig.timestamp, _b = serverConfig.quota_rate, quota_rate = _b === void 0 ? 1 : _b, apdex = serverConfig.apdex;
    if (!sample) {
        return {};
    }
    var sample_rate = sample.sample_rate, _c = sample.sample_granularity, sample_granularity = _c === void 0 ? DEFAULT_SAMPLE_GRANULARITY : _c, include_users = sample.include_users, _d = sample.rules, rules = _d === void 0 ? [] : _d;
    return {
        sample: {
            include_users: include_users,
            sample_rate: sample_rate * quota_rate,
            sample_granularity: sample_granularity,
            rules: rules.reduce(function (prev, cur) {
                var name = cur.name, enable = cur.enable, sample_rate = cur.sample_rate, conditional_sample_rules = cur.conditional_sample_rules;
                prev[name] = {
                    enable: enable,
                    sample_rate: sample_rate,
                    conditional_sample_rules: conditional_sample_rules,
                };
                return prev;
            }, {}),
        },
        plugins: {
            heatmap: (_a = plugins === null || plugins === void 0 ? void 0 : plugins.heatmap) !== null && _a !== void 0 ? _a : false,
        },
        apdex: apdex,
        serverTimestamp: timestamp,
    };
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/normalize.js.map