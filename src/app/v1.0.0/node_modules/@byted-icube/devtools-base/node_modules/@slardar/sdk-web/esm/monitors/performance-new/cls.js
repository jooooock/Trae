import { __read } from "tslib";
import { observePerfWithBuffer } from '../../collector/perf';
import { getDefaultPerformanceObserver, htmlTreeAsString } from '../../utils';
import { initMetric } from '../performance/util';
import { applyReportMetric, getWorstElement } from './util';
export var LS_ENTRY_NAME = 'layout-shift';
export var CLS_METRIC_NAME = "cls" /* cls */;
export var applyHandleEntries = function () {
    var sessionValue = 0;
    var sessionTimes = [];
    var worstEntry = undefined;
    var resetSessionValue = function () {
        sessionValue = 0;
    };
    var handleEntriesWithMetric = function (callback, entry) {
        // Only count layout shifts without recent user input.
        if (!entry.hadRecentInput) {
            var firstSessionTime = sessionTimes[0];
            var lastSessionTime = sessionTimes[sessionTimes.length - 1];
            if (sessionValue && entry.startTime - lastSessionTime < 1000 && entry.startTime - firstSessionTime < 5000) {
                sessionValue += entry.value;
                sessionTimes.push(entry.startTime);
                worstEntry = entry.value > worstEntry.value ? entry : worstEntry;
            }
            else {
                sessionValue = entry.value;
                sessionTimes = [entry.startTime];
                worstEntry = entry;
            }
            callback(sessionValue, worstEntry);
        }
    };
    return [resetSessionValue, handleEntriesWithMetric];
};
var getCLS = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 4), getHiddenObserver = _b[1], getUnloadObserver = _b[2], getPVObserver = _b[3];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var metric = initMetric(CLS_METRIC_NAME, 0);
    var reportMetric = applyReportMetric(report);
    if (!PerformanceObserver) {
        metric.isSupport = false;
        reportMetric(metric);
        return;
    }
    var _c = __read(applyHandleEntries(), 2), resetSessionValue = _c[0], handleEntriesWithMetric = _c[1];
    var handleEntries = handleEntriesWithMetric.bind(null, function (sessionValue, worstEntry) {
        if (sessionValue > metric.value) {
            metric.value = sessionValue;
            try {
                var element = getWorstElement(worstEntry);
                metric.extra = element
                    ? {
                        element: htmlTreeAsString(element),
                    }
                    : undefined;
            }
            catch (error) {
                // do nothing
            }
        }
    });
    tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, handleEntries, LS_ENTRY_NAME));
    var hiddenObserver = getHiddenObserver();
    tearDownGroup.push(hiddenObserver[0](function (isHidden) {
        isHidden && resetSessionValue();
    }));
    var pvObserver = getPVObserver();
    tearDownGroup.push(pvObserver[0](function (overrides) {
        reportMetric(metric, overrides);
        resetSessionValue();
        metric = initMetric(CLS_METRIC_NAME, 0);
    }));
    var unloadObserver = getUnloadObserver();
    tearDownGroup.push(unloadObserver[0](function () {
        reportMetric(metric);
    }));
};
export var CLS = [CLS_METRIC_NAME, getCLS];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/sdk-web/esm/monitors/performance-new/cls.js.map