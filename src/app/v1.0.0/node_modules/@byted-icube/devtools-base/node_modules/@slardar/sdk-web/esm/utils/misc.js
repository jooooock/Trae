import { __assign, __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-optional-chain */
import { isObject, noop } from '@slardar/sdk-template';
import { getDefaultBrowser, getDefaultDocument } from './defaults';
export var addListenerToWindow = function (w, type, listener, options) {
    if (options === void 0) { options = false; }
    w.addEventListener(type, listener, options);
    return function () {
        w.removeEventListener(type, listener, options);
    };
};
export var addListenerToDocument = function (d, type, listener, options) {
    if (options === void 0) { options = false; }
    d.addEventListener(type, listener, options);
    return function () {
        d.removeEventListener(type, listener, options);
    };
};
export function clearTimerWithTearDowns(timer, tearDowns) {
    timer && tearDowns.push(function () { return clearTimeout(timer); });
}
export function onPageLoad(callback) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    if (document.readyState === 'complete') {
        callback();
        return;
    }
    addListenerToWindow(window, 'load', function () {
        setTimeout(function () {
            callback();
        }, 0);
    }, false);
}
export var invokeCallbackOnce = function (cb) {
    var hasInvoked = false;
    var invoke = function (params) {
        if (hasInvoked)
            return;
        hasInvoked = true;
        cb && cb(params);
    };
    return [invoke];
};
export var onPageUnload = function (cb) {
    var window = getDefaultBrowser();
    if (!window)
        return;
    var _a = __read(invokeCallbackOnce(cb), 1), invokeCbOnce = _a[0];
    ['unload', 'beforeunload', 'pagehide'].forEach(function (ev) {
        addListenerToWindow(window, ev, invokeCbOnce, false);
    });
};
export var onPageNextShow = function (cb) {
    var document = getDefaultDocument();
    var window = getDefaultBrowser();
    if (!document || !window)
        return;
    var removeListener = noop;
    var onVisibilityChange = function () {
        if (document.visibilityState === 'visible') {
            cb();
            removeListener();
        }
    };
    removeListener = addListenerToDocument(document, 'visibilitychange', onVisibilityChange, true);
};
export var loadScript = function (url, callback) {
    var _a;
    /* istanbul ignore next */
    var document = getDefaultDocument();
    // untestable for now
    /* istanbul ignore next */
    if (document) {
        var script = document.createElement('script');
        script.src = url;
        script.crossOrigin = 'anonymous';
        script.onload = callback;
        (_a = document.head) === null || _a === void 0 ? void 0 : _a.appendChild(script);
    }
};
export var getConfig = function (c, defaultConfig) {
    if (isObject(c)) {
        return __assign(__assign({}, defaultConfig), c);
    }
    else {
        return c ? defaultConfig : false;
    }
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/sdk-web/esm/utils/misc.js.map