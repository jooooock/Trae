import { __assign } from "tslib";
import { createBaseConfigManager, createClient, directBuilder, id, noopSender, noop, ContextPlugin, } from '@slardar/sdk-template';
import { now } from '@slardar/sdk-web';
export var createTestClient = function (send) {
    return createClient({
        builder: {
            build: function (ev) {
                var ev_type = ev.ev_type, payload = ev.payload, extra = ev.extra;
                var _a = extra || {}, _b = _a.bid, bid = _b === void 0 ? '' : _b, _d = _a.url, url = _d === void 0 ? '' : _d;
                return {
                    ev_type: ev_type,
                    payload: payload,
                    common: {
                        bid: bid,
                        url: url,
                    },
                };
            },
        },
        createSender: function () { return ({
            send: send,
        }); },
        createDefaultConfig: function (_c) { return ({ bid: '', url: '' }); },
        userConfigNormalizer: id,
        initConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
        validateInitConfig: function (_c) { return true; },
    });
};
export var browserBuilder = {
    build: function (e) {
        return {
            ev_type: e.ev_type,
            payload: e.payload,
            common: __assign(__assign({}, (e.extra || {})), (e.overrides || {})),
        };
    },
};
export var createTestWebClient = function (_a) {
    var _b = _a === void 0 ? {
        transport: {
            post: noop,
            get: noop,
        },
    } : _a, transport = _b.transport, _d = _b.createSender, createSender = _d === void 0 ? noopSender : _d, _e = _b.builder, builder = _e === void 0 ? directBuilder : _e;
    var client = createClient({
        builder: builder,
        createSender: createSender,
        createDefaultConfig: function () { return ({
            pid: '',
            viewId: '_' + now(),
            userId: '',
            deviceId: '',
            sessionId: '',
            plugins: {},
            sample: {
                sample_rate: 1,
                sample_granularity: 'session',
                include_users: [],
                rules: {},
            },
            transport: transport,
        }); },
        userConfigNormalizer: id,
        initConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
        validateInitConfig: function () { return true; },
    });
    ContextPlugin(client);
    return client;
};
export function sleep(wait) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            resolve();
        }, wait);
    });
}
export var proxyLocalStorage = function () {
    var localStorageMock = (function () {
        var store = {};
        return {
            getItem: function (key) {
                return store[key];
            },
            setItem: function (key, value) {
                store[key] = value.toString();
            },
            clear: function () {
                store = {};
            },
            removeItem: function (key) {
                delete store[key];
            },
        };
    })();
    Object.defineProperty(global, 'localStorage', { value: localStorageMock });
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/esm/__test__/common.js.map