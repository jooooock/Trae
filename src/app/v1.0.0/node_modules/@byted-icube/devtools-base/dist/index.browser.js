"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBaseClient = void 0;
const base_1 = require("./base");
const index_browser_1 = require("./i18n/index.browser");
const index_browser_2 = require("./logger/index.browser");
const ILogger_1 = require("./logger/ILogger");
const index_browser_3 = require("./slardar/index.browser");
const index_1 = require("./request/index");
const reporter_1 = require("./slardar/reporter");
const index_browser_4 = require("./tea/index.browser");
const init_1 = require("./init");
const context_1 = require("./slardar/context");
const region_1 = require("./common/region");
// import { SPALoadPlugin } from '@slardar/integrations/dist/spaLoad';
__exportStar(require("./request/index.browser"), exports);
__exportStar(require("./logger/index.browser"), exports);
__exportStar(require("./logger/ILogger"), exports);
__exportStar(require("./slardar/index.browser"), exports);
__exportStar(require("./tea/index.browser"), exports);
// export * from './auth/index';
__exportStar(require("./i18n/index.browser"), exports);
__exportStar(require("./types/index"), exports);
__exportStar(require("./common/region"), exports);
__exportStar(require("./slardar/reporter"), exports);
function initBaseClient(options) {
    const { name, pageId, slardarBid, i18nOptions, globalTags = {}, isDesktop, getContext } = options;
    const region = (0, region_1.getRegion)(window.env || {});
    const slardarConfig = {
        pid: pageId,
    };
    if (slardarBid) {
        slardarConfig.bid = slardarBid;
    }
    const slardar = (0, index_browser_3.createDefaultSlardarClient)({
        ...slardarConfig,
        // @ts-ignore
        plugins: {
            // 关闭默认的 PV ，改为主动上报
            pageview: false,
        },
    }, {
        ...globalTags,
        session_id: window.env?.SESSION_ID || '',
        runtime: 'web',
    }, region, isDesktop);
    const logger = (0, index_browser_2.createLogger)({
        name,
        slardar,
        context: {
            sessionId: window.env?.SESSION_ID || '',
            runtime: 'web',
        },
    });
    const tea = (0, index_browser_4.createDefaultTeaClient)({ region, isDesktop });
    const request = (0, index_1.createDefaultRequestInstance)({});
    const defaultContext = (0, index_browser_3.getDefaultContext)();
    if (!window.navigator.userAgent.includes('Electron')) {
        tea.config({ custom: { ...defaultContext, ...globalTags } });
    }
    (0, init_1.initGlobalContext)({ tea, slardar, getContext });
    const isDev = (0, context_1.getIsDev)(window.env || {});
    const reporter = new reporter_1.Reporter(slardar, isDev, pageId);
    const i18n = (0, index_browser_1.createI18nTranslator)(i18nOptions || {});
    window.addEventListener('error', errorEvent => {
        const { error, filename, lineno, colno, message } = errorEvent;
        if (error instanceof Error) {
            reporter.captureException(error);
        }
        else {
            reporter.captureException(new Error(`uncaughtException: ${JSON.stringify({ error, filename, lineno, colno, message })}`));
        }
    });
    window.addEventListener('unhandledrejection', errorEvent => {
        if (errorEvent?.reason instanceof Error) {
            reporter.captureException(errorEvent?.reason);
        }
    });
    slardar.on('beforeSend', function (ev) {
        if (ev.ev_type === 'performance') {
            logger
                .getLogger(ILogger_1.LoggerType.Slardar)
                .info('[perfermance]', ev.payload.name, ': ', ev.payload.value, 'ms');
        }
        return ev;
    });
    if (window.performance) {
        const entries = window.performance.getEntriesByType('resource');
        entries.forEach(entry => {
            logger.getLogger(ILogger_1.LoggerType.Slardar).info('[perfermance]', 'load script', ': ', entry.duration, 'ms');
        });
    }
    window.__icube_devtool_logger__ = logger;
    const disposable = (0, base_1.toDisposable)(() => {
        reporter.dispose();
    });
    return { request, reporter, logger, tea, slardar, i18n, disposable };
}
exports.initBaseClient = initBaseClient;
