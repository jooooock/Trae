"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeaClient = exports.createDefaultTeaClient = exports.createTeaClient = void 0;
const byted_tea_sdk_1 = require("byted-tea-sdk");
const constants_1 = require("../constants");
const types_1 = require("../types");
const context_1 = require("../slardar/context");
const utils_1 = require("../common/utils");
function createTeaClient(options) {
    const collector = new byted_tea_sdk_1.Collector(options.collectorId || String(options.app_id));
    collector.init(options);
    if (!options.defer) {
        collector.start();
    }
    const tea = new TeaClient(collector);
    return tea;
}
exports.createTeaClient = createTeaClient;
function createDefaultTeaClient(options) {
    const { region = (0, utils_1.getDefaultRegion)(), tenant, isDesktop = window.navigator.userAgent.includes('Electron') } = options || {};
    if (isDesktop) {
        const tea = createTeaClient({
            app_id: region === types_1.Region.CN ? constants_1.TEA_ELECTRON_APP_ID : constants_1.TEA_OVERSEA_ELECTRON_APP_ID,
            channel: 'cn',
            log: true,
            disable_auto_pv: true,
            enable_ttwebid: true,
            enable_cookie: true,
            ...options,
        });
        return tea;
    }
    else {
        const { appId, channel, channelDomain, serviceOrigin } = (0, utils_1.getTeaConfig)({
            region,
            tenant,
        });
        const tea = createTeaClient({
            app_id: appId,
            channel,
            log: true,
            abServiceOrigin: serviceOrigin,
            enable_ab_test: true,
            ab_channel_domain: channelDomain,
            disable_auto_pv: true,
            enable_ttwebid: true,
            enable_cookie: true,
            cross_subdomain: true,
            ...options,
        });
        if (window.env) {
            tea.config({
                user: {
                    user_unique_id: (0, context_1.getUserId)(window.env || {}),
                    user_is_login: true,
                },
                header: {
                    app_id: appId,
                    region: (0, context_1.getVRegion)(window.env || {}),
                },
                custom: {
                    env: (0, context_1.getEnv)(window.env || {}),
                    user_id: (0, context_1.getUserId)(window.env || {}),
                    isA0: (0, context_1.getIsA0)(window.env || {}),
                },
            });
        }
        else {
            tea.config({
                header: {
                    app_id: appId,
                    region: (0, context_1.getVRegionByRegion)(region),
                },
            });
        }
        return tea;
    }
}
exports.createDefaultTeaClient = createDefaultTeaClient;
class TeaClient {
    _tea;
    constructor(tea) {
        this._tea = tea;
    }
    config(options) {
        this._tea.config({
            ...(options.user || {}),
            ...(options.header || {}),
            ...(options.custom || {}),
            web_id: options.user?.web_id ? String(options.user.web_id) : undefined,
        });
    }
    collect(action, params) {
        if (Array.isArray(action)) {
            action.forEach(({ name, params }) => this._tea.event(name, params));
        }
        if (typeof action === 'string') {
            this._tea.event(action, params);
        }
    }
    predefinePageView(params) {
        this._tea.predefinePageView(params);
    }
    getVar(name, options) {
        return new Promise(resolve => {
            this._tea.getVar(String(name), options?.defaultValue, value => {
                resolve(value);
            });
        });
    }
    getAllVars(_options) {
        return new Promise(resolve => {
            this._tea.getAllVars(value => {
                resolve(value);
            });
        });
    }
    getSDK() {
        return this._tea;
    }
}
exports.TeaClient = TeaClient;
