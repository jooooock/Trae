"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MutipleLogger = void 0;
const BaseLogger_1 = require("./BaseLogger");
const ILogger_1 = require("./ILogger");
class MutipleLogger extends BaseLogger_1.BaseLogger {
    _loggers;
    type = ILogger_1.LoggerType.Mutiple;
    constructor(context, loggers) {
        super(context);
        this._loggers = loggers;
    }
    _log(level, msg, ...args) {
        this._loggers.forEach(logger => logger.log(level, msg, ...args));
    }
    withContext(context) {
        return new MutipleLogger({
            ...this.ctx,
            ...context,
        }, this._loggers.map(logger => logger.withContext(context)));
    }
    getLogger(type) {
        switch (type) {
            case ILogger_1.LoggerType.Console:
                return new MutipleLogger(this.ctx, this._loggers.filter(logger => logger.type === ILogger_1.LoggerType.Console));
            case ILogger_1.LoggerType.Slardar:
                return new MutipleLogger(this.ctx, this._loggers.filter(logger => logger.type === ILogger_1.LoggerType.Slardar));
            case ILogger_1.LoggerType.Output:
                return new MutipleLogger(this.ctx, this._loggers.filter(logger => logger.type === ILogger_1.LoggerType.Output));
            default:
                return this;
        }
    }
    setSlardarContext(ctx) {
        const slardarLogger = this._loggers.filter(logger => logger.type === ILogger_1.LoggerType.Slardar);
        slardarLogger.forEach(logger => logger.setContext(ctx));
    }
}
exports.MutipleLogger = MutipleLogger;
