"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeaClient = exports.createDefaultTeaClient = exports.createTeaClient = void 0;
const tea_sdk_node_1 = require("@dp/tea-sdk-node");
const node_plugin_http_1 = require("@logsdk/node-plugin-http");
const types_1 = require("../types");
const context_1 = require("../slardar/context");
const utils_1 = require("../common/utils");
const constants_1 = require("../constants");
function createTeaClient(options) {
    const tea = new tea_sdk_node_1.TeaSDK(options);
    const httpPluginInstance = (0, node_plugin_http_1.httpPlugin)(options);
    tea.use(httpPluginInstance);
    return new TeaClient(tea, httpPluginInstance);
}
exports.createTeaClient = createTeaClient;
function createDefaultTeaClient(options) {
    const { region = (0, utils_1.getDefaultRegion)(), tenant, isDesktop = process.env.VSCODE_RUN_IN_ELECTRON } = options || {};
    if (isDesktop) {
        const tea = createTeaClient({
            app_id: region === types_1.Region.CN ? constants_1.TEA_ELECTRON_APP_ID : constants_1.TEA_OVERSEA_ELECTRON_APP_ID,
            logLevel: 'verbose',
            channel: 'cn',
            retry: 5,
            disable_auto_pv: true,
            enable_ttwebid: true,
            ...options,
        });
        return tea;
    }
    else {
        const { appId, channel, channelDomain, serviceOrigin } = (0, utils_1.getTeaConfig)({
            region,
            tenant,
        });
        const tea = createTeaClient({
            app_id: appId,
            logLevel: 'verbose',
            channel,
            retry: 5,
            abServiceOrigin: serviceOrigin,
            enable_ab_test: true,
            ab_channel_domain: channelDomain,
            disable_auto_pv: true,
            enable_ttwebid: true,
            cross_subdomain: true,
            ...options,
        });
        if (process.env) {
            tea.config({
                user: {
                    user_unique_id: (0, context_1.getUserId)(process.env || {}),
                    user_is_login: true,
                },
                header: {
                    app_id: appId,
                    region: (0, context_1.getVRegion)(process.env || {}),
                },
                custom: {
                    env: (0, context_1.getEnv)(process.env || {}),
                    user_id: (0, context_1.getUserId)(process.env || {}),
                    isA0: (0, context_1.getIsA0)(process.env || {}),
                },
            });
        }
        else {
            tea.config({
                header: {
                    app_id: appId,
                    region: (0, context_1.getVRegionByRegion)(region),
                },
            });
        }
        return tea;
    }
}
exports.createDefaultTeaClient = createDefaultTeaClient;
class TeaClient {
    _tea;
    _httpPluginInstance;
    constructor(tea, httpPluginInstance) {
        this._tea = tea;
        this._httpPluginInstance = httpPluginInstance;
    }
    collect(action, params) {
        if (Array.isArray(action)) {
            this._tea.collect(action);
        }
        if (typeof action === 'string') {
            this._tea.collect(action, params || {});
        }
    }
    predefinePageView(params) {
        this._tea.collect('predefinePageView', params);
    }
    config(options) {
        this._tea.config(options);
    }
    getVar(name, options) {
        return this._httpPluginInstance.getVar(name, options);
    }
    getAllVars(options) {
        return this._httpPluginInstance.getAllVars(options);
    }
    getSDK() {
        return this._tea;
    }
}
exports.TeaClient = TeaClient;
