"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultContext = exports.createDefaultSlardarClient = exports.createSlardarClient = void 0;
const base_1 = require("@slardar/base");
const maliva_1 = require("@slardar/base/maliva");
const sg_1 = require("@slardar/base/sg");
const transport_1 = require("./transport");
const types_1 = require("../types");
const context_1 = require("./context");
const utils_1 = require("../common/utils");
const constants_1 = require("../constants");
function createSlardarClient(initConfig, defaultContext, region = (0, utils_1.getDefaultRegion)(), isDesktop) {
    const createBaseClient = () => {
        switch (region) {
            case types_1.Region.CN:
                return (0, base_1.createBaseClient)();
            case types_1.Region.US:
                return (0, maliva_1.createBaseClient)();
            case types_1.Region.SG:
                return (0, sg_1.createBaseClient)();
            default:
                return (0, base_1.createBaseClient)();
        }
    };
    const slardarClient = createBaseClient();
    if (defaultContext) {
        for (const [key, value] of Object.entries(defaultContext)) {
            slardarClient.context?.set(key, value);
        }
    }
    const bid = (0, utils_1.getSlardarBid)({
        region,
    });
    slardarClient.init({
        bid: isDesktop ? (region === types_1.Region.CN ? constants_1.DEFAULT_ELECTRON_SLARDAR_BID : constants_1.DEFAULT_ELECTRON_OVERSEA_SLARDAR_BID) : bid,
        transport: new transport_1.SlardarTransport(),
        ...initConfig,
    });
    slardarClient.start();
    return slardarClient;
}
exports.createSlardarClient = createSlardarClient;
function createDefaultSlardarClient(initConfig, globalContext, region, isDesktop = Boolean(process.env.VSCODE_RUN_IN_ELECTRON)) {
    const { extension_version } = globalContext || {};
    const env = (0, utils_1.getEnviromentVariables)();
    return createSlardarClient({
        release: extension_version,
        env: (0, context_1.getEnv)(env),
        userId: (0, context_1.getUserId)(env),
        ...initConfig,
    }, {
        ...getDefaultContext(),
        ...globalContext,
    }, region, isDesktop);
}
exports.createDefaultSlardarClient = createDefaultSlardarClient;
function getDefaultContext() {
    const env = (0, utils_1.getEnviromentVariables)();
    return {
        ...(0, context_1.getDefaultContextFromEnv)(env),
        ide_environment_type: 'extension',
        region: (0, context_1.getVRegion)(env),
        isA0: (0, context_1.getIsA0)(env),
    };
}
exports.getDefaultContext = getDefaultContext;
