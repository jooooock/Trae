"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseExtensionPerformance = void 0;
const fs = __importStar(require("fs"));
const CLOUDIDE_WORKSPACEPATH = process.env.CLOUDIDE_WORKSPACEPATH || '/cloudide/workspace';
function parseExtensionPerformance(extensionName) {
    if (!fs.existsSync(`${CLOUDIDE_WORKSPACEPATH}/.icube/performance`)) {
        return null;
    }
    try {
        const data = fs.readFileSync(`${CLOUDIDE_WORKSPACEPATH}/.icube/performance`, 'utf-8');
        const performance = data.split('\n').map(d => d.split(' '));
        const startup = performance[0][performance[0].length - 1];
        const loadItem = performance.find(p => p.includes(extensionName) && p.includes('willLoadExtensionCode'));
        const load = loadItem ? loadItem[loadItem?.length - 1] : null;
        const activateItem = performance.find(p => p.includes(extensionName) && p.includes('willActivateExtension'));
        const activate = activateItem ? activateItem[activateItem?.length - 1] : null;
        const didDctivateItem = performance.find(p => p.includes(extensionName) && p.includes('didActivateExtension'));
        const didActivate = didDctivateItem ? didDctivateItem[didDctivateItem?.length - 1] : null;
        let loadWebview = null;
        for (let i = performance.length - 1; i >= 0; i--) {
            if (performance[i].includes('webviews:initElement') && performance[i].includes(extensionName)) {
                loadWebview = performance[i][performance[i].length - 1];
                break;
            }
        }
        if (loadWebview && didActivate && +loadWebview < +didActivate) {
            loadWebview = didActivate;
        }
        return {
            startup,
            load,
            activate,
            loadWebview,
        };
    }
    catch (err) {
        return null;
    }
}
exports.parseExtensionPerformance = parseExtensionPerformance;
