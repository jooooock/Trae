"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultContext = exports.createDefaultSlardarClient = exports.createSlardarClient = void 0;
const web_1 = __importStar(require("@slardar/web"));
// import slardarInUS, { createBrowserClient as createBrowserClientInUS } from '@slardar/web/maliva';
// import slardarInSG, { createBrowserClient as createBrowserClientInSG } from '@slardar/web/sg';
const constants_1 = require("../constants");
const types_1 = require("../types");
const context_1 = require("./context");
const utils_1 = require("../common/utils");
function createSlardarClient(initConfig, defaultContext, region = (0, utils_1.getDefaultRegion)(), isDesktop) {
    // const createBrowserClient = () => {
    //   switch (region) {
    //     case Region.CN:
    //       return createBrowserClientInCN();
    //     case Region.US:
    //       return createBrowserClientInUS();
    //     case Region.SG:
    //       return createBrowserClientInSG();
    //     default:
    //       return createBrowserClientInUS();
    //   }
    // };
    // const slardar = region === Region.CN ? slardarInCN : region === Region.US ? slardarInUS : slardarInSG;
    const slardarClient = web_1.default.create?.() || (0, web_1.createBrowserClient)();
    if (defaultContext) {
        for (const [key, value] of Object.entries(defaultContext)) {
            slardarClient.context?.set(key, value);
        }
    }
    // slardar 的 page view 默认会在 init 的时候打一次
    const bid = (0, utils_1.getSlardarBid)({
        region,
    });
    slardarClient.init({
        bid: isDesktop ? (region === types_1.Region.CN ? constants_1.DEFAULT_ELECTRON_SLARDAR_BID : constants_1.DEFAULT_ELECTRON_OVERSEA_SLARDAR_BID) : bid,
        ...initConfig,
    });
    slardarClient.start();
    return slardarClient;
}
exports.createSlardarClient = createSlardarClient;
function createDefaultSlardarClient(initConfig, globalContext, region, isDesktop = window.navigator.userAgent.includes('Electron')) {
    const { extension_version } = globalContext || {};
    const env = (0, utils_1.getEnviromentVariables)();
    return createSlardarClient({
        release: extension_version,
        env: (0, context_1.getEnv)(env),
        userId: (0, context_1.getUserId)(env),
        // @ts-ignore
        plugins: {},
        ...initConfig,
    }, {
        ...getDefaultContext(),
        ...globalContext,
    }, region, isDesktop);
}
exports.createDefaultSlardarClient = createDefaultSlardarClient;
function getDefaultContext() {
    const env = (0, utils_1.getEnviromentVariables)();
    return {
        ...(0, context_1.getDefaultContextFromEnv)(env),
        ide_environment_type: 'webview',
        region: (0, context_1.getVRegion)(env),
        isA0: (0, context_1.getIsA0)(env),
    };
}
exports.getDefaultContext = getDefaultContext;
