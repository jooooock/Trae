"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceClient = void 0;
const vscode = __importStar(require("vscode"));
class WorkspaceClient {
    projectInfo;
    logger;
    constructor(options) {
        this.logger = options?.logger;
        vscode.commands.executeCommand('icube.getProjectInfo').then(res => {
            this.projectInfo = res;
        });
    }
    getDefaultProjectInfo() {
        return vscode.icube.projectInfo;
    }
    async getProjectInfo(refresh) {
        if (!this.projectInfo || refresh) {
            const defaultProjectInfo = vscode.icube?.initInfo?.projectInfo;
            this.logger && this.logger.info('[Get Default Project Info]', JSON.stringify(defaultProjectInfo || {}));
            if (!defaultProjectInfo) {
                this.projectInfo = (await vscode.commands.executeCommand('icube.getProjectInfo'));
                return this.projectInfo;
            }
            return defaultProjectInfo;
        }
        return this.projectInfo;
    }
}
exports.WorkspaceClient = WorkspaceClient;
