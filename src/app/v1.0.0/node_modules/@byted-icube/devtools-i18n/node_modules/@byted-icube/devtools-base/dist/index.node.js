"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBaseClient = void 0;
const toString_1 = __importDefault(require("lodash/toString"));
const uuid_1 = require("uuid");
const base_1 = require("./base");
const index_1 = require("./i18n/index");
const index_node_1 = require("./logger/index.node");
const index_2 = require("./slardar/index");
const index_3 = require("./request/index");
const reporter_1 = require("./slardar/reporter");
const index_4 = require("./tea/index");
const context_1 = __importDefault(require("./common/context"));
const init_1 = require("./init");
const context_2 = require("./slardar/context");
const region_1 = require("./common/region");
__exportStar(require("./base"), exports);
__exportStar(require("./request/index"), exports);
__exportStar(require("./logger/index.node"), exports);
__exportStar(require("./logger/ILogger"), exports);
__exportStar(require("./slardar/index"), exports);
__exportStar(require("./tea/index"), exports);
// export * from './auth/index';
__exportStar(require("./i18n/index"), exports);
__exportStar(require("./types/index"), exports);
__exportStar(require("./common/region"), exports);
__exportStar(require("./perfermance/index"), exports);
function initBaseClient(options) {
    const sessionId = (0, uuid_1.v4)();
    const { name, pageId, i18nOptions, globalTags = {}, getContext, isDesktop } = options;
    const region = (0, region_1.getRegion)(process.env || {});
    context_1.default.set('sessionId', sessionId);
    const slardar = (0, index_2.createDefaultSlardarClient)({
        pid: pageId,
    }, globalTags, region, isDesktop);
    const logger = (0, index_node_1.createLogger)({
        name,
        slardar,
        context: {
            sessionId,
            runtime: 'node',
        },
    });
    const tea = (0, index_4.createDefaultTeaClient)({ region, isDesktop });
    const request = (0, index_3.createDefaultRequestInstance)({});
    const defaultContext = (0, index_2.getDefaultContext)();
    tea.config({ custom: { ...defaultContext, ...globalTags } });
    (0, init_1.initGlobalContext)({ tea, slardar, getContext });
    const reporter = new reporter_1.Reporter(slardar, (0, context_2.getIsDev)(process.env || {}), pageId);
    const i18n = (0, index_1.createI18nTranslator)(i18nOptions || {});
    const handleError = (error) => {
        if (error instanceof Error) {
            reporter.captureException(error);
        }
        else {
            reporter.captureException(new Error(`uncaughtException: ${(0, toString_1.default)(error)}`));
        }
    };
    process.addListener('uncaughtException', handleError);
    process.addListener('unhandledRejection', handleError);
    process.addListener('uncaughtExceptionMonitor', handleError);
    const disposable = (0, base_1.toDisposable)(() => {
        reporter.dispose();
        process.removeListener('uncaughtException', handleError);
        process.removeListener('unhandledRejection', handleError);
        process.removeListener('uncaughtExceptionMonitor', handleError);
    });
    return { request, reporter, logger, tea, slardar, i18n, disposable };
}
exports.initBaseClient = initBaseClient;
