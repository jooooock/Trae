import { __read, __spreadArray } from "tslib";
import { ContextPlugin, IntegrationPlugin, SubjectPlugin, createClient, withCommandArray, } from '@slardar/sdk-template';
import { getXhrTransport, createBrowserSender, InjectNetworkTypePlugin, captureCurrentContext, syncReportWithCapturedContext, getGlobalRegistry, getDefaultBrowser, getViewId, formatStorageExpires, } from '@slardar/sdk-web';
import { createBrowserConfigManager } from './browser-config';
import { browserBuilder } from './builder';
import { DEFAULT_IGNORE_PATHS, DEFAULT_SAMPLE_CONFIG, PLUGINS_LOAD_PREFIX, REPORT_DOMAIN, DEFAULT_SENDER_SIZE, } from './constants';
import { register } from './loader';
import { normalizeInitConfig, normalizeUserConfig, validateInitConfig } from './normalize';
import { InjectEnvPlugin, ObserveErrorPlugin, TimeCalibrationPlugin, InjectConfigPlugin, InjectQueryPlugin, } from './plugins';
import { getDefaultSessionId, getReportUrl, getDefaultUserIdAndDeviceId } from './util';
export var getDefaultConfig = function (c) {
    var storageExpires = formatStorageExpires(c.storageExpires);
    var storageInfo = getDefaultUserIdAndDeviceId(c.bid, storageExpires);
    return {
        bid: '',
        pid: '',
        viewId: getViewId('_'),
        userId: storageInfo.userId,
        deviceId: storageInfo.deviceId,
        storageExpires: storageExpires,
        sessionId: getDefaultSessionId(),
        domain: REPORT_DOMAIN,
        pluginBundle: {
            name: 'commonMonitors',
            plugins: ['breadcrumb', 'jsError', 'performance', 'resourceError', 'resource'],
        },
        pluginPathPrefix: PLUGINS_LOAD_PREFIX,
        plugins: {
            ajax: { ignoreUrls: DEFAULT_IGNORE_PATHS },
            fetch: { ignoreUrls: DEFAULT_IGNORE_PATHS },
            breadcrumb: {},
            pageview: {},
            jsError: {},
            resource: {},
            resourceError: {},
            performance: {},
            tti: {},
            fmp: {},
            blankScreen: false,
            heatmap: false,
        },
        release: '',
        env: 'production',
        sample: DEFAULT_SAMPLE_CONFIG,
        transport: getXhrTransport(),
    };
};
export var createMinimalBrowserClient = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.createSender, createSender = _c === void 0 ? function (config) {
        return createBrowserSender({
            size: DEFAULT_SENDER_SIZE,
            endpoint: getReportUrl(config.domain),
            transport: config.transport,
        });
    } : _c, _d = _b.builder, builder = _d === void 0 ? browserBuilder : _d, _e = _b.createDefaultConfig, createDefaultConfig = _e === void 0 ? getDefaultConfig : _e;
    var client = createClient({
        validateInitConfig: validateInitConfig,
        initConfigNormalizer: normalizeInitConfig,
        userConfigNormalizer: normalizeUserConfig,
        createSender: createSender,
        builder: builder,
        createDefaultConfig: createDefaultConfig,
        createConfigManager: createBrowserConfigManager,
    });
    ObserveErrorPlugin(client);
    ContextPlugin(client);
    var subjectMap = getGlobalRegistry(getDefaultBrowser());
    SubjectPlugin(client, subjectMap && subjectMap.subject);
    TimeCalibrationPlugin(client);
    InjectConfigPlugin(client);
    InjectEnvPlugin(client);
    InjectNetworkTypePlugin(client);
    InjectQueryPlugin(client);
    var commandClient = withCommandArray(client, captureCurrentContext, function (c, ctx, args) {
        return syncReportWithCapturedContext(c, ctx)(function () {
            var _a = __read(args), method = _a[0], others = _a.slice(1);
            client[method].apply(client, __spreadArray([], __read(others), false));
        });
    });
    // add plugin after with command array
    IntegrationPlugin(commandClient, register);
    return commandClient;
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/esm/minimal.js.map