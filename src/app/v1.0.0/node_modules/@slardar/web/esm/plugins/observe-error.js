import { __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { isHitBySampleRate } from '@slardar/sdk-template';
import { getGlobalRegistry, getDefaultBrowser, normalizeUnknownError, JS_ERROR_EV_TYPE, } from '@slardar/sdk-web';
import { toObservableArray } from '../util';
export var buildSelfErrorEvent = function (ev) {
    var _a = __read(ev, 2), err = _a[0], extra = _a[1];
    return {
        ev_type: JS_ERROR_EV_TYPE,
        payload: {
            error: normalizeUnknownError(err),
            breadcrumbs: [],
            extra: extra || {},
        },
        extra: {
            bid: 'slardar_sdk',
        },
    };
};
var DEFAULT_OBSERVE_ERROR_RATE = 0.001;
export var ObserveErrorPlugin = function (client, rate) {
    if (rate === void 0) { rate = DEFAULT_OBSERVE_ERROR_RATE; }
    var registry = getGlobalRegistry(getDefaultBrowser());
    // 如果没有获取到注册表 或者已经observe了，则不操作
    if (!registry)
        return;
    if (!registry.errors) {
        registry.errors = [];
    }
    if ('observe' in registry.errors)
        return;
    if (!isHitBySampleRate(rate))
        return;
    // 挂载observe方法
    registry.errors = toObservableArray(registry.errors);
    // 消费已挂载的错误
    registry.errors.forEach(function (e) {
        client.report(buildSelfErrorEvent(e));
    });
    // 注册observe回调用
    registry.errors.observe(function (e) {
        client.report(buildSelfErrorEvent(e));
    });
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/esm/plugins/observe-error.js.map