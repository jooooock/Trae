import { __read } from "tslib";
import { observePerf } from '../../collector';
import { visibilityStateIsHidden } from '../../collector/page';
import { getDefaultPerformanceObserver, getDefaultPerformance, applyPerformance } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
export var FI_ENTRY_NAME = 'first-input';
export var FID_METRIC_NAME = "fid" /* fid */;
var getFID = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 2), activatedObserver = _b[0], getHiddenObserver = _b[1];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var performance = getDefaultPerformance();
    var metric = initMetric(FID_METRIC_NAME, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!performance || !PerformanceObserver) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    var invokePaint = function (_a) {
        var processingStart = _a.processingStart, startTime = _a.startTime;
        metric.value = processingStart - startTime;
        sendOnceAndTearDown(metric);
    };
    var handleActivated = function () {
        // if the page is initially hidden or still hidden after prerendering
        // that means the tab was activated in a background state, so it is marked as unsupported
        if (visibilityStateIsHidden(document)) {
            metric.isSupport = false;
            sendOnceAndTearDown(metric);
            return;
        }
        // report immediately if have FI entry
        var _a = __read(applyPerformance(performance), 3), getEntriesByType = _a[2];
        var paint = getEntriesByType(FI_ENTRY_NAME)[0];
        if (paint) {
            invokePaint(paint);
            return;
        }
        // observer performance if don't have FI entry
        tearDownGroup.push(observePerf(PerformanceObserver, invokePaint, [FI_ENTRY_NAME]));
        var hiddenCallback = function (isHidden) {
            if (isHidden) {
                // if initially not hidden but suddenly becomes hidden, then the metric can be settle.
                sendOnceAndTearDown(metric);
            }
        };
        // hiddenObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
        var hiddenObserver = getHiddenObserver();
        tearDownGroup.push(function () { return hiddenObserver[1](hiddenCallback); });
        hiddenObserver[0](hiddenCallback);
    };
    // activatedObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
    tearDownGroup.push(function () { return activatedObserver[1](handleActivated); });
    activatedObserver[0](handleActivated);
};
export var FID = [FID_METRIC_NAME, getFID];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/monitors/performance-new/fid.js.map