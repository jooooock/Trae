import ava from 'ava';
import sinon from 'sinon';
import { noop } from '@slardar/sdk-template';
import { createBrowserSender } from '../sender';
var browserEnv = require('browser-env');
var test = ava;
test.beforeEach(function (t) {
    browserEnv();
    t.context.clock = sinon.useFakeTimers();
});
test.afterEach(function (t) {
    t.context.clock.restore();
});
test.serial('browserSender - use sendBeacon if set useBeacon true', function (t) {
    var post = sinon.fake();
    var beacon = sinon.fake();
    // eslint-disable-next-line compat/compat
    window.navigator.sendBeacon = beacon;
    var sender = createBrowserSender({
        endpoint: 'end',
        transport: {
            useBeacon: true,
            get: noop,
            post: post,
        },
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '1',
            source: 'user-set',
        },
        common: {},
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '2',
            source: 'user-set',
        },
        common: {},
    });
    t.assert(post.notCalled);
    t.assert(beacon.notCalled);
    t.assert(sender.getBatchData());
    window.dispatchEvent(new window.Event('beforeunload'));
    t.assert(post.notCalled);
    t.assert(beacon.calledOnce);
    t.is(beacon.args[0][0], 'end');
    t.deepEqual(JSON.parse(beacon.args[0][1]), {
        ev_type: 'batch',
        list: [
            {
                ev_type: 'pageview',
                payload: {
                    pid: '1',
                    source: 'user-set',
                },
                common: {},
            },
            {
                ev_type: 'pageview',
                payload: {
                    pid: '2',
                    source: 'user-set',
                },
                common: {},
            },
        ],
    });
    t.falsy(sender.getBatchData());
});
test.serial('browserSender - batch send', function (t) {
    var post = sinon.fake();
    var beacon = sinon.fake();
    // eslint-disable-next-line compat/compat
    window.navigator.sendBeacon = beacon;
    var sender = createBrowserSender({
        endpoint: 'end',
        transport: {
            get: noop,
            post: post,
        },
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '1',
            source: 'user-set',
        },
        common: {},
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '2',
            source: 'user-set',
        },
        common: {},
    });
    t.assert(post.notCalled);
    t.assert(beacon.notCalled);
    t.context.clock.tick(1000);
    t.assert(post.calledOnce);
    t.assert(beacon.notCalled);
    t.is(post.args[0][0].url, 'end');
    t.deepEqual(JSON.parse(post.args[0][0].data), {
        ev_type: 'batch',
        list: [
            {
                ev_type: 'pageview',
                payload: {
                    pid: '1',
                    source: 'user-set',
                },
                common: {},
            },
            {
                ev_type: 'pageview',
                payload: {
                    pid: '2',
                    source: 'user-set',
                },
                common: {},
            },
        ],
    });
});
test.serial('browserSender - use send flush if set useBeacon false', function (t) {
    var post = sinon.fake();
    var beacon = sinon.fake();
    // eslint-disable-next-line compat/compat
    window.navigator.sendBeacon = beacon;
    var sender = createBrowserSender({
        endpoint: 'end',
        transport: {
            useBeacon: false,
            get: noop,
            post: post,
        },
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '1',
            source: 'user-set',
        },
        common: {},
    });
    sender.send({
        ev_type: 'pageview',
        payload: {
            pid: '2',
            source: 'user-set',
        },
        common: {},
    });
    t.assert(post.notCalled);
    t.assert(beacon.notCalled);
    t.assert(sender.getBatchData());
    window.dispatchEvent(new window.Event('beforeunload'));
    t.assert(post.calledOnce);
    t.assert(beacon.notCalled);
    t.is(post.args[0][0].url, 'end');
    t.deepEqual(JSON.parse(post.args[0][0].data), {
        ev_type: 'batch',
        list: [
            {
                ev_type: 'pageview',
                payload: {
                    pid: '1',
                    source: 'user-set',
                },
                common: {},
            },
            {
                ev_type: 'pageview',
                payload: {
                    pid: '2',
                    source: 'user-set',
                },
                common: {},
            },
        ],
    });
    t.falsy(sender.getBatchData());
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/__test__/sender.spec.js.map