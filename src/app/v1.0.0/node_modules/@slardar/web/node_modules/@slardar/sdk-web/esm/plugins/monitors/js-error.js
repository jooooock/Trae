import { initSubjectInGlobal, registerTearDownGroup } from '@slardar/sdk-template';
import { asyncErrorWithSourceSubject } from '../../collector/async_error';
import { errorSubject, promiseRejectionSubject } from '../../collector/error';
import { JS_ERROR_EV_TYPE } from '../../constants';
import { jsErrorGetterWithContext } from '../../monitors/js-error';
import { getConfig } from '../../utils';
export { normalizeUnknownError } from '../../monitors/js-error/util';
export var JS_ERROR_MONITOR_PLUGIN_NAME = 'jsError';
var defaultConfig = {
    ignoreErrors: [],
    onerror: true,
    onunhandledrejection: true,
    captureGlobalAsync: false,
    dedupe: true,
};
export function JsErrorMonitorBasePlugin(client, c) {
    // stop precollect listener no matter what is configured
    window.removeEventListener('error', client.pcErr, true);
    window.removeEventListener('unhandledrejection', client.pcRej, true);
    var config = getConfig(c, defaultConfig);
    if (!config) {
        return;
    }
    var tearDownGroup = [];
    var reportJsError = jsErrorGetterWithContext(function (ev) {
        client.getBreadcrumbs && (ev.payload.breadcrumbs = client.getBreadcrumbs());
        client.report(ev);
    }, tearDownGroup, [
        initSubjectInGlobal(client, errorSubject),
        initSubjectInGlobal(client, promiseRejectionSubject),
        function () { return initSubjectInGlobal(client, asyncErrorWithSourceSubject); },
    ], config);
    registerTearDownGroup(client, JS_ERROR_MONITOR_PLUGIN_NAME, JS_ERROR_EV_TYPE, tearDownGroup);
    client.provide('captureException', reportJsError);
}
export function JsErrorMonitorPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[JS_ERROR_MONITOR_PLUGIN_NAME];
        JsErrorMonitorBasePlugin(client, config);
    });
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/plugins/monitors/js-error.js.map