import { __assign } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { noop } from '@slardar/sdk-template';
import { createConfigManager, mergeSampleConfig } from '../config';
test.serial('BrowserConfigManager - getConfig', function (t) {
    var timer = sinon.useFakeTimers();
    var cfg = {
        bid: 'bid',
        pid: 'pid',
        viewId: 'pid_' + Date.now(),
        deviceId: '',
        userId: '',
        sessionId: '',
        name: 'test',
        version: '0.1.1',
        release: 'release',
        env: 'env',
        domain: 'test-domain',
        plugins: {},
        transport: { get: noop, post: noop },
    };
    var bfm = createConfigManager(__assign({}, cfg));
    var onReady = sinon.fake();
    var onChange = sinon.fake();
    bfm.onChange(onChange);
    bfm.onReady(onReady);
    t.deepEqual(bfm.getConfig(), cfg);
    t.assert(onReady.notCalled);
    t.assert(onChange.notCalled);
    timer.tick(666);
    bfm.setConfig({
        pid: 'init-pid',
    });
    t.assert(onChange.calledOnce);
    t.assert(onReady.calledOnce);
    bfm.setConfig({
        userId: 'local-id',
    });
    t.assert(onChange.calledTwice);
    t.is(bfm.getConfig().userId, 'local-id');
    timer.restore();
});
test('mergeSampleConfig', function (t) {
    t.is(mergeSampleConfig(), undefined);
    t.deepEqual(mergeSampleConfig({ sample_rate: 1 }), { sample_rate: 1 });
    t.deepEqual(mergeSampleConfig(undefined, { sample_rate: 1 }), { sample_rate: 1 });
    t.deepEqual(mergeSampleConfig({ sample_rate: 1, include_users: ['123'] }, { sample_rate: 0.5, include_users: ['456'] }), {
        sample_rate: 0.5,
        include_users: ['123', '456'],
        rules: {},
    });
    t.deepEqual(mergeSampleConfig({
        sample_rate: 1,
        rules: {
            pageview: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    }, {
        sample_rate: 0.5,
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.3,
                conditional_sample_rules: [],
            },
            jserr: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    }), {
        sample_rate: 0.5,
        include_users: [],
        rules: {
            pageview: {
                enable: true,
                sample_rate: 0.3,
                conditional_sample_rules: [],
            },
            jserr: {
                enable: false,
                sample_rate: 1,
                conditional_sample_rules: [],
            },
        },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/esm/__test__/config.spec.js.map