import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { PerformanceMonitorPlugin } from '../performance';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test.serial('PerformanceMonitorPlugin - LCP - not support', function (t) {
    var client = createTestWebClient();
    PerformanceMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            performance: {
                fp: false,
                fcp: false,
                lcp: true,
                fid: false,
                cls: false,
                longtask: false,
                timing: false,
                mpfid: false,
            },
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'lcp',
            isSupport: false,
            isPolyfill: false,
            isBounced: false,
            isCustom: false,
            type: 'perf',
        },
    });
});
test.serial('PerformanceMonitorPlugin - LCP - hidden', function (t) {
    var MockPerformanceObserver = /** @class */ (function () {
        function MockPerformanceObserver(cb) {
            ;
            this.observe = function () {
                cb({
                    getEntries: function () {
                        return {};
                    },
                }, {
                    disconnect: sinon.fake(),
                });
                return {};
            };
        }
        MockPerformanceObserver.prototype.disconnect = function () { };
        return MockPerformanceObserver;
    }());
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line compat/compat
    window.PerformanceObserver = MockPerformanceObserver;
    // make visibilityState hidden
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    var client = createTestWebClient();
    PerformanceMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            performance: {
                fp: false,
                fcp: false,
                lcp: true,
                fid: false,
                cls: false,
                longtask: false,
                timing: false,
                mpfid: false,
            },
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'lcp',
            isSupport: false,
            isPolyfill: false,
            isBounced: false,
            isCustom: false,
            type: 'perf',
        },
    });
    sb.restore();
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/node_modules/@slardar/sdk-web/esm/plugins/monitors/__test__/performance.spec.js.map