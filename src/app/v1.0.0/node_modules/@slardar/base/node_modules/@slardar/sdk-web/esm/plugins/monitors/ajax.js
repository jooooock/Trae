import { __assign } from "tslib";
import { initSubjectInGlobal, id, createSafeObserver, registerTearDownGroup, } from '@slardar/sdk-template';
import { reportWithCurrentContext } from '../../collector/client';
import { applyXHR, XHR_SUBJECT_NAME } from '../../collector/http';
import { resourceSubject } from '../../collector/perf';
import { HTTP_EV_TYPE } from '../../constants';
import { setTraceContext, setVolTraceContext } from '../../monitors/http/trace';
import { httpGetterWithXhrObserver } from '../../monitors/http/xhr';
import { getConfig } from '../../utils';
import { getPluginConfig } from './utils';
export var AJAX_MONITOR_PLUGIN_NAME = 'ajax';
var defaultConfig = {
    autoWrap: true,
    setContextAtReq: function () { return id; },
    ignoreUrls: [],
    collectBodyOnError: false,
};
export function AjaxMonitorBasePlugin(client, c) {
    var config = getConfig(c, defaultConfig);
    if (!config) {
        return;
    }
    var tearDownGroup = [];
    var xhrConfig = __assign(__assign({}, config), { setContextAtReq: function () { return reportWithCurrentContext(client, true); }, setTraceHeader: setTraceContext(config.trace) });
    var getResourceSubject = function () { return initSubjectInGlobal(client, resourceSubject); };
    xhrConfig.autoWrap &&
        httpGetterWithXhrObserver(tearDownGroup, [
            initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
            getResourceSubject,
        ], xhrConfig);
    registerTearDownGroup(client, AJAX_MONITOR_PLUGIN_NAME, HTTP_EV_TYPE, tearDownGroup);
    client.provide('wrapXhr', function (Xhr) {
        function Ctor() {
            var xhr = new Xhr();
            httpGetterWithXhrObserver(tearDownGroup, [createSafeObserver(applyXHR(xhr)), getResourceSubject], xhrConfig);
            return xhr;
        }
        Ctor.prototype = new Xhr();
        ['DONE', 'HEADERS_RECIEVED', 'LOADING', 'OPENED', 'UNSENT'].forEach(function (key) {
            Ctor[key] = Xhr[key];
        });
        return Ctor;
    });
}
export function AjaxMonitorPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[AJAX_MONITOR_PLUGIN_NAME];
        AjaxMonitorBasePlugin(client, config);
    });
}
export function AjaxMonitorVolPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = getPluginConfig(client, AJAX_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var xhrConfig = __assign(__assign({}, config), { setContextAtReq: function () { return reportWithCurrentContext(client, true); }, setTraceHeader: setVolTraceContext(config.trace, "app_id=" + ((_a = client.config()) === null || _a === void 0 ? void 0 : _a.aid) + ",origin=web") });
        var getResourceSubject = function () { return initSubjectInGlobal(client, resourceSubject); };
        xhrConfig.autoWrap &&
            httpGetterWithXhrObserver(tearDownGroup, [
                initSubjectInGlobal(client, [XHR_SUBJECT_NAME, applyXHR(XMLHttpRequest && XMLHttpRequest.prototype)]),
                getResourceSubject,
            ], xhrConfig);
        registerTearDownGroup(client, AJAX_MONITOR_PLUGIN_NAME, HTTP_EV_TYPE, tearDownGroup);
    });
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/node_modules/@slardar/sdk-web/esm/plugins/monitors/ajax.js.map