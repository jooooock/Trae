import { __read } from "tslib";
/* eslint-disable @typescript-eslint/prefer-optional-chain */
import { readyStateIsComplete } from '../../collector/page';
import { PERFORMANCE_METRIC_EV_TYPE, PAGEVIEW_EV_TYPE, ACTION_EV_TYPE, HTTP_EV_TYPE, RESOURCE_EV_TYPE, LONG_TASK_EV_TYPE, BLANK_SCREEN_EV_TYPE, JS_ERROR_EV_TYPE, RESOURCE_ERROR_EV_TYPE, } from '../../constants';
import { parseUrl, now, getDefaultDocument } from '../../utils';
export var getDefaultExtractor = function (routeMode) { return function (url) {
    var _a;
    if (routeMode === 'hash') {
        return ((_a = parseUrl(url).hash) === null || _a === void 0 ? void 0 : _a.replace(/^#/, '')) || '/';
    }
    else {
        return parseUrl(url).path;
    }
}; };
export var getViewId = function (pid) { return joinWithSeparator(pid, now()); };
export var joinWithSeparator = function (a, b) { return a + "_" + b; };
export var applyOnPidChange = function (cb, initPid, firstOriginPid, onPidUpdate) {
    // store originalPid from url
    var originalPid = firstOriginPid;
    // store finalPid send to server
    var finalPid = initPid;
    // set init pid in config
    onPidUpdate && onPidUpdate(initPid);
    var onPidChange = function (source, newPid, customPid) {
        // newPid is extractPid from url, should send pageview if changed, no matter customPid changed
        if (source !== "user_set" /* user_set */ && newPid !== originalPid) {
            originalPid = newPid;
            finalPid = customPid !== null && customPid !== void 0 ? customPid : originalPid;
            onPidUpdate && onPidUpdate(finalPid); // update pid in common
            cb(source, finalPid);
            // newPid is by user set, should send pageview if not equal to finalPid
        }
        else if (source === "user_set" /* user_set */ && newPid !== finalPid) {
            finalPid = newPid;
            onPidUpdate && onPidUpdate(finalPid); // update pid in common
            cb(source, finalPid);
        }
    };
    var sendInit = function () {
        initPid && cb("init" /* init */, initPid);
    };
    return [onPidChange, sendInit];
};
export var applyOnUrlChange = function (cb, initUrl) {
    var url = initUrl;
    var onUrlChange = function (source, newUrl) {
        if (newUrl !== url) {
            url = newUrl;
            cb(source, url);
        }
    };
    return [onUrlChange];
};
export var wrapPageview = function (source, pid) { return ({
    ev_type: PAGEVIEW_EV_TYPE,
    payload: {
        pid: pid,
        source: source,
    },
}); };
export var applyReportPageview = function (report) {
    return function (source, pid) {
        report(wrapPageview(source, pid));
    };
};
export var isManualMode = function (routeMode) { return routeMode === 'manual'; };
var ERROR_WEIGHT = 'error_weight';
var DURATION_APDEX = 'duration_apdex';
var PREF_APDEX = 'perf_apdex';
var ACTION_KEY = 'action';
export var getDefaultApdexDetail = function () {
    var _a;
    return _a = {
            error_count: [0, 0, 0, 0],
            duration_count: [0, 0, 0]
        },
        _a[PREF_APDEX] = {},
        _a;
};
export var getRank = function (apdex, setting) {
    var total = apdex[0 /* satisfying */] + apdex[1 /* tolerable */] + apdex[2 /* frustrating */];
    var s_percent = apdex[0 /* satisfying */] / total;
    var f_percent = apdex[2 /* frustrating */] / total;
    return f_percent > setting.frustrating_threshold
        ? 2 /* frustrating */
        : s_percent > setting.satisfying_threshold || total === 0
            ? 0 /* satisfying */
            : 1 /* tolerable */;
};
export var calculateSpentTime = function () {
    // record spent time
    var spentTime = 0;
    var lastShowTimeStamp = undefined;
    var handleHidden = function (isHidden) {
        if (isHidden) {
            if (!lastShowTimeStamp)
                return;
            // set spentTime and reset last show timestamp
            spentTime += now() - lastShowTimeStamp;
            lastShowTimeStamp = undefined;
        }
        else {
            lastShowTimeStamp = now();
        }
    };
    var getSpentTime = function () {
        // correct the value of the last spent
        lastShowTimeStamp && (spentTime += now() - lastShowTimeStamp);
        var time = spentTime;
        // reset status
        spentTime = 0;
        lastShowTimeStamp = now();
        return time;
    };
    return [handleHidden, getSpentTime];
};
export var applyCalculateWight = function (calculateDuration, calculateError) {
    return function (ev, apdexSetting) {
        var payload = ev.payload;
        switch (ev.ev_type) {
            case PERFORMANCE_METRIC_EV_TYPE:
                var name_1 = payload.name;
                if (payload.isSupport) {
                    calculateDuration(apdexSetting[PREF_APDEX], name_1, payload.value);
                }
                break;
            case ACTION_EV_TYPE:
                calculateDuration(apdexSetting[PREF_APDEX], ACTION_KEY, payload.duration || 0);
                break;
            case JS_ERROR_EV_TYPE:
                calculateError(apdexSetting[ERROR_WEIGHT], 0);
                break;
            case HTTP_EV_TYPE:
                if (payload.response.is_custom_error || payload.response.status >= 400) {
                    calculateError(apdexSetting[ERROR_WEIGHT], 1);
                }
                else {
                    var timing = payload.response.timing;
                    timing && calculateDuration(apdexSetting[DURATION_APDEX], 0, timing.duration);
                }
                break;
            case RESOURCE_ERROR_EV_TYPE:
                calculateError(apdexSetting[ERROR_WEIGHT], 2);
                break;
            case BLANK_SCREEN_EV_TYPE:
                calculateError(apdexSetting[ERROR_WEIGHT], 3);
                break;
            case RESOURCE_EV_TYPE:
                calculateDuration(apdexSetting[DURATION_APDEX], 1, payload.duration);
                break;
            case LONG_TASK_EV_TYPE:
                ;
                payload.longtasks.forEach(function (l) {
                    calculateDuration(apdexSetting[DURATION_APDEX], 2, l.duration);
                });
                break;
            default:
                break;
        }
    };
};
export var calculateApdex = function () {
    var apdexWeight;
    var apdexDetail;
    var initApdex = function () {
        apdexWeight = [0, 0, 0];
        apdexDetail = getDefaultApdexDetail();
    };
    // init apdex first
    initApdex();
    var calculateDurationWeight = function (weight, nameOrIndex, value) {
        var rules = weight && weight[nameOrIndex];
        // make sure all value is valuable
        if (!rules || value <= 0)
            return;
        var level = value < (rules[0 /* satisfying */].threshold || 0)
            ? 0 /* satisfying */
            : value > (rules[1 /* tolerable */].threshold || 0)
                ? 2 /* frustrating */
                : 1 /* tolerable */;
        apdexWeight[level] += rules[level].weight;
        if (typeof nameOrIndex === 'string') {
            var name_2 = joinWithSeparator(nameOrIndex, level);
            var value_1 = apdexDetail[PREF_APDEX][name_2];
            apdexDetail[PREF_APDEX][name_2] = (value_1 || 0) + 1;
        }
        else {
            level === 2 /* frustrating */ && (apdexDetail.duration_count[nameOrIndex] += 1);
        }
    };
    var calculateErrorWeight = function (weight, index) {
        if (!weight)
            return;
        apdexWeight[2 /* frustrating */] += weight[index];
        apdexDetail.error_count[index] += 1;
    };
    var getApdex = function () {
        return [apdexWeight, apdexDetail];
    };
    return [calculateDurationWeight, calculateErrorWeight, getApdex, initApdex];
};
export var calculateSession = function () {
    var sessionPayload = {
        // use the current initialized time as start is more appropriate than navigationStart
        start: now(),
        end: 0,
        time_spent: 0,
        is_bounced: false,
        entry: '',
        exit: '',
        p_count: 0,
        a_count: 0,
    };
    var handleUnload = function (sessionApdexInfo, lastPage) {
        var _a = __read(sessionApdexInfo, 3), rank = _a[0], apdex = _a[1], apdex_detail = _a[2];
        sessionPayload.end = now();
        sessionPayload.time_spent += (lastPage && lastPage.time_spent) || 0;
        sessionPayload.last_page = lastPage;
        sessionPayload.p_count += 1;
        sessionPayload.rank = rank;
        sessionPayload.apdex = apdex;
        sessionPayload.apdex_detail = apdex_detail;
        var d = getDefaultDocument();
        d && (sessionPayload.is_bounced = !readyStateIsComplete(d));
    };
    var handlePageview = function (lastPage, newPid) {
        sessionPayload.time_spent += lastPage.time_spent;
        sessionPayload.p_count += 1;
        sessionPayload.exit = newPid;
    };
    var handleAction = function () {
        sessionPayload.a_count += 1;
    };
    var setEntry = function (entry) {
        sessionPayload.entry = entry;
        sessionPayload.exit = entry;
    };
    var getSessionPayload = function () { return sessionPayload; };
    return [handleUnload, handlePageview, handleAction, setEntry, getSessionPayload];
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/node_modules/@slardar/sdk-web/esm/monitors/pageview/util.js.map