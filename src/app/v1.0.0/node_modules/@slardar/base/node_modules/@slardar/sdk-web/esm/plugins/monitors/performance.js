import { __assign, __read } from "tslib";
import { initSubjectInGlobal, initPrivateSubject, registerTearDownGroup } from '@slardar/sdk-template';
import { applyPV, applyFirstPV, FIRST_PV_SUBJECT_NAME, PV_SUBJECT_NAME } from '../../collector/client';
import { hiddenSubject, unloadSubject, loadSubject, activatedSubject } from '../../collector/page';
import { longtaskSubject } from '../../collector/perf';
import { PERFORMANCE_METRIC_EV_TYPE, LONG_TASK_EV_TYPE, PERFORMANCE_TIMING_EV_TYPE } from '../../constants';
import { FP, FCP, LCP, FID, CLS, LONGTASK, TIMING, MPFID, LONGTASK_METRIC_NAME, TIMING_METRIC_NAME, } from '../../monitors/performance-new';
import { wrapPerformanceMetric, getSPA } from '../../monitors/performance-new/util';
import { defaultMetricContext } from '../../monitors/performance/util';
import { getPluginConfig } from './utils';
export var defaultPerformancePrecollect = {
    entries: [],
    observer: undefined,
};
export var PERFORMANCE_MONITOR_PLUGIN_NAME = 'performance';
export function PerformanceMonitorPlugin(client) {
    client.on('init', function () {
        var _a;
        var precollect = client.pp || defaultPerformancePrecollect;
        // clear precollect observer no matter what is configured
        (_a = precollect.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
        var config = getPluginConfig(client, PERFORMANCE_MONITOR_PLUGIN_NAME, {});
        if (!config)
            return;
        var getActivatedObserver = function () { return initSubjectInGlobal(client, activatedSubject); };
        var getHiddenObserver = function () { return initSubjectInGlobal(client, hiddenSubject); };
        var getUnloadObserver = function () { return initSubjectInGlobal(client, unloadSubject); };
        var loadObserver = initSubjectInGlobal(client, loadSubject);
        var longtaskObserver = initSubjectInGlobal(client, longtaskSubject);
        var overrides = undefined;
        var firstPVObserver = initPrivateSubject(client, [FIRST_PV_SUBJECT_NAME, applyFirstPV(client)], -1);
        firstPVObserver[0](function (o) {
            overrides = o;
        })();
        var reportMetric = function (data) {
            // every first screen metrics needs to be associated with the context when client init, but CLS and long task are not included
            var payloadWithOverrides = (data.ev_type === PERFORMANCE_METRIC_EV_TYPE && data.payload.name === CLS[0]) ||
                data.ev_type === LONG_TASK_EV_TYPE
                ? data
                : __assign(__assign({}, data), { overrides: overrides });
            client.report(payloadWithOverrides);
        };
        var getPVObserver = function () { return initPrivateSubject(client, [PV_SUBJECT_NAME, applyPV(client)]); };
        [FP, FCP, LCP, FID, CLS].forEach(function (cur) {
            if (config[cur[0]] !== false) {
                var tearDown = [];
                cur[1](reportMetric, tearDown, [getActivatedObserver(), getHiddenObserver, getUnloadObserver, getPVObserver]);
                registerTearDownGroup(client, PERFORMANCE_MONITOR_PLUGIN_NAME, PERFORMANCE_METRIC_EV_TYPE, tearDown);
            }
        });
        [LONGTASK, TIMING, MPFID].forEach(function (cur) {
            if (config[cur[0]] !== false) {
                var tearDown = [];
                cur[1](reportMetric, tearDown, [loadObserver, getActivatedObserver, getUnloadObserver(), longtaskObserver]);
                var evType = cur[0] === LONGTASK_METRIC_NAME
                    ? LONG_TASK_EV_TYPE
                    : cur[0] === TIMING_METRIC_NAME
                        ? PERFORMANCE_TIMING_EV_TYPE
                        : PERFORMANCE_METRIC_EV_TYPE;
                registerTearDownGroup(client, PERFORMANCE_MONITOR_PLUGIN_NAME, evType, tearDown);
            }
        });
        // spa_load
        var _b = __read(getSPA(client.report.bind(client)), 2), performanceInit = _b[0], performanceSend = _b[1];
        client.provide('performanceInit', performanceInit);
        client.provide('performanceSend', performanceSend);
        // clear precollect data after consumed
        precollect.entries.length = 0;
        // provide custom performance API
        var sendPref = function (customMetric) {
            var payload = __assign(__assign(__assign({}, defaultMetricContext), customMetric), { isCustom: true });
            client.report(wrapPerformanceMetric(payload));
        };
        client.provide('sendCustomPerfMetric', sendPref);
    });
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/node_modules/@slardar/sdk-web/esm/plugins/monitors/performance.js.map