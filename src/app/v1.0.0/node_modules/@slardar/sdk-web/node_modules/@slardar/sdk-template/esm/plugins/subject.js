import { __read } from "tslib";
import { createSafeObserver, wrapFilters } from '../utils/observable';
export var SubjectSpacer = '_';
export var getSubjectKeyWithoutVersion = function (subjectKey) {
    return subjectKey.split(SubjectSpacer)[0];
};
export function SubjectPlugin(client, globalSubjectMap) {
    var subjectMap = globalSubjectMap || {};
    var filterMap = {};
    // filter key is subject key but without subject spacer and subject version, and it only takes effect on subsequent observers
    var setFilter = function (subjectKeyWithoutVersion, filter) {
        if (!filterMap[subjectKeyWithoutVersion])
            filterMap[subjectKeyWithoutVersion] = [];
        filterMap[subjectKeyWithoutVersion].push(filter);
    };
    var initSubject = function (_a) {
        var _b = __read(_a, 2), subjectKey = _b[0], observer = _b[1];
        var filterKey = getSubjectKeyWithoutVersion(subjectKey);
        var filters = !!filterKey && filterMap[filterKey];
        if (!subjectMap[subjectKey])
            subjectMap[subjectKey] = createSafeObserver(observer, function () {
                subjectMap[subjectKey] = undefined;
            });
        if (!filters)
            return subjectMap[subjectKey];
        return initPrivateSubject(client, [
            subjectKey,
            wrapFilters(subjectMap[subjectKey], filters),
        ]);
    };
    client.provide('setFilter', setFilter);
    client.provide('initSubject', initSubject);
    client.provide('getSubject', function (key) { return subjectMap[key]; });
    client.provide('privateSubject', {});
}
/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
export function initSubjectInGlobal(client, args) {
    return client.initSubject(args);
}
/**
 * 此方法不会挂载到全局对象上，同时只支持同步注册并使用
 */
export function initPrivateSubject(client, _a, bufferTime) {
    var _b = __read(_a, 2), subjectKey = _b[0], observer = _b[1];
    var subjectMap = client.privateSubject || {};
    if (!subjectMap[subjectKey])
        subjectMap[subjectKey] = createSafeObserver(observer, function () {
            subjectMap[subjectKey] = undefined;
        }, bufferTime);
    return subjectMap[subjectKey];
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/node_modules/@slardar/sdk-template/esm/plugins/subject.js.map