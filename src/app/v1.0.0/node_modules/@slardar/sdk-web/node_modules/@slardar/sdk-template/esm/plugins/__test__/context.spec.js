import { __assign } from "tslib";
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import test from 'ava';
import sinon from 'sinon';
import { id } from '../../utils';
import { ContextPlugin } from '../context';
import { createTestClient } from './common';
var withConfig = function (c) {
    c.on('report', function (ev) {
        return __assign(__assign({}, ev), { extra: __assign(__assign({}, c.config()), (ev.extra || {})) });
    });
};
test('ContextPlugin - w/ extra', function (t) {
    var _a, _b, _c;
    var send = sinon.fake();
    var client = createTestClient(send);
    withConfig(client);
    ContextPlugin(client);
    client.init({ bid: '123', url: 'init-url' });
    var event1 = { ev_type: 'test', payload: { id: 123 } };
    var onReport = sinon.spy(id);
    client.on('report', onReport);
    t.assert(onReport.notCalled);
    client.report(event1);
    t.assert(onReport.calledOnce);
    t.deepEqual(onReport.args[0][0], __assign(__assign({}, event1), { extra: {
            bid: '123',
            url: 'init-url',
            context: {},
        } }));
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('fruit', 'apple');
    client.report(event1);
    t.assert(onReport.called);
    t.deepEqual(onReport.args[1][0], __assign(__assign({}, event1), { extra: {
            bid: '123',
            url: 'init-url',
            context: {
                fruit: 'apple',
            },
        } }));
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.delete('fruit');
    (_c = client.context) === null || _c === void 0 ? void 0 : _c.set('fruitDesc', { name: 'banana' });
    client.report(event1);
    t.assert(onReport.calledThrice);
    t.deepEqual(onReport.args[2][0], __assign(__assign({}, event1), { extra: {
            bid: '123',
            url: 'init-url',
            context: {
                fruitDesc: JSON.stringify({ name: 'banana' }),
            },
        } }));
});
test('ContextPlugin - w/o extra', function (t) {
    var _a, _b, _c;
    var send = sinon.fake();
    var client = createTestClient(send);
    ContextPlugin(client);
    client.init({ bid: '123', url: 'init-url' });
    var event1 = { ev_type: 'test', payload: { id: 123 } };
    var onReport = sinon.spy(id);
    client.on('report', onReport);
    t.assert(onReport.notCalled);
    client.report(event1);
    t.assert(onReport.calledOnce);
    t.deepEqual(onReport.args[0][0], __assign(__assign({}, event1), { extra: {
            context: {},
        } }));
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('fruit', 'apple');
    client.report(event1);
    t.assert(onReport.called);
    t.deepEqual(onReport.args[1][0], __assign(__assign({}, event1), { extra: {
            context: {
                fruit: 'apple',
            },
        } }));
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.delete('fruit');
    (_c = client.context) === null || _c === void 0 ? void 0 : _c.set('fruitDesc', { name: 'banana' });
    client.report(event1);
    t.assert(onReport.calledThrice);
    t.deepEqual(onReport.args[2][0], __assign(__assign({}, event1), { extra: {
            context: {
                fruitDesc: JSON.stringify({ name: 'banana' }),
            },
        } }));
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/node_modules/@slardar/sdk-template/esm/plugins/__test__/context.spec.js.map