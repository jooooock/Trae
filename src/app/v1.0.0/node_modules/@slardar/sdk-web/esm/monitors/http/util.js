import { __assign, __read } from "tslib";
import { applyPerformance } from '../../utils';
var headerKeyRe = new RegExp('(cookie|auth|jwt|token|key|ticket|secret|credential|session|password)', 'i');
var headerValueRe = new RegExp('(bearer|session)', 'i');
export var getGetLatestEntryByName = function (performance) {
    var _a = __read(applyPerformance(performance), 5), getEntriesByName = _a[4];
    return function (name) {
        return getEntriesByName(name).pop();
    };
};
export var isSensitiveHeader = function (key, value) {
    if (!key || !value)
        return true;
    return headerKeyRe.test(key) || headerValueRe.test(value);
};
export var applySendOnce = function (cb) {
    var hasInvoked = false;
    return function (metric) {
        if (hasInvoked)
            return;
        hasInvoked = true;
        cb(metric);
    };
};
/**
 * Handles the full URL and payload with optional URL extraction.
 *
 * @param {string} fullUrl - The full URL to handle.
 * @param {HttpPayload} payload - The payload object to handle. Will be mutated in function inside.
 * @param {function} extractUrl - (Optional) A function to extract the URL from the full URL.
 */
export var handleWithExtractUrl = function (payload, extractUrl) {
    try {
        if (extractUrl) {
            var original_url = payload.request.url;
            payload.request.url = extractUrl(original_url);
            payload.extra = __assign(__assign({}, payload.extra), { original_url: original_url });
            // Since PerformanceResourceTiming.toJSON only works for >= Chrome V45,
            // back-end will assign payload.response.timing.name to payload.request.url after data reported
        }
    }
    catch (_e) {
        // do nothing
    }
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/monitors/http/util.js.map