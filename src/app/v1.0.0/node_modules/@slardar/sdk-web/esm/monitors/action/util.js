var PAGE_ACTIVITY_DELAY = 100;
var MAX_PAGE_ACTIVITY_DELAY = 10000;
var ROOT_TAGS = ['BODY', 'HTML', 'HEAD'];
var SVG_TAG = 'SVG';
export var DEFAULT_ATTR_NAME = 'data-apm-action';
/**
 * 控制等待策略和强制结算
 * 结算策略: 没有进行中的请求, 没有dom变更, 没有resource or longTask
 */
export var waitActionComplete = function (cb, forceClear, win) {
    var idleTimer;
    var maxIdleTimer;
    var started = false;
    var notify = function () {
        win.clearTimeout(idleTimer);
        started &&
            (idleTimer = win.setTimeout(function () {
                cb();
            }, PAGE_ACTIVITY_DELAY));
    };
    var start = function () {
        started = true;
        win.clearTimeout(maxIdleTimer);
        maxIdleTimer = win.setTimeout(function () {
            cb();
            forceClear();
        }, MAX_PAGE_ACTIVITY_DELAY);
        notify();
    };
    var complete = function () {
        started = false;
        win.clearTimeout(idleTimer);
        win.clearTimeout(maxIdleTimer);
    };
    return [start, notify, complete];
};
export var isSupportsElementClosest = (function () {
    var supportsElementClosest;
    return function () {
        return supportsElementClosest === undefined
            ? (supportsElementClosest = 'closest' in HTMLElement.prototype)
            : supportsElementClosest;
    };
})();
export var findElementWithAttributeByParents = function (target, attribute, maxParentLoops) {
    if (maxParentLoops === void 0) { maxParentLoops = 10; }
    var element = target;
    for (var i = 0; i < maxParentLoops && element; i++) {
        if (~ROOT_TAGS.indexOf(element.nodeName))
            return;
        if (element.hasAttribute(attribute)) {
            return element;
        }
        element = element.parentElement;
    }
};
export var getActionNameByAttribute = function (target, attribute) {
    var elementWithAttribute;
    if (isSupportsElementClosest()) {
        elementWithAttribute = target.closest("[" + attribute + "]");
    }
    else {
        elementWithAttribute = findElementWithAttributeByParents(target, attribute);
    }
    if (!elementWithAttribute)
        return;
    var name = elementWithAttribute.getAttribute(attribute);
    // Possibly length of name is too long to be stored on backend.Let it go for now.Add truncation if someone oncalled
    return name.trim();
};
export var getActionName = function (target, attribute) {
    return getActionNameByAttribute(target, attribute) || target.innerText;
};
export var isSVGTarget = function (element) {
    var current = element;
    var flag = false;
    while (current) {
        if (current.tagName.toUpperCase() === SVG_TAG) {
            current = null;
            flag = true;
        }
        else {
            current = current.parentElement;
        }
    }
    return flag;
};
export var isElementWithinTwoLevels = function (element) {
    var childElement = element.children;
    return childElement.length ? ![].slice.call(childElement).some(function (c) { return c.children.length > 0; }) : true;
};
export var isValidTarget = function (element) {
    // if not element node or is root element or is svg
    var tagName = element.tagName.toUpperCase();
    if (element.nodeType !== 1 || ROOT_TAGS.includes(tagName) || isSVGTarget(element)) {
        return false;
    }
    // if element display none
    if (element.style && element.style.display === 'none') {
        return false;
    }
    // if is allowed TagName or has special attribute
    if (['A', 'BUTTON', 'INPUT', 'TEXTAREA'].includes(tagName) || getActionNameByAttribute(element, DEFAULT_ATTR_NAME)) {
        return true;
    }
    // if element not within two levels
    if (!isElementWithinTwoLevels(element)) {
        return false;
    }
    return true;
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/monitors/action/util.js.map