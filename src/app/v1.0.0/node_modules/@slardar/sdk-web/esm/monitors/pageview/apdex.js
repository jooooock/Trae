import { __read } from "tslib";
import { SESSION_EV_TYPE, ACTION_EV_TYPE } from '../../constants';
import { now } from '../../utils';
import { calculateApdex, calculateSpentTime, calculateSession, getRank, applyCalculateWight } from './util';
export var apdexGetterWithHiddenObserver = function (report, tearDownGroup, _a, config) {
    var _b = __read(_a, 2), hiddenObserver = _b[0], unloadObserver = _b[1];
    var onlyPageApdex = config.apdex === 2;
    // record last page detail and current page info
    var currentPageInfo = undefined;
    var lastPidPayload = undefined;
    // apdex setting get from server, and not report any thing if not setting
    var apdexSetting = undefined;
    var apdexStarted = false;
    var _c = __read(calculateApdex(), 4), calculateDurationWeight = _c[0], calculateErrorWeight = _c[1], getApdex = _c[2], resetApdex = _c[3];
    var _d = __read(calculateApdex(), 4), calculateSessionDurationWeight = _d[0], calculateSessionErrorWeight = _d[1], getSessionApdex = _d[2], resetSessionApdex = _d[3];
    var _e = __read(calculateSession(), 5), handleUnload = _e[0], handlePageview = _e[1], handleAction = _e[2], setEntry = _e[3], getSessionPayload = _e[4];
    // record spent time
    var _f = __read(calculateSpentTime(), 2), handleHidden = _f[0], getSpentTime = _f[1];
    tearDownGroup.push(hiddenObserver[0](handleHidden));
    // send session event if need
    !onlyPageApdex &&
        tearDownGroup.push(unloadObserver[0](function () {
            if (!apdexStarted)
                return;
            var _a = __read(getSessionApdex(), 2), apdex = _a[0], detail = _a[1];
            var sessionRank = getRank(apdex, apdexSetting);
            handleUnload([sessionRank, apdex, detail], getPagePayload());
            report({
                ev_type: SESSION_EV_TYPE,
                payload: getSessionPayload(),
            });
            resetSessionApdex();
        }));
    var handlePageviewWeight = applyCalculateWight(calculateDurationWeight, calculateErrorWeight);
    var handleSessionWeight = applyCalculateWight(calculateSessionDurationWeight, calculateSessionErrorWeight);
    var handleSend = function (ev) {
        // make sure already have apdex setting and currentPid
        if (!apdexStarted)
            return;
        //  discard asynchronous data to avoid affecting the apdex of the current pid.
        if (ev.common.pid !== currentPageInfo[1])
            return;
        handlePageviewWeight(ev, apdexSetting);
        if (!onlyPageApdex) {
            handleSessionWeight(ev, apdexSetting);
            ev.ev_type === ACTION_EV_TYPE && handleAction();
        }
    };
    var getPagePayload = function () {
        var _a = __read(getApdex(), 2), apdex = _a[0], detail = _a[1];
        return {
            start: currentPageInfo[0],
            pid: currentPageInfo[1],
            view_id: currentPageInfo[2],
            end: now(),
            time_spent: getSpentTime(),
            apdex: apdex,
            rank: getRank(apdex, apdexSetting),
            detail: detail,
        };
    };
    var handlePageviewChange = function (newPid, newViewId) {
        // if no current page info, init current page, else settle current page and reset status
        if (!currentPageInfo) {
            currentPageInfo = [now(), newPid, newViewId];
            // set entry to session
            setEntry(newPid);
            // set started status
            apdexStarted = !!(apdexSetting && currentPageInfo);
            return;
        }
        if (apdexStarted) {
            // set last pid payload
            lastPidPayload = getPagePayload();
            // send last pid payload to session
            handlePageview(lastPidPayload, newPid);
        }
        // reset status
        currentPageInfo = [now(), newPid, newViewId];
        resetApdex();
    };
    var reportPageviewWithApdex = function (ev) {
        apdexStarted && (ev.payload.last = lastPidPayload);
        report(ev);
    };
    var setApdexSetting = function (apdex) {
        if (!apdex) {
            // teardown all effect
            tearDownGroup.forEach(function (e) { return e(); });
            tearDownGroup.length = 0;
            return;
        }
        apdexSetting = apdex;
        apdexStarted = !!(apdexSetting && currentPageInfo);
    };
    tearDownGroup.push(function () {
        apdexStarted = false;
    });
    return [handlePageviewChange, handleSend, reportPageviewWithApdex, setApdexSetting];
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/monitors/pageview/apdex.js.map