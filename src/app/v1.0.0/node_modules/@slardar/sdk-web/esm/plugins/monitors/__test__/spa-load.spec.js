import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { SPALoadMonitorPlugin } from '../spa-load';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test.serial('SPALoadMonitorPlugin', function (t) {
    var client = createTestWebClient();
    SPALoadMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
    });
    client.start();
    // pageview plugin will config pid and viewId once as first PV
    client.config({
        pid: 'pid1',
        viewId: 'viewId1',
    });
    // second PV
    client.config({
        pid: 'pid2',
        viewId: 'viewId2',
    });
    // trigger force settle
    client.config({
        pid: 'pid3',
        viewId: 'viewId3',
    });
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'spa_load',
            isSupport: true,
            isPolyfill: false,
            isBounced: false,
            isCustom: false,
            type: 'perf',
        },
    });
    // trigger force settle
    client.config({
        pid: 'pid4',
        viewId: 'viewId4',
    });
    t.true(onReport.calledTwice);
    t.like(onReport.args[1][0], {
        ev_type: 'performance',
        payload: {
            name: 'spa_load',
            isSupport: true,
            isPolyfill: false,
            isBounced: false,
            isCustom: false,
            type: 'perf',
        },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/plugins/monitors/__test__/spa-load.spec.js.map