import { __read } from "tslib";
import { invokeCallbackOnce } from '../utils';
import { getDefaultBrowser, getDefaultDocument } from '../utils/defaults';
export var HIDDEN_SUBJECT_NAME = 'hidden_2';
export var visibilityStateIsHidden = function (d) { return d.visibilityState === 'hidden'; };
export var observeHidden = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onVisibilityChange = function () {
        next(visibilityStateIsHidden(document));
    };
    addEventListener('visibilitychange', onVisibilityChange, true);
    tearDown(function () {
        removeEventListener('visibilitychange', onVisibilityChange, true);
    }, function (subscriber) {
        subscriber(visibilityStateIsHidden(document));
    });
};
/**
 * When subscribing to hiddenSubject, it's important to note that it may immediately and synchronously trigger.
 */
export var hiddenSubject = [HIDDEN_SUBJECT_NAME, observeHidden];
export var LOAD_SUBJECT_NAME = 'load_1';
export var readyStateIsComplete = function (d) { return d.readyState === 'complete'; };
export var observeLoad = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onceTriggered = false;
    var onLoad = function () {
        setTimeout(function () {
            next();
            onceTriggered = true;
        }, 0);
    };
    if (readyStateIsComplete(document)) {
        onLoad();
    }
    else {
        window.addEventListener('load', onLoad, false);
    }
    tearDown(function () {
        window.removeEventListener('load', onLoad, false);
    }, function (subscriber) {
        onceTriggered && subscriber();
    });
};
/**
 * When subscribing to loadSubject, it's important to note that it may immediately and synchronously trigger.
 */
export var loadSubject = [LOAD_SUBJECT_NAME, observeLoad];
export var UNLOAD_SUBJECT_NAME = 'unload_0';
export var observeUnload = function (next, tearDown) {
    var window = getDefaultBrowser();
    if (!window)
        return;
    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    var _a = __read(invokeCallbackOnce(next), 1), invokeCbOnce = _a[0];
    var unloadEventList = ['unload', 'beforeunload', 'pagehide'];
    var handler = function () {
        invokeCbOnce();
    };
    unloadEventList.forEach(function (ev) {
        window.addEventListener(ev, handler);
    });
    tearDown(function () {
        unloadEventList.forEach(function (ev) {
            window.removeEventListener(ev, handler);
        });
    });
};
export var unloadSubject = [UNLOAD_SUBJECT_NAME, observeUnload];
export var DOM_CONTENT_LOAD_SUBJECT_NAME = 'domLoad_1';
export var observeDOMContentLoad = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onceTriggered = false;
    var onDOMContentLoad = function () {
        setTimeout(function () {
            next();
            onceTriggered = true;
        }, 0);
    };
    if (document.readyState !== 'loading') {
        onDOMContentLoad();
    }
    else {
        window.addEventListener('DOMContentLoaded', onDOMContentLoad, false);
    }
    tearDown(function () {
        window.removeEventListener('DOMContentLoaded', onDOMContentLoad, false);
    }, function (subscriber) {
        onceTriggered && subscriber();
    });
};
/**
 * When subscribing to DOMContentLoadSubject, it's important to note that it may immediately and synchronously trigger.
 */
export var DOMContentLoadSubject = [
    DOM_CONTENT_LOAD_SUBJECT_NAME,
    observeDOMContentLoad,
];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/collector/page.js.map