'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

// eslint-disable-next-line @typescript-eslint/ban-types
function isObject(o) {
    return typeof o === 'object' && o !== null;
}
var objProto = Object.prototype;
function isArray(o) {
    return objProto.toString.call(o) === '[object Array]';
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isFunction(o) {
    return typeof o === 'function';
}
function isString(o) {
    return typeof o === 'string';
}

// 检查数组中是否有元素
function arrayIncludes(array, value) {
    if (!isArray(array)) {
        return false;
    }
    if (array.length === 0) {
        return false;
    }
    var k = 0;
    while (k < array.length) {
        if (array[k] === value) {
            return true;
        }
        k++;
    }
    return false;
}

function getRegexp(ignore) {
    if (!isArray(ignore)) {
        return null;
    }
    return ignore.length ? joinRegExp(ignore) : null;
}
function joinRegExp(patterns) {
    var sources = [];
    var len = patterns.length;
    for (var i = 0; i < len; i++) {
        var pattern = patterns[i];
        if (isString(pattern)) {
            sources.push(pattern.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1'));
        }
        else if (pattern && pattern.source) {
            sources.push(pattern.source);
        }
    }
    return new RegExp(sources.join('|'), 'i');
}

/**
 * 将tearDownGroup 注册到 destroyAgent，destroyAgent会在实例销毁时自动销毁tearDownGroup
 */
var registerTearDownGroup = function (client, pluginName, evType, tearDownGroup) {
    return client.destroyAgent.set(pluginName, evType, tearDownGroup);
};

/**
 * 由于 Observer 带有自动销毁机制，意味着subject 只支持同步注册并使用
 */
function initSubjectInGlobal(client, args) {
    return client.initSubject(args);
}

function getDefaultBrowser() {
    if (typeof window === 'object' && isObject(window))
        return window;
}
function getDefaultDocument() {
    if (typeof document === 'object' && isObject(document))
        return document;
}
function getDefaultPerformance() {
    if (getDefaultBrowser() && isObject(window.performance))
        return window.performance;
}
function getDefaultPerformanceObserver() {
    if (getDefaultBrowser() && isFunction(window.PerformanceObserver))
        return window.PerformanceObserver;
}

var applyPerformance = function (performance) {
    // eslint-disable-next-line compat/compat
    var timing = (performance && performance.timing) || undefined;
    var now = function () {
        if (performance && performance.now)
            return performance.now();
        var time = Date.now ? Date.now() : +new Date();
        var start = (timing && timing.navigationStart) || 0;
        return time - start;
    };
    var getEntriesByType = function (type) {
        var getEntriesByType = (performance || {}).getEntriesByType;
        return (isFunction(getEntriesByType) && getEntriesByType.call(performance, type)) || [];
    };
    var getEntriesByName = function (name) {
        var getEntriesByName = (performance || {}).getEntriesByName;
        return (isFunction(getEntriesByName) && getEntriesByName.call(performance, name)) || [];
    };
    var clearResourceTiming = function () {
        var clearResourceTimings = (performance || {}).clearResourceTimings;
        isFunction(clearResourceTimings) && clearResourceTimings.call(performance);
    };
    return [timing, now, getEntriesByType, clearResourceTiming, getEntriesByName];
};

var getConfig = function (c, defaultConfig) {
    if (isObject(c)) {
        return __assign(__assign({}, defaultConfig), c);
    }
    else {
        return c ? defaultConfig : false;
    }
};

var RESOURCE_TYPE = ['resource']; // used by resourceMonitor / resourceErrorMonitor / HttpMonitor
var applyPerformanceObserver = function (PerformanceObserver, callback, onFail) {
    var observer = PerformanceObserver &&
        new PerformanceObserver(function (list, ob) {
            if (list.getEntries) {
                list.getEntries().forEach(function (val, i, arr) { return callback(val, i, arr, ob); });
            }
            else {
                onFail && onFail();
            }
        });
    var observe = function (types) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ entryTypes: types });
        }
        catch (_a) {
            return onFail && onFail();
        }
    };
    var bufferedObserver = function (type) {
        if (!PerformanceObserver || !observer)
            return onFail && onFail();
        try {
            observer.observe({ type: type, buffered: true });
        }
        catch (_a) {
            return onFail && onFail();
        }
        observer.observe({ type: type, buffered: false });
    };
    var disconnect = function () { return observer && observer.disconnect(); };
    return [observe, bufferedObserver, disconnect];
};
var observePerf = function (Ob, pipe, types) {
    var _a = __read(applyPerformanceObserver(Ob, pipe), 3), observe = _a[0], disconnect = _a[2];
    observe(types);
    return disconnect;
};
var RESOURCE_SUBJECT_NAME = 'resource_0';
var observeResource = function (next, tearDown) {
    var PerformanceObserver = getDefaultPerformanceObserver();
    if (!PerformanceObserver)
        return;
    tearDown(observePerf(PerformanceObserver, next, RESOURCE_TYPE));
};
var resourceSubject = [RESOURCE_SUBJECT_NAME, observeResource];

var RESOURCE_EV_TYPE = 'resource';

function getPluginConfig(client, pluginName, defaultConfig) {
    var _a;
    var c = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[pluginName];
    return getConfig(c, defaultConfig);
}

var LOAD_SUBJECT_NAME = 'load_1';
var readyStateIsComplete = function (d) { return d.readyState === 'complete'; };
var observeLoad = function (next, tearDown) {
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (!window || !document)
        return;
    var onceTriggered = false;
    var onLoad = function () {
        setTimeout(function () {
            next();
            onceTriggered = true;
        }, 0);
    };
    if (readyStateIsComplete(document)) {
        onLoad();
    }
    else {
        window.addEventListener('load', onLoad, false);
    }
    tearDown(function () {
        window.removeEventListener('load', onLoad, false);
    }, function (subscriber) {
        onceTriggered && subscriber();
    });
};
/**
 * When subscribing to loadSubject, it's important to note that it may immediately and synchronously trigger.
 */
var loadSubject = [LOAD_SUBJECT_NAME, observeLoad];

var RESOURCE_PERFORMANCE_ENTRY_TYPE = 'resource';
var RESOURCE_IGNORE_TYPES = ['xmlhttprequest', 'fetch', 'beacon'];
var resourceGetterWithContext = function (report, tearDownGroup, _a, config) {
    var _b = __read(_a, 2), loadObserver = _b[0], getResourceObserver = _b[1];
    var performance = getDefaultPerformance();
    if (!performance)
        return;
    var ignoreUrls = config.ignoreUrls, slowSessionThreshold = config.slowSessionThreshold, ignoreTypes = config.ignoreTypes;
    var ignoreRegExp = getRegexp(ignoreUrls);
    var reportResource = function (entry, isSlowSession) {
        if (isSlowSession === void 0) { isSlowSession = false; }
        if (arrayIncludes(ignoreTypes || RESOURCE_IGNORE_TYPES, entry.initiatorType) ||
            (ignoreRegExp && ignoreRegExp.test(entry.name)))
            return;
        var data = { ev_type: RESOURCE_EV_TYPE, payload: entry };
        isSlowSession && (data.extra = { sample_rate: 1 });
        report(data);
    };
    tearDownGroup.push(loadObserver[0](function () {
        var _a = __read(applyPerformance(performance), 3), timing = _a[0], getEntriesByType = _a[2];
        // make sure all resource of slow session can be reported
        var checkSlowSession = function () {
            if (!timing) {
                return false;
            }
            var loadTime = timing.loadEventEnd - timing.navigationStart;
            return loadTime > slowSessionThreshold;
        };
        var isSlowSession = checkSlowSession();
        var cacheEntries = getEntriesByType(RESOURCE_PERFORMANCE_ENTRY_TYPE);
        cacheEntries.forEach(function (e) { return reportResource(e, isSlowSession); });
        tearDownGroup.push(getResourceObserver()[0](function (entry) {
            reportResource(entry);
        }));
    }));
};

var RESOURCE_MONITOR_PLUGIN_NAME = 'resource';
var defaultConfig = {
    ignoreUrls: [],
    slowSessionThreshold: 4000,
};
function ResourceMonitorPlugin(client) {
    client.on('init', function () {
        var config = getPluginConfig(client, RESOURCE_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        resourceGetterWithContext(client.report.bind(client), tearDownGroup, [initSubjectInGlobal(client, loadSubject), function () { return initSubjectInGlobal(client, resourceSubject); }], config);
        registerTearDownGroup(client, RESOURCE_MONITOR_PLUGIN_NAME, RESOURCE_EV_TYPE, tearDownGroup);
    });
}

var RESOURCE_INTEGRATION_NAME = RESOURCE_MONITOR_PLUGIN_NAME;
var resourcePlugin = function () { return ({
    name: RESOURCE_INTEGRATION_NAME,
    setup: function (client) {
        ResourceMonitorPlugin(client);
    },
}); };

exports.RESOURCE_INTEGRATION_NAME = RESOURCE_INTEGRATION_NAME;
exports.resourcePlugin = resourcePlugin;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/dist/resource.js.map
