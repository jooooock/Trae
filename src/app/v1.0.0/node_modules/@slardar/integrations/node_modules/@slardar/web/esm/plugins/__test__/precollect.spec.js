import test from 'ava';
import sinon from 'sinon';
import { toObservableArray } from 'web/src/util';
import { createTestWebClient } from '../../__test__/util';
import { getStoreOrConsume, getConsumeStored, PrecollectPlugin, createStore, reverseMap, EV_METHOD_MAP, filterIfPluginDisabled, } from '../precollect';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('storeOrConsume - store', function (t) {
    var client = createTestWebClient();
    client.init({
        bid: 'bid',
        pid: 'init-pid',
    });
    var evMap = {
        err: 'capture',
    };
    var store = createStore(evMap);
    var storeOrConsume = getStoreOrConsume(client, store, evMap);
    var err = new Error('test error');
    storeOrConsume('err', err, 300, 'captured-url');
    t.assert(store.err);
    t.is(store.err[0][0], err);
    t.like(store.err[0][1], {
        pid: 'init-pid',
        url: 'captured-url',
        timestamp: 300,
    });
});
test('storeOrConsume - consume', function (t) {
    var _a;
    var client = createTestWebClient();
    var capture = sinon.spy(function (e) {
        client.report({
            ev_type: 'js_error',
            payload: {
                error: e,
                breadcrumbs: [],
            },
        });
    });
    var onBuild = sinon.fake();
    client.provide('capture', capture);
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
        pid: 'init-pid',
    });
    client.start();
    var evMap = {
        err: 'capture',
    };
    var store = createStore(evMap);
    var storeOrConsume = getStoreOrConsume(client, store, evMap);
    var err = new Error('test error');
    storeOrConsume('err', err, 300, 'captured-url');
    t.is((_a = store.err) === null || _a === void 0 ? void 0 : _a.length, 0);
    t.assert(capture.calledOnce);
    t.assert(onBuild.calledOnce);
    t.like(onBuild.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: err,
            breadcrumbs: [],
        },
        overrides: {
            url: 'captured-url',
            timestamp: 300,
        },
    });
});
test('consumeStored', function (t) {
    var client = createTestWebClient();
    var capture = sinon.spy(function (e) {
        client.report({
            ev_type: 'js_error',
            payload: {
                error: e,
                breadcrumbs: [],
            },
        });
    });
    client.provide('capture', capture);
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
        pid: 'init-pid',
    });
    client.start();
    var evMap = {
        err: 'capture',
    };
    var store = createStore(evMap);
    var evMethods = reverseMap(evMap);
    var storeOrConsume = getStoreOrConsume(client, store, evMap);
    var consumeStored = getConsumeStored(client, store, evMethods);
    var err = new Error('test error');
    storeOrConsume('err', err, 300, 'captured-url');
    consumeStored('capture');
    t.is(store.err, null);
    t.assert(capture.calledOnce);
    t.assert(onBuild.calledOnce);
    t.like(onBuild.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: err,
            breadcrumbs: [],
        },
        overrides: {
            url: 'captured-url',
            timestamp: 300,
        },
    });
});
test('PrecollectPlugin', function (t) {
    var _a, _b, _c;
    var evMap = {
        err: 'capture',
        err2: 'capture2',
    };
    var err = new Error('test error');
    var client = createTestWebClient();
    // provide before plugin
    var capture = sinon.spy(function (e) {
        client.report({
            ev_type: 'js_error',
            payload: {
                error: e,
                breadcrumbs: [],
            },
        });
    });
    client.provide('capture', capture);
    client.p = { a: toObservableArray([['precollect', 'err', err, 100, 'captured-url']]) };
    PrecollectPlugin(client, evMap);
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
        pid: 'init-pid',
    });
    client.start();
    t.assert(capture.calledOnce);
    t.assert(onBuild.calledOnce);
    t.like(onBuild.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: err,
            breadcrumbs: [],
        },
        overrides: {
            url: 'captured-url',
            pid: 'init-pid',
            timestamp: 100,
        },
    });
    (_a = client.precollect) === null || _a === void 0 ? void 0 : _a.call(client, 'err', err, 300, 'captured-url2');
    client.config({
        pid: 'pid2',
    });
    (_b = client.p) === null || _b === void 0 ? void 0 : _b.a.push(['precollect', 'err2', err, 800, 'captured-url3']);
    client.config({
        pid: 'another-pid',
    });
    client.provide('capture2', capture);
    // this will be ignored since err events already consumed
    (_c = client.precollect) === null || _c === void 0 ? void 0 : _c.call(client, 'err2', err, 1200, 'captured-url4');
    t.assert(capture.calledThrice);
    t.assert(onBuild.calledThrice);
    t.like(onBuild.args[1][0], {
        ev_type: 'js_error',
        payload: {
            error: err,
            breadcrumbs: [],
        },
        overrides: {
            url: 'captured-url2',
            pid: 'init-pid',
            timestamp: 300,
        },
    });
    t.like(onBuild.args[2][0], {
        ev_type: 'js_error',
        payload: {
            error: err,
            breadcrumbs: [],
        },
        overrides: {
            url: 'captured-url3',
            pid: 'pid2',
            timestamp: 800,
        },
    });
});
test('filterIfPluginDisabled', function (t) {
    var client = createTestWebClient();
    client.init({
        bid: 'test',
        pid: 'init-pid',
        plugins: {
            jsError: {
                onerror: false,
            },
        },
    });
    t.is(filterIfPluginDisabled(client.config(), 'err'), false);
    t.is(filterIfPluginDisabled(client.config(), 'reject'), true);
    var client2 = createTestWebClient();
    client2.init({
        bid: 'test',
        pid: 'init-pid',
        plugins: {
            jsError: {
                onunhandledrejection: false,
            },
        },
    });
    t.is(filterIfPluginDisabled(client2.config(), 'reject'), false);
});
test('PrecollectPlugin - filterIfPluginDisabled - onerror', function (t) {
    var err = new Error('test error');
    var captureException = sinon.fake();
    var client = createTestWebClient();
    client.p = { a: [['precollect', 'err', err, 100, 'captured-url']] };
    client.provide('captureException', captureException);
    PrecollectPlugin(client, EV_METHOD_MAP);
    client.init({
        bid: 'test',
        pid: 'init-pid',
        plugins: {
            jsError: {
                onerror: false,
            },
        },
    });
    client.start();
    t.assert(captureException.notCalled);
});
test('PrecollectPlugin - filterIfPluginDisabled - onunhandledrejection', function (t) {
    var err = new Error('test error');
    var captureException = sinon.fake();
    var client = createTestWebClient();
    client.p = { a: [['precollect', 'reject', err, 100, 'captured-url']] };
    client.provide('captureException', captureException);
    PrecollectPlugin(client, EV_METHOD_MAP);
    client.init({
        bid: 'test',
        pid: 'init-pid',
        plugins: {
            jsError: {
                onunhandledrejection: false,
            },
        },
    });
    client.start();
    t.assert(captureException.notCalled);
});
test('PrecollectPlugin - filterIfPluginDisabled - observer', function (t) {
    var err = new Error('test error');
    var captureException = sinon.fake();
    var client = createTestWebClient();
    client.p = { a: toObservableArray([['precollect', 'err', err, 100, 'captured-url']]) };
    client.provide('captureException', captureException);
    PrecollectPlugin(client, EV_METHOD_MAP);
    client.init({
        bid: 'test',
        pid: 'init-pid',
        plugins: {
            jsError: {
                onunhandledrejection: false,
            },
        },
    });
    client.start();
    t.assert(captureException.calledOnce);
    client.p.a.push(['precollect', 'reject', err, 100, 'captured-url']);
    t.assert(captureException.calledOnce);
    client.p.a.push(['precollect', 'err', err, 100, 'captured-url']);
    t.assert(captureException.calledTwice);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/web/esm/plugins/__test__/precollect.spec.js.map