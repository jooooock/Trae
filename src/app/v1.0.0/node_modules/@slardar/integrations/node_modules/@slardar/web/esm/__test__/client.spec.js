import test from 'ava';
import { JsErrorMonitorPlugin } from 'sdk-web/src/plugins';
import sinon from 'sinon';
import { getDefaultBrowser, getGlobalRegistry } from '@slardar/sdk-web';
import { PluginMap, createBrowserClient } from '../client';
import { createMinimalBrowserClient } from '../minimal';
import { proxyLocalStorage } from './util';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    proxyLocalStorage();
});
test('createMinimalBrowserClient', function (t) {
    var client = createMinimalBrowserClient();
    t.assert(client.context);
    var onBeforeSend = sinon.fake();
    client('on', 'beforeSend', onBeforeSend);
    client('init', {
        bid: 'bid',
        pid: 'init-pid',
        useLocalConfig: true,
    });
    client('context.set', 'afterInit', true);
    client('captureException', new Error('test error'));
    client('config', {
        pid: 'another-pid',
    });
    client('context.set', 'beforeStart', true);
    client('context.delete', 'afterInit');
    client('start');
    t.assert(onBeforeSend.notCalled);
    JsErrorMonitorPlugin(client);
    t.assert(onBeforeSend.calledOnce);
    t.like(onBeforeSend.args[0][0], {
        ev_type: 'js_error',
        payload: {
            error: {
                name: 'Error',
                message: 'test error',
            },
            breadcrumbs: [],
        },
        common: {
            bid: 'bid',
            pid: 'init-pid',
            url: 'about:blank',
            context: {
                afterInit: 'true',
            },
        },
    });
});
test.serial('createMinimalBrowserClient with integrations', function (t) {
    var register = getGlobalRegistry(getDefaultBrowser());
    register.plugins = [];
    var client = createMinimalBrowserClient();
    t.assert(client.context);
    var fakeFn = sinon.fake();
    var testIntegrationName = 'test_integration';
    var testIntegrationSetup = function (client) {
        client.on('init', function () {
            fakeFn();
        });
    };
    var testIntegration = function () { return ({
        name: testIntegrationName,
        setup: testIntegrationSetup,
    }); };
    client('init', {
        bid: 'bid',
        integrations: [testIntegration()],
        useLocalConfig: true,
    });
    t.assert(fakeFn.calledOnce);
    t.is(window.__SLARDAR_REGISTRY__.Slardar.plugins[0].name, testIntegrationName);
    t.is(window.__SLARDAR_REGISTRY__.Slardar.plugins[0].apply, testIntegrationSetup);
});
test.serial('createBrowserClient', function (t) {
    var register = getGlobalRegistry(getDefaultBrowser());
    register.plugins = [];
    var client = createBrowserClient();
    client.init({
        bid: 'bid',
        pid: 'pid',
    });
    t.assert(client.precollect);
    t.assert(client.sendEvent);
    t.assert(client.sendPageview);
    t.falsy(client.sendCustomPerfMetric);
    var PluginKeys = Object.keys(PluginMap);
    t.true(window.__SLARDAR_REGISTRY__.Slardar.plugins.length > 0);
    t.true(window.__SLARDAR_REGISTRY__.Slardar.plugins.every(function (v) { return PluginKeys.includes(v.name); }));
});
test('createBrowserClient - create', function (t) {
    var client = createBrowserClient();
    t.assert(client.create);
    var client2 = client.create();
    client2.init({
        bid: 'bid2',
        pid: 'pid2',
    });
    t.assert(client2.sendEvent);
    t.assert(client2.create);
    t.assert(client2.sendPageview);
    t.is(typeof client2, 'function');
    t.falsy(client2.sendCustomPerfMetric);
});
test('call transport get', function (t) {
    var client = createMinimalBrowserClient();
    var transportGet = sinon.fake();
    var transportPost = sinon.fake();
    var transport = { get: transportGet, post: transportPost };
    client.init({
        bid: '0',
        pid: 'init-pid',
        useLocalConfig: false,
        transport: transport,
    });
    client('start');
    t.assert(transportGet.calledOnce);
    t.like(transportGet.args[0][0], {
        withCredentials: true,
    });
});
test('call transport post', function (t) {
    var _a;
    var client = createMinimalBrowserClient();
    var transportGet = sinon.fake();
    var transportPost = sinon.fake();
    var transport = { get: transportGet, post: transportPost };
    client.init({
        bid: '0',
        pid: 'init-pid',
        useLocalConfig: true,
        transport: transport,
    });
    client('start');
    JsErrorMonitorPlugin(client);
    client('captureException', new Error('test error'));
    (_a = client.getSender()) === null || _a === void 0 ? void 0 : _a.flush();
    t.assert(transportPost.calledOnce);
    t.is(typeof transportPost.args[0][0].data, 'string');
    t.is(typeof transportPost.args[0][0].url, 'string');
});
test("'storageExpires: true' should work in Client.init", function (t) {
    var client = createMinimalBrowserClient();
    var client_2 = createMinimalBrowserClient();
    var transportGet = sinon.fake();
    var transportPost = sinon.fake();
    var transport = { get: transportGet, post: transportPost };
    client.init({
        bid: '2',
        pid: 'init-pid',
        useLocalConfig: true,
        storageExpires: undefined,
        transport: transport,
    });
    client('start');
    var client_1_config = client.config();
    client_2.init({
        bid: '2',
        pid: 'init-pid',
        useLocalConfig: true,
        storageExpires: undefined,
        transport: transport,
    });
    client('start');
    var client_2_config = client_2.config();
    t.is(client_1_config.deviceId, client_2_config.deviceId);
    t.is(client_1_config.userId, client_2_config.userId);
});
test("'storageExpires: false' should work in Client.init", function (t) {
    var client = createMinimalBrowserClient();
    var client_2 = createMinimalBrowserClient();
    var transportGet = sinon.fake();
    var transportPost = sinon.fake();
    var transport = { get: transportGet, post: transportPost };
    client.init({
        bid: '2',
        pid: 'init-pid',
        useLocalConfig: true,
        storageExpires: false,
        transport: transport,
    });
    client('start');
    var client_1_config = client.config();
    client_2.init({
        bid: '2',
        pid: 'init-pid',
        useLocalConfig: true,
        storageExpires: false,
        transport: transport,
    });
    client('start');
    var client_2_config = client_2.config();
    t.not(client_1_config.deviceId, client_2_config.deviceId);
    t.not(client_1_config.userId, client_2_config.userId);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/web/esm/__test__/client.spec.js.map