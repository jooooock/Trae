import { __awaiter, __generator, __values } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { FetchMonitorPlugin } from '../fetch';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
/* eslint-disable compat/compat */
var virtualFetch = function (_url, _options) {
    return new Promise(function (resolve) {
        resolve({
            status: 200,
            headers: {
                'content-type': 'application/json',
                header_1: 'value_1',
            },
            clone: function () {
                return {
                    json: function () {
                        return new Promise(function (resolve_1) {
                            resolve_1('res body');
                        });
                    },
                };
            },
        });
    });
};
var sleep = function (time) {
    if (time === void 0) { time = 1100; }
    return new Promise(function (resolve) {
        setTimeout(resolve, time);
    });
};
test.serial('FetchMonitorPlugin - ignoreUrls', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var client, onReport;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                window.fetch = virtualFetch;
                client = createTestWebClient();
                onReport = sinon.fake();
                FetchMonitorPlugin(client);
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        fetch: {
                            ignoreUrls: ['test.com'],
                        },
                    },
                });
                client.on('report', onReport);
                return [4 /*yield*/, window.fetch('http://test.com')];
            case 1:
                _a.sent();
                return [4 /*yield*/, sleep()];
            case 2:
                _a.sent();
                t.true(onReport.notCalled);
                return [2 /*return*/];
        }
    });
}); });
test.serial('FetchMonitorPlugin - extraExtractor should work', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    function ForkHeader(h) {
        this.headers = h;
    }
    var target, client, onReport;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                target = {
                    reqBody: 'req=123',
                    resBody: JSON.stringify({ res: 'test' }),
                };
                window.fetch = virtualFetch;
                window.Request = function () { };
                ForkHeader.prototype.forEach = function (cb) {
                    var e_1, _a;
                    var headerKey = Object.keys(this.headers);
                    try {
                        for (var headerKey_1 = __values(headerKey), headerKey_1_1 = headerKey_1.next(); !headerKey_1_1.done; headerKey_1_1 = headerKey_1.next()) {
                            var i = headerKey_1_1.value;
                            cb(this.headers[i], i);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (headerKey_1_1 && !headerKey_1_1.done && (_a = headerKey_1.return)) _a.call(headerKey_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                };
                window.Headers = ForkHeader;
                global.fetch = window.fetch;
                client = createTestWebClient();
                onReport = sinon.fake();
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        fetch: {
                            extraExtractor: function (resBody, _related, reqBody) {
                                t.is(reqBody, target.reqBody);
                                t.is(resBody, 'res body');
                                return {
                                    param: 'test',
                                };
                            },
                        },
                    },
                });
                FetchMonitorPlugin(client);
                client.on('report', onReport);
                return [4 /*yield*/, window.fetch('http://www.test.com', {
                        body: target.reqBody,
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, sleep()];
            case 2:
                _a.sent();
                t.true(onReport.calledOnce);
                t.is(onReport.args[0][0].ev_type, 'http');
                t.deepEqual(onReport.args[0][0].payload.extra, {
                    param: 'test',
                });
                return [2 /*return*/];
        }
    });
}); });
test.serial('FetchMonitorPlugin - disable', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var target, client, onReport;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                target = {
                    reqBody: 'req=123',
                    resBody: JSON.stringify({ res: 'test' }),
                };
                window.fetch = virtualFetch;
                window.Request = function () { };
                window.Headers = function () { };
                global.fetch = window.fetch;
                client = createTestWebClient();
                onReport = sinon.fake();
                client.init({
                    pid: 'init-pid',
                    plugins: {
                        fetch: false,
                    },
                });
                FetchMonitorPlugin(client);
                client.on('report', onReport);
                return [4 /*yield*/, window.fetch('http://www.test.com', {
                        body: target.reqBody,
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, sleep()];
            case 2:
                _a.sent();
                t.true(onReport.notCalled);
                return [2 /*return*/];
        }
    });
}); });//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/plugins/monitors/__test__/fetch.spec.js.map