import { __assign, __read } from "tslib";
import { log, safeVisit } from '@slardar/sdk-template';
import { syncReportWithCapturedContext, captureCurrentContext, now, JS_ERROR_MONITOR_PLUGIN_NAME, } from '@slardar/sdk-web';
export var EV_METHOD_MAP = {
    sri: 'reportSri',
    st: 'reportResourceError',
    err: 'captureException',
    reject: 'captureException',
};
export var createStore = function (evMap) {
    return Object.keys(evMap).reduce(function (prev, cur) {
        prev[cur] = [];
        return prev;
    }, {});
};
export var reverseMap = function (map) {
    return Object.keys(map).reduce(function (prev, cur) {
        if (prev[map[cur]])
            prev[map[cur]].push(cur);
        else
            prev[map[cur]] = [cur];
        return prev;
    }, {});
};
export var getStoreOrConsume = function (client, store, evMap) {
    return function (type, data, timestamp, url) {
        var _a;
        if (timestamp === void 0) { timestamp = now(); }
        if (url === void 0) { url = location.href; }
        log('[precollect].storeOrConsume', type, data, timestamp, url);
        var capturedContext = __assign(__assign({}, captureCurrentContext(client)), { url: url, timestamp: timestamp });
        if (store[type]) {
            if (client[evMap[type]]) {
                syncReportWithCapturedContext(client, capturedContext)(function () {
                    client[evMap[type]](data);
                });
            }
            else {
                (_a = store[type]) === null || _a === void 0 ? void 0 : _a.push([data, capturedContext]);
            }
        }
    };
};
export var getConsumeStored = function (client, store, evMethods) { return function (name) {
    if (name in evMethods) {
        log('[precollect].consumeStored', evMethods[name]);
        evMethods[name].forEach(function (e) {
            var _a;
            (_a = store[e]) === null || _a === void 0 ? void 0 : _a.forEach(function (_a) {
                var _b = __read(_a, 2), event = _b[0], capturedContext = _b[1];
                syncReportWithCapturedContext(client, capturedContext)(function () {
                    client[name](event);
                });
            });
            // 置空，不再消费
            store[e] = null;
            log('[precollect] stop consuming', evMethods[name]);
        });
    }
}; };
export var filterIfPluginDisabled = function (config, type) {
    if (type === 'err') {
        return (safeVisit(config, "plugins." + JS_ERROR_MONITOR_PLUGIN_NAME + ".onerror", function (target, property) { return target[property]; }) !==
            false);
    }
    if (type === 'reject') {
        return (safeVisit(config, "plugins." + JS_ERROR_MONITOR_PLUGIN_NAME + ".onunhandledrejection", function (target, property) { return target[property]; }) !== false);
    }
    return true;
};
export var PrecollectPlugin = function (client, evMap) {
    var _a;
    if (evMap === void 0) { evMap = EV_METHOD_MAP; }
    var store = createStore(evMap);
    var evMethods = reverseMap(evMap);
    var storeOrConsume = getStoreOrConsume(client, store, evMap);
    // 继续消费后续预收集数据
    if (((_a = client.p) === null || _a === void 0 ? void 0 : _a.a) && 'observe' in client.p.a) {
        log('[precollect] observe precollect array');
        // 注册预收集消费回调
        client.p.a.observe(function (_a) {
            var _b = __read(_a, 5), _pc = _b[0], type = _b[1], data = _b[2], timestamp = _b[3], url = _b[4];
            var config = client.config();
            filterIfPluginDisabled(config, type) && storeOrConsume(type, data, timestamp, url);
        });
    }
    client.on('init', function () {
        var _a;
        // 消费已经收集的预收集数据
        var config = client.config();
        (_a = client.p) === null || _a === void 0 ? void 0 : _a.a.forEach(function (_a) {
            var _b = __read(_a, 5), _pc = _b[0], type = _b[1], data = _b[2], timestamp = _b[3], url = _b[4];
            filterIfPluginDisabled(config, type) && storeOrConsume(type, data, timestamp, url);
        });
        // 由于已经消费，置空所有预收集的数据
        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
        client.p && client.p.a && (client.p.a.length = 0);
        // 消费后续的预收集
        client.provide('precollect', function (type, data, timestamp, url) {
            if (timestamp === void 0) { timestamp = now(); }
            if (url === void 0) { url = location.href; }
            filterIfPluginDisabled(config, type) && storeOrConsume(type, data, timestamp, url);
        });
    });
    // consume stored data when provided
    client.on('provide', getConsumeStored(client, store, evMethods));
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/web/esm/plugins/precollect.js.map