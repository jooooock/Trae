import { __awaiter, __generator } from "tslib";
import ava from 'ava';
import sinon from 'sinon';
import { observeDOMContentLoad, observeLoad, observeHidden, readyStateIsComplete, visibilityStateIsHidden, } from '../page';
import { createSafeObserverWithNext } from './common';
var browserEnv = require('browser-env');
var test = ava;
test.beforeEach(function (t) {
    t.context.clock = sinon.useFakeTimers();
});
test.afterEach(function (t) {
    t.context.clock.restore();
});
test.serial('observeDOMContentLoad - no window', function (t) {
    t.assert(typeof window === 'undefined');
    var nextStub = sinon.stub();
    var subject = createSafeObserverWithNext(observeDOMContentLoad);
    subject.subscribe(nextStub);
    t.assert(nextStub.notCalled);
});
test.serial('observeLoad - no window', function (t) {
    t.assert(typeof window === 'undefined');
    var nextStub = sinon.stub();
    var subject = createSafeObserverWithNext(observeLoad);
    subject.subscribe(nextStub);
    t.assert(nextStub.notCalled);
});
test.serial('readyStateIsComplete - loading', function (t) {
    browserEnv();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('loading');
    t.false(readyStateIsComplete(document));
    sb.restore();
});
test.serial('readyStateIsComplete - complete', function (t) {
    browserEnv();
    var sb = sinon.createSandbox();
    sb.stub(document, 'readyState').value('complete');
    t.true(readyStateIsComplete(document));
    sb.restore();
});
test.serial('visibilityStateIsHidden - visible', function (t) {
    browserEnv();
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('visible');
    t.false(visibilityStateIsHidden(document));
    sb.restore();
});
test.serial('visibilityStateIsHidden - hidden', function (t) {
    browserEnv();
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('hidden');
    t.true(visibilityStateIsHidden(document));
    sb.restore();
});
test.serial('observeDOMContentLoad - loading', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var sb, nextStub, subject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                browserEnv();
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('loading');
                nextStub = sinon.stub();
                subject = createSafeObserverWithNext(observeDOMContentLoad);
                subject.subscribe(nextStub);
                t.assert(nextStub.notCalled);
                window.dispatchEvent(new window.Event('DOMContentLoaded'));
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(nextStub.calledOnce);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('observeDOMContentLoad - interactive', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var sb, nextStub, subject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('interactive');
                nextStub = sinon.stub();
                subject = createSafeObserverWithNext(observeDOMContentLoad);
                subject.subscribe(nextStub);
                t.assert(nextStub.notCalled);
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(nextStub.calledOnce);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('observeDOMContentLoad - complete', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var sb, nextStub, subject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('complete');
                nextStub = sinon.stub();
                subject = createSafeObserverWithNext(observeDOMContentLoad);
                subject.subscribe(nextStub);
                t.assert(nextStub.notCalled);
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(nextStub.calledOnce);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('observeLoad - loading', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var sb, nextStub, subject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('loading');
                nextStub = sinon.stub();
                subject = createSafeObserverWithNext(observeLoad);
                subject.subscribe(nextStub);
                t.assert(nextStub.notCalled);
                window.dispatchEvent(new window.Event('load'));
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(nextStub.calledOnce);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('observeLoad - complete', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var sb, nextStub, subject;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                sb = sinon.createSandbox();
                sb.stub(document, 'readyState').value('complete');
                nextStub = sinon.stub();
                subject = createSafeObserverWithNext(observeLoad);
                subject.subscribe(nextStub);
                t.assert(nextStub.notCalled);
                t.context.clock.tick(10);
                // eslint-disable-next-line compat/compat
                return [4 /*yield*/, Promise.resolve()];
            case 1:
                // eslint-disable-next-line compat/compat
                _a.sent();
                t.assert(nextStub.calledOnce);
                sb.restore();
                return [2 /*return*/];
        }
    });
}); });
test.serial('observeHidden', function (t) {
    var sb = sinon.createSandbox();
    sb.stub(document, 'visibilityState').value('prerender');
    var nextStub = sinon.fake();
    var subject = createSafeObserverWithNext(observeHidden);
    subject.subscribe(nextStub);
    t.assert(nextStub.calledOnce);
    t.false(nextStub.args[0][0]);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(nextStub.calledTwice);
    t.false(nextStub.args[1][0]);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.assert(nextStub.calledThrice);
    t.true(nextStub.args[2][0]);
    sb.stub(document, 'visibilityState').value('visible');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.false(nextStub.args[3][0]);
    sb.stub(document, 'visibilityState').value('hidden');
    window.dispatchEvent(new window.Event('visibilitychange'));
    t.true(nextStub.args[4][0]);
    sb.restore();
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/collector/__test__/page.spec.js.map