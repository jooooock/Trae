{
  "name": "@logsdk/node-plugin-http",
  "version": "3.4.0",
  "description": "",
  "main": "lib/index.js",
  "engines": {
    "node": ">=10.0.0"
  },
  "types": "lib/index.d.ts",
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@logsdk/node-utils": "^3.0.6",
    "got": "^11.8.2"
  },
  "devDependencies": {
    "typescript": "^4.6.4"
  },
  "scripts": {
    "build": "npm run clean && tsc --build tsconfig.build.json",
    "clean": "rm -rf ./lib",
    "test": "jest"
  },
  "readme": "## @logsdk/node-plugin-http\n\n### What's this\n\nThis plugin sends events through `http` request.\n\n### When to use it\n\nIf you are developing a `cli` application, or `databus` is not available in your server env, then you have this option.\n\n### Usage\n\n```ts\nimport { TeaSDK } from '@dp/tea-sdk-node';\nimport { httpPlugin } from '@logsdk/node-plugin-http';\n\nconst teaSDK = new TeaSDK({\n  app_id: 1234,\n  logLevel: 'verbose',\n});\nconst httpPluginController = httpPlugin({\n  channel: 'cn',\n  event_verify_url: 'https://mcs.bytedance.net/v1/list_test',\n  retry: 5,\n});\n\n// listen for event pool drain\nhttpPluginController.on('drain', (options) => {\n  // gracefully cleanup\n});\nhttpPluginController.on('end', ({ event, hasSucceed }) => {\n  // listen for each event send result\n});\n\nteaSDK.use(httpPluginController);\n\nteaSDK.collect('test_events_from_http', {\n  payload: 'data',\n});\n```\n\n### Changelog\n\n`[3.4.0]`\n- ab test support https://bytedance.feishu.cn/wiki/wikcnkkaOyBkDaLelksb8kyNUfe\n\n`[3.3.1]`\n- fix `too many events` error \n\n`[3.3.0]`\n- migrate default report domain of `cn` region from `mcs.snssdk.com` to `mcs.zijieapi.com`\n\n`[3.2.2]`\n- fix unhandled promise rejection from got\n\n`[3.2.1]`\n\n- update deps descriptions\n\n`[3.2.0]`\n\n- Support `EventEmitter` API.\n- initialization option `onEnd` is deprecated, listen for `end` event instead.\n\n`[3.1.1]`\n\n- `onEnd` will wait until both `byteio` & `mario` events being sent.\n\n`[3.1.0]`\n\n- `timeout` support\n- use `onEnd(event: MarioEvent, hasSuccess: boolean): void` to listen for events sending status\n\n```ts\nteaSDK.use(\n  httpPlugin({\n    // this plugin use package `got` underneath, option `timeout` will be passed directly to `got`\n    // so you may refer to https://github.com/sindresorhus/got/blob/HEAD/documentation/6-timeout.md\n    // for all available values. And since got does not export `Delay` type, we have to declare it as any for future compatibility.\n    timeout: 1000 * 5,\n    onEnd(event, hasSuccess) {\n      const willTerminate = event.events.filter(\n        ({ event: name }) => name === 'app_will_terminate',\n      );\n\n      if (willTerminate) {\n        // do some cleanup as you wish\n      }\n    },\n    // ...other options\n  }),\n);\n```\n"
}