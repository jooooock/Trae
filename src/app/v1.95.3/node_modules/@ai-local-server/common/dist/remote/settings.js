import { __decorate, __metadata } from "tslib";
import { createDefaultRequestInstance } from '@byted-icube/devtools-base';
import { EventEmitter } from '../common/event';
import { SETTINGS_SERVICE_URL_MAP } from '../common/constant';
import { Region } from '../typings';
import { AICommonOptionsHelper } from '../options/aiCommonOptions';
import { Inject } from '@artus/injection';
import { SingletonInjectable } from '../common/injection';
import { Logger } from '../common/logger';
// Settings 自定义接入 https://bytedance.larkoffice.com/wiki/OH0Bw8xBsiasYRkGBOScBQDGn0e
let SettingsClient = class SettingsClient {
    constructor() {
        this._onConfigChange = new EventEmitter();
        this.onConfigChange = this._onConfigChange.event;
        this._axiosInstance = createDefaultRequestInstance();
        // 缓存的配置
        this._config = {};
        // 用于服务端降级
        this._settingsTime = 0;
    }
    setup() {
    }
    reset() {
        this._config = {};
    }
    isEnable() {
        return Boolean(this._optionsHelper.enableSettings && this._optionsHelper.userContext);
    }
    dispose() {
    }
    async syncConfig() {
        if (!this.isEnable()) {
            return {};
        }
        try {
            const data = await this.requestSettingsService();
            const { settings, ctx_infos, settings_time } = data;
            // 只覆盖服务端返回的字段
            this._config = Object.assign({}, this._config, settings);
            this._ctxInfos = ctx_infos;
            this._settingsTime = settings_time;
            this._onConfigChange.fire(this._config);
        }
        catch (err) {
            this._logger.info('settings client sync config falied', err);
        }
        return this._config;
    }
    async requestSettingsService() {
        const { userContext, region, product } = this._optionsHelper;
        const queryData = {
            caller_name: product,
            ctx_infos: this._ctxInfos,
            settings_time: this._settingsTime,
            user_id: userContext?.userId,
            device_id: userContext?.deviceId,
            device_platform: userContext?.devicePlatform,
            version_code: userContext?.versionCode,
            region: this.transformRegion(region),
            language: userContext?.language,
            os_version: userContext?.osVersion,
            channel: userContext?.channel,
        };
        const url = SETTINGS_SERVICE_URL_MAP[region];
        const response = await this._axiosInstance.get(url, { params: queryData });
        if (response.status !== 200) {
            throw new Error(`request settings service failed: ${response.statusText} ${response.data}`);
        }
        const { data, message } = response.data;
        if (message !== 'success' || !data?.settings) {
            throw new Error(`request settings service failed: ${message}`);
        }
        return data;
    }
    transformRegion(region) {
        switch (region) {
            case Region.CN:
                return 'cn';
            case Region.US:
                return 'va';
            case Region.SG:
                return 'sg';
            case Region.BOEI18N:
                return 'boei18n';
            case Region.BOE:
                return 'boe';
            default:
                return 'cn';
        }
    }
};
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], SettingsClient.prototype, "_logger", void 0);
__decorate([
    Inject(),
    __metadata("design:type", AICommonOptionsHelper)
], SettingsClient.prototype, "_optionsHelper", void 0);
SettingsClient = __decorate([
    SingletonInjectable
], SettingsClient);
export { SettingsClient };
