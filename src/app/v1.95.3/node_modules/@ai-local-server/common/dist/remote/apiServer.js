import { __decorate, __metadata } from "tslib";
import { EventEmitter } from '../common/event';
import { AICommonOptionsHelper } from '../options/aiCommonOptions';
import { Inject } from '@artus/injection';
import { SingletonInjectable } from '../common/injection';
import { Logger } from '../common/logger';
import { HttpClient } from '../httpClient';
import { snakeCase } from 'lodash';
let ApiServerClient = class ApiServerClient {
    constructor() {
        this._onConfigChange = new EventEmitter();
        this.onConfigChange = this._onConfigChange.event;
        this._config = {};
    }
    setup() {
    }
    reset() {
        this._config = {};
    }
    dispose() {
    }
    isEnable() {
        return Boolean(this._optionsHelper.enableApiServer);
    }
    async syncConfig() {
        if (!this.isEnable()) {
            return {};
        }
        try {
            const originalOverrideConfigs = await this._aiHttpClient.getIntentConfig({});
            const overrideConfigs = this.transformConfigs(originalOverrideConfigs);
            // 只覆盖服务端返回的字段
            this._config = Object.assign({}, this._config, overrideConfigs);
            this._onConfigChange.fire(this._config);
        }
        catch (err) {
            this._logger.info('api server sync config falied', err);
        }
        return this._config;
    }
    transformConfigs(origin) {
        if (!origin) {
            return {};
        }
        const overrideConfigs = {};
        if (origin.intents) {
            overrideConfigs.aiIntents = origin.intents.map(intent => {
                return {
                    inlineChatResolvers: intent.inline_chat_resolvers,
                    sideChatResolvers: intent.side_chat_resolvers,
                    name: intent.name,
                    locations: intent.locations,
                };
            });
        }
        if (origin.additional_resolvers) {
            overrideConfigs.aiAdditionalResolvers = origin.additional_resolvers;
        }
        if (origin.commands) {
            overrideConfigs.aiSlashCommands = origin.commands.map(command => {
                return {
                    command: command.command,
                    locations: command.locations,
                    defaultIntent: command.default_intent,
                    isDetectNeed: command.is_detect_need,
                    isShowInCommandList: command.is_show_in_command,
                    description: command.description,
                };
            });
        }
        if (origin.hash_contexts) {
            overrideConfigs.aiHashContexts = origin.hash_contexts.map(context => {
                return {
                    hashType: context.hash_type,
                    resolvers: context.side_chat_resolvers,
                };
            });
        }
        return overrideConfigs;
    }
};
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], ApiServerClient.prototype, "_logger", void 0);
__decorate([
    Inject(),
    __metadata("design:type", AICommonOptionsHelper)
], ApiServerClient.prototype, "_optionsHelper", void 0);
__decorate([
    Inject(),
    __metadata("design:type", HttpClient)
], ApiServerClient.prototype, "_aiHttpClient", void 0);
ApiServerClient = __decorate([
    SingletonInjectable
], ApiServerClient);
export { ApiServerClient };
export function exportConfigs(origin) {
    const response = {};
    response.intents = origin.aiIntents.map(intent => {
        return {
            inline_chat_resolvers: [...(intent.commonResolvers || []), ...(intent.inlineChatResolvers || [])],
            side_chat_resolvers: [...(intent.commonResolvers || []), ...(intent.sideChatResolvers || [])],
            name: intent.name,
            locations: intent.locations.map(item => snakeCase(item)),
        };
    });
    response.additional_resolvers = origin.aiAdditionalResolvers;
    response.commands = origin.aiSlashCommands.map(command => {
        return {
            command: command.command,
            locations: command.locations.map(item => snakeCase(item)),
            default_intent: command.defaultIntent,
            is_detect_need: command.isDetectNeed,
            is_show_in_command: command.isShowInCommandList,
            description: command.description,
        };
    });
    return response;
}
