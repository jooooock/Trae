import { __decorate, __metadata } from "tslib";
import { Logger } from '../common/logger';
import { SingletonInjectable } from '../common/injection';
import { AICommonOptionsHelper } from '../options/aiCommonOptions';
import { Inject } from '@artus/injection';
import { createDefaultSlardarClient } from '@byted-icube/devtools-base';
let AISlardarClient = class AISlardarClient {
    event(payload) {
        if (!this.baseClient) {
            this._logger.error(`[AI Slardar] slardar client not init`);
            return;
        }
        const { costTime = 0, name, resultLength, ...restPayload } = payload;
        const metrics = {
            costTime,
        };
        if (resultLength) {
            metrics.resultLength = resultLength;
        }
        this.baseClient.sendEvent?.({
            name,
            categories: restPayload,
            metrics,
        });
        this._logger.info(`[AI Slardar] event: ${name}`, JSON.stringify(payload));
    }
    get baseClient() {
        return this._slardarClient;
    }
    setup() {
        if (!this._optionsHelper.enableSlardar) {
            this._logger.info(`[AI Slardar] slardar client disabled`);
            return;
        }
        const { region, product, userContext, developmentMode, slardarExtraContext } = this._optionsHelper;
        try {
            this._slardarClient = createDefaultSlardarClient({
                pid: 'AI Assistant',
            }, {
                region,
                product,
                ...userContext,
                ...slardarExtraContext,
                developmentMode: developmentMode.toString(),
            }, region);
        }
        catch (error) {
            this._logger.error('[AI Slardar] init slardar failed: ', error);
        }
    }
};
__decorate([
    Inject(),
    __metadata("design:type", Logger)
], AISlardarClient.prototype, "_logger", void 0);
__decorate([
    Inject(),
    __metadata("design:type", AICommonOptionsHelper)
], AISlardarClient.prototype, "_optionsHelper", void 0);
AISlardarClient = __decorate([
    SingletonInjectable
], AISlardarClient);
export { AISlardarClient };
