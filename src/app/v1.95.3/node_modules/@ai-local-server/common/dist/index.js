import 'reflect-metadata';
import { ConfigCenter } from './configCenter';
import { HttpClient } from './httpClient';
import { AICommonOptionsHelper } from './options';
import { ObjectFactory } from './common/injection';
import { AISlardarClient } from './slardar';
export * from './configCenter';
export * from './options';
export * from './typings';
export * from './protocol';
export * from './common/event';
export * from './httpClient';
export * from './slardar';
export class AICommon {
    static async init(options) {
        if (this._initializePromise) {
            return this._initializePromise;
        }
        this._initializePromise = new Promise(async (resolve, reject) => {
            try {
                const optionsHelper = ObjectFactory.getObject(AICommonOptionsHelper);
                optionsHelper.setup({ enableApiServer: true, enableSettings: false, ...options });
                // setup slardar client
                this.slardarClient = ObjectFactory.getObject(AISlardarClient);
                this.slardarClient.setup();
                // setup http client
                this.httpClient = ObjectFactory.getObject(HttpClient);
                // setup config center
                this.configCenter = ObjectFactory.getObject(ConfigCenter);
                await this.configCenter.setup();
                resolve();
            }
            catch (err) {
                reject(err);
            }
            finally {
                this._initializePromise = undefined;
            }
        });
        await this._initializePromise;
    }
}
