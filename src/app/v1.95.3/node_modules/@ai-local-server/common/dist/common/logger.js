import { __decorate } from "tslib";
import { SingletonInjectable } from '../common/injection';
import { LoggerType, LogLevel } from '@byted-icube/devtools-base';
import util from 'util';
let Logger = class Logger {
    constructor() {
        this._level = LogLevel.Info;
        this._writer = (message, level = LogLevel.Info) => {
            const formattedMessage = `${new Date().toISOString()} ${message}\n`;
            switch (level) {
                case LogLevel.Error:
                    console.error(formattedMessage);
                    break;
                case LogLevel.Warn:
                    console.warn(formattedMessage);
                    break;
                case LogLevel.Debug:
                    console.debug(formattedMessage);
                    break;
                case LogLevel.Trace:
                    console.trace(formattedMessage);
                    break;
                case LogLevel.Info:
                    console.log(formattedMessage);
                    break;
                default:
                    console.log(formattedMessage);
                    break;
            }
        };
        this.type = LoggerType.Console;
    }
    withContext() {
        return this;
    }
    getLogger() {
        return this;
    }
    setLevel(level) {
        this._level = level;
    }
    setWriter(writer) {
        this._writer = writer;
    }
    info(...args) {
        this.log(LogLevel.Info, ...args);
    }
    error(...args) {
        this.log(LogLevel.Error, ...args);
    }
    warn(...args) {
        this.log(LogLevel.Warn, ...args);
    }
    trace(...args) {
        this.log(LogLevel.Trace, ...args);
    }
    debug(...args) {
        this.log(LogLevel.Debug, ...args);
    }
    log(level, ...args) {
        if (level > this._level) {
            return;
        }
        this._writer(`<common> ${util.format(...args).trim()}`, level);
    }
};
Logger = __decorate([
    SingletonInjectable
], Logger);
export { Logger };
