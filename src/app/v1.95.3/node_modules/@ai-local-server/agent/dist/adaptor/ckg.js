"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CKGService = void 0;
const tslib_1 = require("tslib");
const object_factory_1 = require("../impl-registry/object-factory");
const logger_1 = require("../common/logger");
const config_1 = require("../common/config");
const ide_1 = require("../adaptor/ide");
const fetch_1 = require("./fetch");
let CKGService = class CKGService {
    async isEnable() {
        try {
            const projectCount = await this.getProjectCount();
            return projectCount > 0;
        }
        catch (err) {
            this._logger.info("get ckg status failed", err.message);
            return false;
        }
    }
    async retrieveEntity(params) {
        const { entityName } = params;
        const userMessage = `介绍下 ${entityName} 类，介绍下 ${entityName} 函数`;
        const ret = await this._fetch.ckg('retrieve_entity', {
            usermessage: userMessage,
            project_list: this._ide.getWorkspaceDirs(),
            userid: await this._configHelper.getUsername(),
            // 保留字段，不用传递
            session_id: "",
        });
        return {
            list: ret.entities_by_user_message,
        };
    }
    async retrieveRelation(params) {
        return await this._fetch.ckg('retrieve_relation', {
            entities_by_user_message: params.entityList,
            userid: await this._configHelper.getUsername(),
        });
    }
    async getProjectCount() {
        const projects = await this._fetch.ckg('get_build_status');
        // { "code": 0, "error": null, "status": { "/cloudide/workspace/Nodejs": { "status": "ready", "progress": 1.0 } } }
        // 👆 只要数组不为空代表 ckg 已经启用了，progress([0-100]) 代表索引进度，没到 100 时部分可用
        this._logger.info("ckg project list", JSON.stringify(projects.status));
        return Object.keys(projects.status).length;
    }
};
exports.CKGService = CKGService;
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", ide_1.IDE)
], CKGService.prototype, "_ide", void 0);
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", logger_1.Logger)
], CKGService.prototype, "_logger", void 0);
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", config_1.AutoDebugConfigHelper)
], CKGService.prototype, "_configHelper", void 0);
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", fetch_1.FetchClient)
], CKGService.prototype, "_fetch", void 0);
exports.CKGService = CKGService = tslib_1.__decorate([
    object_factory_1.SingletonInjectable
], CKGService);
