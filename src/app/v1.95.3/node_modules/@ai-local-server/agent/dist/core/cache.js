"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoDebugCache = void 0;
const tslib_1 = require("tslib");
const logger_1 = require("../common/logger");
const utils_1 = require("../common/utils");
const object_factory_1 = require("../impl-registry/object-factory");
const lru_cache_1 = require("lru-cache");
let AutoDebugCache = class AutoDebugCache {
    constructor() {
        this._runCache = new lru_cache_1.LRUCache({
            ttl: this.ttl,
            ttlAutopurge: true,
        });
    }
    get ttl() {
        // auto debug 2 分钟左右一轮，先定个 10 分钟吧
        return 10 * 60 * 1000;
    }
    setFileCache(params) {
        const { runId, filePath, fileContent: content } = params;
        this._logger.info(`set file cache runId: ${runId}, filePath: ${filePath}, content: ${content}`);
        if (!this._runCache.get(runId)) {
            this._runCache.set(runId, {
                fileCache: {},
            });
        }
        const run = this._runCache.get(runId);
        utils_1.Utils.assert(run, `run ${runId} cache not found`);
        run.fileCache[filePath] = content;
    }
    getFileCache(params) {
        const { runId, filePath } = params;
        const run = this._runCache.get(runId);
        utils_1.Utils.assert(run, `run cache not found ${runId}`);
        const cache = run.fileCache[filePath];
        utils_1.Utils.assert(cache, `file cache not found ${runId} ${filePath}`);
        return cache;
    }
};
exports.AutoDebugCache = AutoDebugCache;
tslib_1.__decorate([
    (0, object_factory_1.Inject)(),
    tslib_1.__metadata("design:type", logger_1.Logger)
], AutoDebugCache.prototype, "_logger", void 0);
exports.AutoDebugCache = AutoDebugCache = tslib_1.__decorate([
    object_factory_1.SingletonInjectable,
    tslib_1.__metadata("design:paramtypes", [])
], AutoDebugCache);
