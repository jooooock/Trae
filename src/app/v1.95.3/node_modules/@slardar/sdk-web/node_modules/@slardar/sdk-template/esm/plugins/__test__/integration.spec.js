import test from 'ava';
import sinon from 'sinon';
import { IntegrationPlugin } from '../integration';
import { createTestClient } from './common';
test('IntegrationPlugin setup && 调用destroy && dedupe', function (t) {
    var send = sinon.fake();
    var setup1 = sinon.fake();
    var setup2 = sinon.fake();
    var setup3 = sinon.fake();
    var tearDown1 = sinon.fake();
    var tearDown3 = sinon.fake();
    var integrations = [
        {
            name: 'test1',
            setup: setup1,
            tearDown: tearDown1,
        },
        {
            name: 'test1',
            setup: setup2,
        },
        {
            name: 'test3',
            setup: setup3,
            tearDown: tearDown3,
        },
    ];
    var client = createTestClient(send);
    IntegrationPlugin(client);
    client.init({ bid: '123', url: 'init-url', integrations: integrations });
    t.assert(setup1.calledOnce);
    t.assert(setup2.notCalled);
    t.assert(setup3.calledOnce);
    client.destroy();
    t.assert(tearDown1.calledOnce);
    t.assert(tearDown3.calledOnce);
});
test('IntegrationPlugin setup call', function (t) {
    var send = sinon.fake();
    var test = sinon.fake();
    var tearDown = sinon.fake();
    var integrations = [
        {
            name: 'test1',
            setup: function (c) {
                c.provide('test', test);
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                c.test();
            },
            tearDown: tearDown,
        },
    ];
    var client = createTestClient(send);
    IntegrationPlugin(client);
    client.init({ bid: '123', url: 'init-url', integrations: integrations });
    t.assert(test.calledOnce);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    t.is(client.test, test);
    client.destroyAgent.remove('test1');
    t.truthy(tearDown.calledOnce);
});
test('applyIntegrations should work after client.init', function (t) {
    var send = sinon.fake();
    var test = sinon.fake();
    var tearDown = sinon.fake();
    var integrations = [
        {
            name: 'integration_1',
            setup: function (c) {
                c.provide('test', test);
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                c.test();
            },
            tearDown: tearDown,
        },
    ];
    var integration_2 = {
        name: 'integration_2',
        setup: function (c) {
            c.provide('test_2', test);
            c['test_2']();
        },
        tearDown: tearDown,
    };
    var integration_3 = {
        name: 'integration_3',
        setup: function (c) {
            c.provide('test_3', test);
            c['test_3']();
        },
        tearDown: tearDown,
    };
    var client = createTestClient(send);
    IntegrationPlugin(client);
    client.init({ bid: '123', url: 'init-url', integrations: integrations });
    t.assert(test.calledOnce);
    t.truthy(test.calledOnce);
    t.truthy(client.destroyAgent.has('integration_1'));
    t.false(client.destroyAgent.has('integration_2'));
    t.is(client['test'], test);
    client.applyIntegrations([integration_2]);
    t.truthy(test.calledTwice);
    t.is(client['test_2'], test);
    t.truthy(client.destroyAgent.has('integration_2'));
    client.applyIntegrations([integration_3]);
    t.truthy(test.calledThrice);
    t.is(client['test_3'], test);
    t.truthy(client.destroyAgent.has('integration_3'));
    client.applyIntegrations([integration_2, integration_3]);
    t.truthy(test.calledThrice);
    client.destroyAgent.remove('integration_2');
    t.truthy(tearDown.calledOnce);
    client.destroyAgent.remove('integration_3');
    t.truthy(tearDown.calledTwice);
    t.false(client.destroyAgent.has('integration_2'));
    t.false(client.destroyAgent.has('integration_3'));
    client.applyIntegrations([integration_2, integration_3]);
    t.true(client.destroyAgent.has('integration_2'));
    t.true(client.destroyAgent.has('integration_3'));
    t.is(test.callCount, 5);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/node_modules/@slardar/sdk-template/esm/plugins/__test__/integration.spec.js.map