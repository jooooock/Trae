import { __assign, __read, __spreadArray } from "tslib";
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import test from 'ava';
import sinon from 'sinon';
import { withCommandArray } from '../command-array';
import { createTestClient } from './common';
var withConfig = function (c) {
    c.on('report', function (ev) {
        return __assign(__assign({}, ev), { extra: __assign(__assign({}, c.config()), (ev.extra || {})) });
    });
};
var caputreContext = function (c) {
    return {
        url: c.config().url || '',
    };
};
var applyArgsWithContext = function (c, ctx, args) {
    var inject = function (ev) {
        return __assign(__assign({}, ev), { extra: __assign(__assign({}, (ev.extra || {})), { url: ctx.url }) });
    };
    c.on('report', inject);
    var _a = __read(args), m = _a[0], others = _a.slice(1);
    c[m].apply(c, __spreadArray([], __read(others), false));
    c.off('report', inject);
};
var withMock = function (c) {
    c.provide('mock', function (v) {
        c.report({
            ev_type: 'mock',
            payload: {
                id: v,
            },
            extra: {
                url: 'from-mock',
            },
        });
    });
};
test('withCommandArray - basic command with injected config', function (t) {
    var send = sinon.fake();
    var rawClient = createTestClient(send);
    withConfig(rawClient);
    var client = withCommandArray(rawClient, caputreContext, applyArgsWithContext);
    client('init', { bid: '123', url: 'init-url' });
    var onStart = sinon.fake();
    client('on', 'start', onStart);
    t.assert(onStart.notCalled);
    client('start');
    t.assert(onStart.calledOnce);
    var event = { ev_type: 'test', payload: { id: 123 } };
    client('report', event);
    t.assert(send.calledOnce);
    t.deepEqual(send.args[0][0], __assign(__assign({}, event), { common: {
            bid: '123',
            url: 'init-url',
        } }));
});
test('withCommandArray - cache command with captured context', function (t) {
    var send = sinon.fake();
    var rawClient = createTestClient(send);
    withConfig(rawClient);
    var client = withCommandArray(rawClient, caputreContext, applyArgsWithContext);
    client('init', { bid: '123', url: 'init-url' });
    var event1 = { ev_type: 'test', payload: { id: 123 } };
    client('report', event1);
    t.assert(send.notCalled);
    client('config', { url: 'second-url' });
    var event2 = { ev_type: 'test', payload: { id: 456 } };
    client('report', event2);
    t.assert(send.notCalled);
    client('start');
    t.assert(send.calledTwice);
    t.deepEqual(send.args[0][0], __assign(__assign({}, event1), { common: {
            bid: '123',
            url: 'init-url',
        } }));
    t.deepEqual(send.args[1][0], __assign(__assign({}, event2), { common: {
            bid: '123',
            url: 'second-url',
        } }));
});
test('withCommandArray - provide before withCommandArray', function (t) {
    var send = sinon.fake();
    var rawClient = createTestClient(send);
    withConfig(rawClient);
    withMock(rawClient);
    var client = withCommandArray(rawClient, caputreContext, applyArgsWithContext);
    client('init', { bid: '123', url: 'init-url' });
    client('start');
    // @ts-ignore
    client('mock', 123);
    t.assert(send.calledOnce);
    t.deepEqual(send.args[0][0], {
        ev_type: 'mock',
        payload: {
            id: 123,
        },
        common: {
            bid: '123',
            url: 'from-mock',
        },
    });
});
test('withCommandArray - provide after withCommandArray', function (t) {
    var send = sinon.fake();
    var rawClient = createTestClient(send);
    withConfig(rawClient);
    var client = withCommandArray(rawClient, caputreContext, applyArgsWithContext);
    client('init', { bid: '123', url: 'init-url' });
    client('start');
    withMock(client);
    // @ts-ignore
    client('mock', 123);
    t.assert(send.calledOnce);
    t.deepEqual(send.args[0][0], {
        ev_type: 'mock',
        payload: {
            id: 123,
        },
        common: {
            bid: '123',
            url: 'from-mock',
        },
    });
});
test('withCommandArray - call cached command at provide', function (t) {
    var send = sinon.fake();
    var rawClient = createTestClient(send);
    withConfig(rawClient);
    var client = withCommandArray(rawClient, caputreContext, applyArgsWithContext);
    client('init', { bid: '123', url: 'init-url' });
    client('start');
    // @ts-ignore
    client('mock', 123);
    t.assert(send.notCalled);
    withMock(client);
    t.assert(send.calledOnce);
    t.deepEqual(send.args[0][0], {
        ev_type: 'mock',
        payload: {
            id: 123,
        },
        common: {
            bid: '123',
            // captured context from command array
            url: 'init-url',
        },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/node_modules/@slardar/sdk-template/esm/plugins/__test__/command-array.spec.js.map