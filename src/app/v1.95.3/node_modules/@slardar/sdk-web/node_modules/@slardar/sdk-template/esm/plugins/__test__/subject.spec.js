import { __read } from "tslib";
import test from 'ava';
import sinon from 'sinon';
import { noop } from '../../utils';
import { SubjectPlugin, getSubjectKeyWithoutVersion } from '../subject';
import { createTestClient } from './common';
test('getSubjectKeyWithoutVersion', function (t) {
    t.is(getSubjectKeyWithoutVersion('a'), 'a');
    t.is(getSubjectKeyWithoutVersion(''), '');
    t.is(getSubjectKeyWithoutVersion('1_2'), '1');
});
test('SubjectPlugin', function (t) {
    var disconnectCb = sinon.spy();
    var subscriber = sinon.spy();
    var a = {};
    var client = createTestClient(noop);
    SubjectPlugin(client, a);
    t.assert(client.initSubject);
    t.assert(client.setFilter);
    t.assert(client.getSubject);
    t.assert(client.privateSubject);
    client.init({ bid: '123', url: 'init-url' });
    var fakeNext;
    var fakeObserver = function (next, disconnect) {
        disconnect(disconnectCb);
        fakeNext = next;
    };
    var _a = __read(client.initSubject(['fakeObserver', fakeObserver]), 1), subscribe = _a[0];
    t.true(Array.isArray(a.fakeObserver));
    t.true(a.fakeObserver.length === 2);
    var unsubscribe = subscribe(subscriber);
    t.assert(subscriber.notCalled);
    // @ts-expect-error
    fakeNext(1);
    t.assert(subscriber.calledOnce);
    t.is(subscriber.args[0][0], 1);
    unsubscribe();
    // @ts-expect-error
    fakeNext(2);
    t.assert(subscriber.calledOnce);
    t.true(client.getSubject('fakeObserver') === a.fakeObserver);
    var _b = __read(client.initSubject(['fakeObserver', noop]), 1), subscribe2 = _b[0];
    t.true(subscribe === subscribe2);
});
test('setFilter before initSubject', function (t) {
    var disconnectCb = sinon.spy();
    var subscriber = sinon.spy();
    var a = {};
    var client = createTestClient(noop);
    SubjectPlugin(client, a);
    var fakeNext;
    var fakeObserver = function (next, disconnect) {
        disconnect(disconnectCb);
        fakeNext = next;
    };
    var fakeFilter = sinon.spy();
    client.setFilter('fakeObserver', function (v) {
        fakeFilter(v);
        return true;
    });
    client.on('init', function () {
        var _a = __read(client.initSubject(['fakeObserver', fakeObserver]), 1), subscribe = _a[0];
        t.true(Array.isArray(a.fakeObserver));
        t.true(a.fakeObserver.length === 2);
        var unsubscribe = subscribe(subscriber);
        // setFilter work when set before init subject
        t.assert(subscriber.notCalled);
        t.assert(fakeFilter.notCalled);
        fakeNext(1);
        t.assert(subscriber.calledOnce);
        t.assert(fakeFilter.calledOnce);
        t.is(subscriber.args[0][0], 1);
        t.is(fakeFilter.args[0][0], 1);
        unsubscribe();
        // unsubscribe worked and still reuse the subject
        fakeNext(2);
        t.assert(subscriber.calledOnce);
        t.true(client.getSubject('fakeObserver') === a.fakeObserver);
        var _b = __read(client.initSubject(['fakeObserver', noop]), 1), subscribe2 = _b[0];
        t.true(subscribe === subscribe2);
        // setFilter works dynamically when already setFilter once
        var subscriber2 = sinon.spy();
        subscribe2(subscriber2);
        var fakeFilter2 = sinon.spy();
        client.setFilter('fakeObserver', function (v) {
            fakeFilter2(v);
            return false;
        });
        fakeNext(3);
        t.assert(subscriber.calledOnce);
        t.assert(fakeFilter.calledThrice);
        t.assert(fakeFilter2.calledOnce);
        t.assert(subscriber2.notCalled);
        t.is(fakeFilter.args[2][0], 3);
        t.is(fakeFilter2.args[0][0], 3);
    });
    client.init({ bid: '123', url: 'init-url' });
});
test('setFilter after initSubject', function (t) {
    var disconnectCb = sinon.spy();
    var subscriber = sinon.spy();
    var a = {};
    var client = createTestClient(noop);
    SubjectPlugin(client, a);
    client.init({ bid: '123', url: 'init-url' });
    var fakeNext;
    var fakeObserver = function (next, disconnect) {
        disconnect(disconnectCb);
        fakeNext = next;
    };
    var _a = __read(client.initSubject(['fakeObserver', fakeObserver]), 1), subscribe = _a[0];
    t.true(Array.isArray(a.fakeObserver));
    t.true(a.fakeObserver.length === 2);
    var unsubscribe = subscribe(subscriber);
    t.assert(subscriber.notCalled);
    // @ts-expect-error
    fakeNext(1);
    t.assert(subscriber.calledOnce);
    t.is(subscriber.args[0][0], 1);
    unsubscribe();
    // after setFilter, observers is not the same
    var fakeFilter = sinon.spy();
    client.setFilter('fakeObserver', function (v) {
        fakeFilter(v);
        return true;
    });
    var _b = __read(client.initSubject(['fakeObserver', noop]), 1), subscribe2 = _b[0];
    var subscriber2 = sinon.spy();
    var unsubscribe2 = subscribe2(subscriber2);
    t.false(subscribe2 === subscribe);
    // setFilter works
    // @ts-expect-error
    fakeNext(2);
    t.assert(subscriber.calledOnce);
    t.assert(fakeFilter.calledOnce);
    t.assert(subscriber2.calledOnce);
    t.is(fakeFilter.args[0][0], 2);
    t.is(subscriber2.args[0][0], 2);
    // setFilter works dynamically when already setFilter once
    var fakeFilter2 = sinon.spy();
    client.setFilter('fakeObserver', function (v) {
        fakeFilter2(v);
        return false;
    });
    // @ts-expect-error
    fakeNext(3);
    t.assert(fakeFilter.calledTwice);
    t.assert(fakeFilter2.calledOnce);
    t.assert(subscriber2.calledOnce);
    t.is(fakeFilter.args[1][0], 3);
    t.is(fakeFilter2.args[0][0], 3);
    unsubscribe2();
    // still reuse the subject
    t.true(client.getSubject('fakeObserver') === a.fakeObserver);
    var _c = __read(client.initSubject(['fakeObserver', noop]), 1), subscribe3 = _c[0];
    t.true(subscribe3 === subscribe2);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/node_modules/@slardar/sdk-template/esm/plugins/__test__/subject.spec.js.map