import { __read } from "tslib";
import { initSubjectInGlobal, registerTearDownGroup } from '@slardar/sdk-template';
import { DOMContentLoadSubject, unloadSubject } from '../../collector/page';
import { longtaskSubject, resourceSubject } from '../../collector/perf';
import { BLANK_SCREEN_EV_TYPE } from '../../constants';
import { blankScreenGetterWithObserver } from '../../monitors/blank-screen';
import { DEFAULT_THRESHOLD, DEFAULT_T0_DATA_URL_QUALITY } from '../../monitors/blank-screen/util';
import { getConfig, getDefaultDocument, getDefaultBrowser } from '../../utils';
import { getPluginConfig } from './utils';
export var BLANK_SCREEN_MONITOR_PLUGIN_NAME = 'blankScreen';
function BlankScreenMonitorBasePlugin(client, defaultConfig, overrideConfig) {
    client.on('init', function () {
        var document = getDefaultDocument();
        var window = getDefaultBrowser();
        if (!document || !window)
            return;
        var config = getPluginConfig(client, BLANK_SCREEN_MONITOR_PLUGIN_NAME, defaultConfig) ||
            getConfig(overrideConfig, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var _a = __read(blankScreenGetterWithObserver(client.report.bind(client), tearDownGroup, [
            initSubjectInGlobal(client, DOMContentLoadSubject),
            function () { return initSubjectInGlobal(client, longtaskSubject); },
            function () { return initSubjectInGlobal(client, resourceSubject); },
            initSubjectInGlobal(client, unloadSubject),
        ], config), 2), applyOtherReport = _a[0], detectBlankScreen = _a[1];
        var listenOtherReport = function (ev) {
            applyOtherReport(ev);
            return ev;
        };
        client.on('report', listenOtherReport);
        tearDownGroup.push(function () {
            client.off('report', listenOtherReport);
        });
        registerTearDownGroup(client, BLANK_SCREEN_MONITOR_PLUGIN_NAME, BLANK_SCREEN_EV_TYPE, tearDownGroup);
        client.provide('detectBlankScreen', detectBlankScreen);
    });
}
var defaultByteConfig = {
    autoDetect: true,
    threshold: DEFAULT_THRESHOLD,
    screenshot: true,
    ssUrl: 'https://sf16-short-va.bytedapm.com/slardar/fe/sdk-web/screenshot.min.js',
    mask: false,
    partialShot: true,
    quality: DEFAULT_T0_DATA_URL_QUALITY,
};
export function BlankScreenMonitorPlugin(client, overrideConfig) {
    BlankScreenMonitorBasePlugin(client, defaultByteConfig, overrideConfig);
}
var defaultVolConfig = {
    autoDetect: true,
    threshold: DEFAULT_THRESHOLD,
    screenshot: true,
    ssUrl: 'https://apm.volccdn.com/mars-web/apmplus/web/html2canvas.min.js',
    mask: false,
    partialShot: true,
    quality: DEFAULT_T0_DATA_URL_QUALITY,
};
export function BlankScreenMonitorVolPlugin(client, overrideConfig) {
    BlankScreenMonitorBasePlugin(client, defaultVolConfig, overrideConfig);
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/plugins/monitors/blank-screen.js.map