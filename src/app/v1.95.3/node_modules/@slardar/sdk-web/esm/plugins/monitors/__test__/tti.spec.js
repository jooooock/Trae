import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { TTIMonitorPlugin } from '../tti';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    // eslint-disable-next-line compat/compat
    Object.defineProperty(window.performance, 'getEntriesByName', {
        value: function () { return [
            {
                toJSON: function () { return ''; },
                duration: 0,
                entryType: 'paint',
                name: 'first-paint',
                startTime: 100, // 模拟 first-paint 的开始时间
            },
        ]; },
    });
});
test.serial('TTIMonitorPlugin - notSupport', function (t) {
    var client = createTestWebClient();
    TTIMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            tti: true,
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'tti',
            type: 'perf',
            isSupport: false,
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});
test.serial('TTIMonitorPlugin - not support if send second PV', function (t) {
    var MockPerformanceObserver = /** @class */ (function () {
        function MockPerformanceObserver(cb) {
            ;
            this.observe = function () {
                cb({
                    getEntries: function () {
                        return {};
                    },
                }, {
                    disconnect: sinon.fake(),
                });
                return {};
            };
        }
        MockPerformanceObserver.prototype.disconnect = function () { };
        MockPerformanceObserver.supportedEntryTypes = [
            'element',
            'event',
            'first-input',
            'largest-contentful-paint',
            'layout-shift',
            'longtask',
            'mark',
            'measure',
            'navigation',
            'paint',
            'resource',
        ];
        return MockPerformanceObserver;
    }());
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line compat/compat
    window.PerformanceObserver = MockPerformanceObserver;
    var client = createTestWebClient();
    TTIMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            tti: true,
        },
    });
    client.start();
    client.config({
        pid: 'pid1',
        viewId: 'viewId1',
    });
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'tti',
            type: 'perf',
            isSupport: false,
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-web/esm/plugins/monitors/__test__/tti.spec.js.map