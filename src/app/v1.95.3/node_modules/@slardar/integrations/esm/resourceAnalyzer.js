import { __read, __spreadArray } from "tslib";
import { unloadSubject } from '@slardar/sdk-web';
export var RESOURCE_ANALYZER_INTEGRATION_NAME = 'resourceAnalyzer';
var reportCustomEvent = function (client, eventName, metrics, categories) {
    if (categories === void 0) { categories = {}; }
    return metrics &&
        client.report({
            ev_type: 'custom',
            payload: {
                name: eventName,
                metrics: metrics,
                categories: categories,
                type: 'event',
                level: 'info',
            },
        });
};
/**
 * Returns an object containing vacant metrics.
 *
 * @return {Object} An object with the following properties:
 *   - decodeBodySize: The decoded overall size.
 *   - encodeBodySize: The encoded overall size.
 *   - resourceCount: The number of resources.
 *   - transferSize: The actual transfer size.
 *   - cacheRate: The overall cache hit rate.
 */
export var getVacantMetrics = function () { return ({
    // 解码后总体积
    decodedBodySize: 0,
    // 编码后总体积
    encodedBodySize: 0,
    // 资源条数
    resourceCount: 0,
    // 实际传输总体积
    transferSize: 0,
    // 总缓存命中率
    cacheRate: 0,
    // serviceWorker 命中率
    serviceWorkerRate: 0,
}); };
export var resourceAnalyzer = function (props) {
    if (props === void 0) { props = {
        initialScreen: true,
        pageview: true,
        session: true,
    }; }
    var tearDowns = [];
    return {
        name: RESOURCE_ANALYZER_INTEGRATION_NAME,
        setup: function (client) {
            props.initialScreen && tearDowns.push.apply(tearDowns, __spreadArray([], __read(gatheringMetricsBeforeTTI(client)), false));
            props.pageview && tearDowns.push.apply(tearDowns, __spreadArray([], __read(gatheringMetricsForPageview(client)), false));
            props.session && tearDowns.push.apply(tearDowns, __spreadArray([], __read(gatheringMetricsForSession(client)), false));
        },
        tearDown: function () { return tearDowns.length && tearDowns.forEach(function (fn) { return fn(); }); },
    };
};
function gatheringMetricsForSession(client) {
    var tearDownGroup = [];
    var unloadObserver = client.initSubject(unloadSubject);
    var _a = __read(gatheringMetricsOnSend(client), 4), mount = _a[0], unMount = _a[1], get = _a[2], clear = _a[3];
    mount();
    tearDownGroup.push(unloadObserver[0](function () {
        unMount();
        reportCustomEvent(client, "session_resource_analyzer" /* session_resource_analyzer */, get());
        clear();
    }));
    tearDownGroup.push(function () {
        unMount();
        clear();
    });
    return tearDownGroup;
}
function gatheringMetricsForPageview(client) {
    var tearDownGroup = [];
    var _a = __read(gatheringMetricsOnSend(client), 4), mount = _a[0], unMount = _a[1], get = _a[2], clear = _a[3];
    var unloadObserver = client.initSubject(unloadSubject);
    mount();
    var previousPageview = undefined;
    var onSendPageview = function (e) {
        if (e.ev_type === 'pageview') {
            var _a = e.payload, pid = _a.pid, source = _a.source;
            if (!previousPageview) {
                return (previousPageview = {
                    relevant_pid: pid,
                    relevant_source: source,
                });
            }
            unMount();
            reportCustomEvent(client, "pageview_resource_analyzer" /* pageview_resource_analyzer */, get(), previousPageview);
            mount();
            previousPageview = {
                relevant_pid: pid,
                relevant_source: source,
            };
        }
    };
    client.on('send', onSendPageview);
    tearDownGroup.push(unloadObserver[0](function () {
        unMount();
        reportCustomEvent(client, "pageview_resource_analyzer" /* pageview_resource_analyzer */, get(), previousPageview || {});
        clear();
    }));
    tearDownGroup.push(function () {
        unMount();
        clear();
        client.off('send', onSendPageview);
    });
    return tearDownGroup;
}
function gatheringMetricsBeforeTTI(client) {
    var tearDownGroup = [];
    var _a = __read(gatheringMetricsOnSend(client), 4), mount = _a[0], unMount = _a[1], get = _a[2], clear = _a[3];
    mount();
    var onSend = function (e) {
        if (e.ev_type === 'performance' && e.payload.name === 'tti') {
            unMount();
            reportCustomEvent(client, "initial_screen_resource_analyzer" /* initial_screen_resource_analyzer */, get(), {
                relevant_pid: e.common.pid || '',
            });
            tearDownGroup.forEach(function (fn) { return fn(); });
        }
    };
    client.on('send', onSend);
    tearDownGroup.push(function () {
        unMount();
        clear();
        client.off('send', onSend);
    });
    return tearDownGroup;
}
function gatheringMetricsOnSend(client) {
    var result = null;
    var cacheCount = 0;
    var serviceWorkerCount = 0;
    var onSend = function (e) {
        if (e.ev_type === 'resource') {
            var _a = e.payload, decodedBodySize = _a.decodedBodySize, encodedBodySize = _a.encodedBodySize, transferSize = _a.transferSize, duration = _a.duration, workerStart = _a.workerStart;
            // more detail see:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin
            if (!decodedBodySize || !encodedBodySize)
                return;
            var isCached = transferSize === 0 || (transferSize === undefined && duration === 0);
            result.decodedBodySize += decodedBodySize;
            result.encodedBodySize += encodedBodySize;
            result.transferSize += transferSize;
            result.resourceCount++;
            isCached && cacheCount++;
            workerStart && serviceWorkerCount++;
            result.cacheRate = parseFloat((cacheCount / result.resourceCount).toFixed(2));
            result.serviceWorkerRate = parseFloat((serviceWorkerCount / result.resourceCount).toFixed(2));
        }
    };
    var get = function () {
        if (!result || !result.resourceCount)
            return null;
        return result;
    };
    var mount = function () {
        result = getVacantMetrics();
        cacheCount = 0;
        serviceWorkerCount = 0;
        client.on('send', onSend);
    };
    var unMount = function () {
        client.off('send', onSend);
    };
    var clear = function () {
        result = null;
    };
    return [mount, unMount, get, clear];
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/esm/resourceAnalyzer.js.map