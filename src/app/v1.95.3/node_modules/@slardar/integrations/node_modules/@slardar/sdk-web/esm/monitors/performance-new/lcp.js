import { __read } from "tslib";
import { observePerfWithBuffer } from '../../collector';
import { getDefaultPerformanceObserver, htmlTreeAsString } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
export var LCP_ENTRY_NAME = 'largest-contentful-paint';
export var LCP_METRIC_NAME = "lcp" /* lcp */;
var LCPListenerEventTypes = ['keydown', 'click'];
var getLCP = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 2), hiddenObserver = _b[0], unloadObserver = _b[1];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var metric = initMetric(LCP_METRIC_NAME, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!PerformanceObserver) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, function (entry) {
        metric.value = entry.startTime;
        if (entry.element) {
            try {
                metric.extra = {
                    element: htmlTreeAsString(entry.element),
                };
            }
            catch (_a) {
                // do nothing
            }
        }
    }, LCP_ENTRY_NAME));
    var inputEventHandler = function () {
        sendOnceAndTearDown(metric);
    };
    LCPListenerEventTypes.forEach(function (type) {
        window.addEventListener(type, inputEventHandler, true);
        tearDownGroup.push(function () {
            window.removeEventListener(type, inputEventHandler, true);
        });
    });
    tearDownGroup.push(unloadObserver[0](function () {
        metric.isBounced = true;
        sendOnceAndTearDown(metric);
    }));
    var hiddenCallback = function (isHidden) {
        if (isHidden) {
            metric.isSupport = false;
            sendOnceAndTearDown(metric);
        }
    };
    // hiddenObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
    tearDownGroup.push(function () { return hiddenObserver[1](hiddenCallback); });
    hiddenObserver[0](hiddenCallback);
};
export var LCP = [LCP_METRIC_NAME, getLCP];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/monitors/performance-new/lcp.js.map