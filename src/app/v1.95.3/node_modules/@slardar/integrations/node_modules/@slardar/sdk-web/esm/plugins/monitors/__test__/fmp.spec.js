import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../../utils/__test__/util';
import { FMPMonitorPlugin } from '../fmp';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    // eslint-disable-next-line compat/compat
    Object.defineProperty(window.performance, 'getEntriesByName', {
        value: function () { return [
            {
                toJSON: function () { return ''; },
                duration: 0,
                entryType: 'paint',
                name: 'first-paint',
                startTime: 100, // 模拟 first-paint 的开始时间
            },
        ]; },
    });
});
test.serial('FMPMonitorPlugin - SSR - notSupport', function (t) {
    var client = createTestWebClient();
    FMPMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            fmp: {
                renderType: 'SSR',
            },
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'fmp',
            type: 'perf',
            isSupport: false,
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});
test.serial('FMPMonitorPlugin - SSR - support', function (t) {
    var MockPerformanceObserver = /** @class */ (function () {
        function MockPerformanceObserver(cb) {
            ;
            this.observe = function () {
                cb({
                    getEntries: function () {
                        return {};
                    },
                }, {
                    disconnect: sinon.fake(),
                });
                return {};
            };
        }
        MockPerformanceObserver.prototype.disconnect = function () { };
        return MockPerformanceObserver;
    }());
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    // eslint-disable-next-line compat/compat
    window.PerformanceObserver = MockPerformanceObserver;
    var client = createTestWebClient();
    FMPMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            fmp: {
                renderType: 'SSR',
            },
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'fmp',
            value: 100,
            isSupport: true,
            isPolyfill: false,
            isBounced: false,
            isCustom: false,
            type: 'perf',
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});
test.serial('FMPMonitorPlugin - CSR - not support', function (t) {
    var client = createTestWebClient();
    FMPMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            fmp: {
                renderType: 'CSR',
            },
        },
    });
    client.start();
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'fmp',
            type: 'perf',
            isSupport: false,
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});
test.serial('FMPMonitorPlugin - CSR - not support if send second PV', function (t) {
    // eslint-disable-next-line compat/compat
    Object.defineProperty(window.performance, 'timing', {
        value: {
            loadEventEnd: 8000,
            navigationStart: 3000,
        },
        writable: true,
    });
    var client = createTestWebClient();
    FMPMonitorPlugin(client);
    var onReport = sinon.fake();
    client.on('report', onReport);
    client.init({
        pid: 'pid0',
        viewId: 'viewId0',
        plugins: {
            fmp: {
                renderType: 'CSR',
            },
        },
    });
    client.start();
    t.true(onReport.notCalled);
    // second PV
    client.config({
        pid: 'pid1',
        viewId: 'viewId1',
    });
    t.true(onReport.calledOnce);
    t.like(onReport.args[0][0], {
        ev_type: 'performance',
        payload: {
            name: 'fmp',
            type: 'perf',
            isSupport: false,
        },
        overrides: { pid: 'pid0', view_id: 'viewId0' },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/plugins/monitors/__test__/fmp.spec.js.map