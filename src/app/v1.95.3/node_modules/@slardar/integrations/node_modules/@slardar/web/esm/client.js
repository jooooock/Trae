/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
/* eslint-disable no-unused-labels */
var _a;
import { LoggerPlugin } from '@slardar/sdk-template';
import { PageviewMonitorPlugin, SamplePlugin, CustomPlugin, PAGEVIEW_MONITOR_PLUGIN_NAME, AjaxMonitorPlugin, AJAX_MONITOR_PLUGIN_NAME, FetchMonitorPlugin, FETCH_MONITOR_PLUGIN_NAME, TTIMonitorPlugin, TTI_MONITOR_PLUGIN_NAME, FMPMonitorPlugin, FMP_MONITOR_PLUGIN_NAME, } from '@slardar/sdk-web';
import { loadPluginsOnPageLoad, register } from './loader';
import { createMinimalBrowserClient } from './minimal';
import { PrecollectPlugin } from './plugins';
export var PluginMap = (_a = {},
    _a[PAGEVIEW_MONITOR_PLUGIN_NAME] = PageviewMonitorPlugin,
    _a[AJAX_MONITOR_PLUGIN_NAME] = AjaxMonitorPlugin,
    _a[FETCH_MONITOR_PLUGIN_NAME] = FetchMonitorPlugin,
    _a[TTI_MONITOR_PLUGIN_NAME] = TTIMonitorPlugin,
    _a[FMP_MONITOR_PLUGIN_NAME] = FMPMonitorPlugin,
    _a);
export var createBrowserClient = function (config) {
    if (config === void 0) { config = {}; }
    var client = createMinimalBrowserClient(config);
    SamplePlugin(client);
    PrecollectPlugin(client);
    debug: {
        // for debug
        LoggerPlugin(client);
    }
    CustomPlugin(client);
    // register and apply plugins
    Object.keys(PluginMap).forEach(function (pluginName) {
        register(pluginName, PluginMap[pluginName]);
        PluginMap[pluginName](client);
    });
    // Because loadPluginsOnPageLoad is dependent on page_load and client.on('init', ...), it must be called after the preset plugins are loaded to avoid early fetching independent plugins like 'pageview...'
    loadPluginsOnPageLoad(client);
    // allow creating other instances using the current instance
    client.provide('create', createBrowserClient);
    return client;
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/web/esm/client.js.map