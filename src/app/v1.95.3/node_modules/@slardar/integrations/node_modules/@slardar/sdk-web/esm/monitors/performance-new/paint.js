import { __read } from "tslib";
import { observePerf } from '../../collector';
import { getDefaultPerformanceObserver, getDefaultPerformance, applyPerformance } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric } from './util';
export var FCP_ENTRY_NAME = 'first-contentful-paint';
export var FP_ENTRY_NAME = 'first-paint';
export var FP_METRIC_NAME = "fp" /* fp */;
export var FCP_METRIC_NAME = "fcp" /* fcp */;
var Paint_Type = 'paint';
var getFP = function (report, tearDownGroup, context) {
    return getPaint(FP_ENTRY_NAME, FP_METRIC_NAME, report, tearDownGroup, context);
};
var getFCP = function (report, tearDownGroup, context) {
    return getPaint(FCP_ENTRY_NAME, FCP_METRIC_NAME, report, tearDownGroup, context);
};
export var getPaint = function (entryName, metricName, report, tearDownGroup, _a) {
    var _b = __read(_a, 2), hiddenObserver = _b[0], unloadObserver = _b[1];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var performance = getDefaultPerformance();
    var metric = initMetric(metricName, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!performance || !PerformanceObserver) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    var invokePaint = function (_a) {
        var startTime = _a.startTime;
        metric.value = startTime;
        sendOnceAndTearDown(metric);
    };
    var _c = __read(applyPerformance(performance), 5), getEntriesByName = _c[4];
    var paint = getEntriesByName(entryName)[0];
    if (paint) {
        invokePaint(paint);
        return;
    }
    tearDownGroup.push(observePerf(PerformanceObserver, function (entry) {
        entry.name === entryName && invokePaint(entry);
    }, [Paint_Type]));
    tearDownGroup.push(unloadObserver[0](function () {
        metric.isBounced = true;
        sendOnceAndTearDown(metric);
    }));
    var hiddenCallback = function (isHidden) {
        if (isHidden) {
            metric.isSupport = false;
            sendOnceAndTearDown(metric);
        }
    };
    // hiddenObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
    tearDownGroup.push(function () { return hiddenObserver[1](hiddenCallback); });
    hiddenObserver[0](hiddenCallback);
};
export var FP = [FP_METRIC_NAME, getFP];
export var FCP = [FCP_METRIC_NAME, getFCP];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/monitors/performance-new/paint.js.map