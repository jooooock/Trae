import { __awaiter, __generator, __read } from "tslib";
/* eslint-disable @typescript-eslint/ban-ts-comment */
import { promisify } from 'util';
import test from 'ava';
import sinon from 'sinon';
import { PERFORMANCE_METRIC_EV_TYPE, ACTION_EV_TYPE, HTTP_EV_TYPE, RESOURCE_EV_TYPE, LONG_TASK_EV_TYPE, BLANK_SCREEN_EV_TYPE, JS_ERROR_EV_TYPE, RESOURCE_ERROR_EV_TYPE, } from '../../../constants';
import { getViewId, joinWithSeparator, getDefaultExtractor, applyOnPidChange, getDefaultApdexDetail, getRank, calculateSpentTime, applyCalculateWight, calculateApdex, calculateSession, } from '../util';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('joinWithSeparator', function (t) {
    t.true(joinWithSeparator(0, 2) === '0_2');
    t.true(joinWithSeparator('0', 1) === '0_1');
    t.true(joinWithSeparator('', '') === '_');
    t.true(joinWithSeparator('e', 'e') === 'e_e');
});
test('getViewId', function (t) {
    t.true(getViewId('')[0] === '_');
    t.true(getViewId('0')[0] === '0');
    t.true(getViewId('/').length >= 14);
});
test('getDefaultExtractor', function (t) {
    var url = 'https://slardar.bytedance.net/node/app_detail/?aid=13&os=Android&region=cn&bid=&pid=#/alarm/newEvent';
    var hashExtractor = getDefaultExtractor('hash');
    t.is(hashExtractor(url), '/alarm/newEvent');
    var historyExtractor = getDefaultExtractor('history');
    t.is(historyExtractor(url), '/node/app_detail/');
    var manualExtractor = getDefaultExtractor('manual');
    t.is(manualExtractor(url), '/node/app_detail/');
    var url2 = 'https://slardar.bytedance.net/app_detail#hash_key';
    t.is(hashExtractor(url2), 'hash_key');
    t.is(historyExtractor(url2), '/app_detail');
    t.is(manualExtractor(url2), '/app_detail');
});
test('applyOnPidChange - user_set', function (t) {
    var report = sinon.fake();
    var pidUpdateCallback = sinon.fake();
    var _a = __read(applyOnPidChange(report, 'initPid', 'originPid', pidUpdateCallback), 2), onPidChange = _a[0], sendInit = _a[1];
    // update pid first
    t.assert(pidUpdateCallback.calledOnce);
    sendInit();
    t.assert(report.calledOnce);
    t.assert(report.args[0][0] === 'init' && report.args[0][1] === 'initPid');
    onPidChange("user_set" /* user_set */, 'secondPid', 'originPid2');
    t.assert(report.calledTwice);
    t.assert(pidUpdateCallback.calledTwice);
    t.assert(report.args[1][0] === "user_set" /* user_set */ && report.args[1][1] === 'secondPid');
    // not send pageview if pid is same wih last pid
    onPidChange("user_set" /* user_set */, 'secondPid', 'originPid3');
    t.assert(report.calledTwice);
    t.assert(pidUpdateCallback.calledTwice);
    onPidChange("user_set" /* user_set */, 'thirdPid', 'originPid3');
    t.assert(report.calledThrice);
    t.assert(pidUpdateCallback.calledThrice);
    t.assert(report.args[2][0] === "user_set" /* user_set */ && report.args[2][1] === 'thirdPid');
});
test('applyOnPidChange - history', function (t) {
    var report = sinon.fake();
    var pidUpdateCallback = sinon.fake();
    var _a = __read(applyOnPidChange(report, 'initPid', 'originPid', pidUpdateCallback), 1), onPidChange = _a[0];
    // update pid first
    t.assert(pidUpdateCallback.calledOnce);
    // not send pageview if pid is same wih last pid
    onPidChange("history" /* history */, 'originPid', 'customPid');
    t.assert(report.notCalled);
    t.assert(pidUpdateCallback.calledOnce);
    onPidChange("history" /* history */, 'originPid2', 'customPid2');
    t.assert(report.calledOnce);
    t.assert(pidUpdateCallback.calledTwice);
    t.assert(report.args[0][0] === "history" /* history */ && report.args[0][1] === 'customPid2');
    onPidChange("history" /* history */, 'originPid3', undefined);
    t.assert(report.calledTwice);
    t.assert(pidUpdateCallback.calledThrice);
    t.assert(report.args[1][0] === "history" /* history */ && report.args[1][1] === 'originPid3');
    onPidChange("history" /* history */, 'originPid4', 'customPid4');
    t.assert(report.calledThrice);
    t.assert(report.args[2][0] === "history" /* history */ && report.args[2][1] === 'customPid4');
});
test('applyOnPidChange - hash', function (t) {
    var report = sinon.fake();
    var pidUpdateCallback = sinon.fake();
    var _a = __read(applyOnPidChange(report, 'initPid', 'originPid', pidUpdateCallback), 1), onPidChange = _a[0];
    // update pid first
    t.assert(pidUpdateCallback.calledOnce);
    onPidChange("hash" /* hash */, 'originPid2', 'customPid2');
    t.assert(report.calledOnce);
    t.assert(pidUpdateCallback.calledTwice);
    t.assert(report.args[0][0] === "hash" /* hash */ && report.args[0][1] === 'customPid2');
    // not send pageview if pid is same wih last pid
    onPidChange("hash" /* hash */, 'originPid2', 'customPid3');
    t.assert(report.calledOnce);
    t.assert(pidUpdateCallback.calledTwice);
    onPidChange("hash" /* hash */, 'originPid3', undefined);
    t.assert(report.calledTwice);
    t.assert(pidUpdateCallback.calledThrice);
    t.assert(report.args[1][0] === "hash" /* hash */ && report.args[1][1] === 'originPid3');
    onPidChange("hash" /* hash */, 'originPid4', 'customPid4');
    t.assert(report.calledThrice);
    t.assert(report.args[2][0] === "hash" /* hash */ && report.args[2][1] === 'customPid4');
});
test('applyOnPidChange - mix', function (t) {
    var report = sinon.fake();
    var pidUpdateCallback = sinon.fake();
    var _a = __read(applyOnPidChange(report, 'initPid', 'originPid', pidUpdateCallback), 1), onPidChange = _a[0];
    // update pid first
    t.assert(pidUpdateCallback.calledOnce);
    onPidChange("hash" /* hash */, 'originPid2', 'customPid2');
    t.assert(report.calledOnce);
    t.assert(report.args[0][0] === "hash" /* hash */ && report.args[0][1] === 'customPid2');
    onPidChange("history" /* history */, 'originPid3', '');
    t.assert(report.calledTwice);
    t.assert(report.args[1][0] === "history" /* history */ && report.args[1][1] === '');
    onPidChange("user_set" /* user_set */, 'finalPid', undefined);
    t.assert(report.calledThrice);
    t.assert(report.args[2][0] === "user_set" /* user_set */ && report.args[2][1] === 'finalPid');
});
test('getDefaultApdexDetail', function (t) {
    t.deepEqual(getDefaultApdexDetail(), {
        error_count: [0, 0, 0, 0],
        duration_count: [0, 0, 0],
        perf_apdex: {},
    });
});
test('getRank', function (t) {
    var setting = {
        error_weight: [],
        duration_apdex: [],
        perf_apdex: {},
        last_n: 10,
        frustrating_threshold: 0.3,
        satisfying_threshold: 0.3,
    };
    // if no apdex, the value is 0
    t.is(getRank([0, 0, 0], setting), 0);
    t.is(getRank([5, 5, 5], setting), 2);
    t.is(getRank([10, 5, 5], setting), 0);
    t.is(getRank([5, 10, 5], setting), 1);
    // if no field, the value is 1
    t.is(getRank([5, 5, 5], {}), 1);
});
test.serial('calculateSpentTime', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, handleHidden, getSpentTime;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = __read(calculateSpentTime(), 2), handleHidden = _a[0], getSpentTime = _a[1];
                // hidden 200ms first and show 100ms
                handleHidden(true);
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 1:
                _b.sent();
                handleHidden(true);
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 2:
                _b.sent();
                handleHidden(false);
                return [4 /*yield*/, promisify(setTimeout)(100)];
            case 3:
                _b.sent();
                t.assert(getSpentTime() <= 150);
                // show 200ms first and hidden
                handleHidden(false);
                return [4 /*yield*/, promisify(setTimeout)(200)];
            case 4:
                _b.sent();
                handleHidden(true);
                t.assert(getSpentTime() >= 200);
                return [4 /*yield*/, promisify(setTimeout)(100)];
            case 5:
                _b.sent();
                t.assert(getSpentTime() >= 100);
                // show 100ms first and hidden 100ms
                return [4 /*yield*/, promisify(setTimeout)(100)];
            case 6:
                // show 100ms first and hidden 100ms
                _b.sent();
                handleHidden(true);
                return [4 /*yield*/, promisify(setTimeout)(100)];
            case 7:
                _b.sent();
                handleHidden(false);
                t.assert(getSpentTime() <= 150);
                return [2 /*return*/];
        }
    });
}); });
test('applyCalculateWight', function (t) {
    var handleDuration = sinon.fake();
    var handleError = sinon.fake();
    var setting = {
        satisfying_threshold: 0.5,
        frustrating_threshold: 0.3,
        error_weight: [3, 3, 2, 5000],
        duration_apdex: [
            // request
            [{ weight: 0, threshold: 2000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
            // resource
            [{ weight: 0, threshold: 500 }, { weight: 3, threshold: 1500 }, { weight: 3 }],
            // long task
            [{ weight: 0, threshold: 1000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
        ],
        perf_apdex: {
            fcp: [{ weight: 3, threshold: 1000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
        },
        last_n: 3 * 60 * 1000,
    };
    var handleEvent = applyCalculateWight(handleDuration, handleError);
    handleEvent({
        ev_type: PERFORMANCE_METRIC_EV_TYPE,
        payload: {
            isSupport: true,
            name: 'fcp',
            type: 'pref',
            value: 1000,
        },
        common: {},
    }, setting);
    t.deepEqual(handleDuration.args[0][0], setting.perf_apdex);
    t.assert(handleDuration.args[0][1], 'fcp');
    t.is(handleDuration.args[0][2], 1000);
    handleEvent({
        ev_type: PERFORMANCE_METRIC_EV_TYPE,
        payload: {
            isSupport: false,
            name: 'fcp',
            type: 'pref',
            value: 1000,
        },
        common: {},
    }, setting);
    t.falsy(handleDuration.calledTwice);
    handleEvent({
        ev_type: ACTION_EV_TYPE,
        payload: {
            start_time: 0,
            id: 'xxx',
            type: 'xxx',
            duration: 100,
            target: {
                name: 'non-association-action-name',
            },
        },
        common: {},
    }, setting);
    t.deepEqual(handleDuration.args[1][0], setting.perf_apdex);
    t.assert(handleDuration.args[1][1], 'action');
    t.is(handleDuration.args[1][2], 100);
    handleEvent({
        ev_type: JS_ERROR_EV_TYPE,
        payload: {
            error: {
                message: 'xxx',
            },
            breadcrumbs: [],
        },
        common: {},
    }, setting);
    t.deepEqual(handleError.args[0][0], setting.error_weight);
    t.is(handleError.args[0][1], 0);
    handleEvent({
        ev_type: HTTP_EV_TYPE,
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 200,
                is_custom_error: false,
                headers: {},
                timestamp: 0,
            },
        },
        common: {},
    }, setting);
    t.falsy(handleDuration.calledThrice);
    handleEvent({
        ev_type: HTTP_EV_TYPE,
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 200,
                is_custom_error: false,
                headers: {},
                timestamp: 0,
                // @ts-ignore
                timing: {
                    duration: 300,
                },
            },
        },
        common: {},
    }, setting);
    t.deepEqual(handleDuration.args[2][0], setting.duration_apdex);
    t.is(handleDuration.args[2][1], 0);
    t.is(handleDuration.args[2][2], 300);
    handleEvent({
        ev_type: HTTP_EV_TYPE,
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 200,
                is_custom_error: true,
                headers: {},
                timestamp: 0,
                // @ts-ignore
                timing: {
                    duration: 300,
                },
            },
        },
        common: {},
    }, setting);
    t.deepEqual(handleError.args[1][0], setting.error_weight);
    t.is(handleError.args[1][1], 1);
    handleEvent({
        ev_type: HTTP_EV_TYPE,
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 500,
                is_custom_error: false,
                headers: {},
                timestamp: 0,
                // @ts-ignore
                timing: {
                    duration: 300,
                },
            },
        },
        common: {},
    }, setting);
    t.deepEqual(handleError.args[2][0], setting.error_weight);
    t.is(handleError.args[2][1], 1);
    handleEvent({
        ev_type: RESOURCE_ERROR_EV_TYPE,
        payload: {
            type: 'script',
            url: '',
        },
        common: {},
    }, setting);
    t.deepEqual(handleError.args[3][0], setting.error_weight);
    t.is(handleError.args[3][1], 2);
    handleEvent({
        ev_type: BLANK_SCREEN_EV_TYPE,
        payload: {
            timestamp: 0,
            score: 0,
        },
        common: {},
    }, setting);
    t.deepEqual(handleError.args[4][0], setting.error_weight);
    t.is(handleError.args[4][1], 3);
    handleEvent({
        ev_type: RESOURCE_EV_TYPE,
        // @ts-ignore
        payload: {
            duration: 400,
        },
        common: {},
    }, setting);
    t.deepEqual(handleDuration.args[3][0], setting.duration_apdex);
    t.is(handleDuration.args[3][1], 1);
    t.is(handleDuration.args[3][2], 400);
    handleEvent({
        ev_type: LONG_TASK_EV_TYPE,
        payload: {
            // @ts-ignore
            longtasks: [{ duration: 300 }, { duration: 500 }],
            type: 'pref',
        },
        common: {},
    }, setting);
    t.deepEqual(handleDuration.args[4][0], setting.duration_apdex);
    t.is(handleDuration.args[4][1], 2);
    t.is(handleDuration.args[4][2], 300);
    t.deepEqual(handleDuration.args[5][0], setting.duration_apdex);
    t.is(handleDuration.args[5][1], 2);
    t.is(handleDuration.args[5][2], 500);
    handleEvent({
        ev_type: PERFORMANCE_METRIC_EV_TYPE,
        payload: {
            isSupport: true,
            name: 'fcp',
            type: 'pref',
            value: 1000,
        },
        common: {},
    }, {});
    t.is(handleDuration.args[6][0], undefined);
    t.assert(handleDuration.args[6][1], 'fcp');
    t.is(handleDuration.args[6][2], 1000);
    handleEvent({
        ev_type: BLANK_SCREEN_EV_TYPE,
        payload: {
            timestamp: 0,
            score: 0,
        },
        common: {},
    }, {});
    t.is(handleError.args[5][0], undefined);
    t.is(handleError.args[5][1], 3);
});
test('calculateApdex', function (t) {
    var setting = {
        satisfying_threshold: 0.5,
        frustrating_threshold: 0.3,
        error_weight: [3, 3, 2, 5000],
        duration_apdex: [
            // request
            [{ weight: 0, threshold: 2000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
            // resource
            [{ weight: 0, threshold: 500 }, { weight: 3, threshold: 1500 }, { weight: 2 }],
            // long task
            [{ weight: 0, threshold: 1000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
        ],
        perf_apdex: {
            fcp: [{ weight: 3, threshold: 1000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
            lcp: [{ weight: 3, threshold: 1000 }, { weight: 3, threshold: 3000 }, { weight: 3 }],
        },
        last_n: 3 * 60 * 1000,
    };
    var _a = __read(calculateApdex(), 4), calculateDurationWeight = _a[0], calculateErrorWeight = _a[1], getApdex = _a[2], resetApdex = _a[3];
    calculateDurationWeight(setting.duration_apdex, 0, 300);
    var _b = __read(getApdex(), 2), apdexWeight = _b[0], apdexDetail = _b[1];
    t.is(apdexWeight[0], 0);
    t.is(apdexDetail.duration_count[0], 0);
    calculateDurationWeight(setting.duration_apdex, 0, 2500);
    t.is(apdexWeight[1], 3);
    t.is(apdexDetail.duration_count[0], 0);
    calculateDurationWeight(setting.duration_apdex, 0, 3500);
    t.is(apdexWeight[2], 3);
    t.is(apdexDetail.duration_count[0], 1);
    calculateDurationWeight(setting.duration_apdex, 0, 3500);
    t.is(apdexWeight[2], 6);
    t.is(apdexDetail.duration_count[0], 2);
    calculateDurationWeight(setting.duration_apdex, 1, 3500);
    t.is(apdexWeight[2], 8);
    t.is(apdexDetail.duration_count[1], 1);
    calculateDurationWeight(setting.perf_apdex, 'cls', 3500);
    t.deepEqual(apdexWeight, [0, 3, 8]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {},
    });
    calculateDurationWeight(setting.perf_apdex, 'fcp', 100);
    t.deepEqual(apdexWeight, [3, 3, 8]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 1,
        },
    });
    calculateDurationWeight(setting.perf_apdex, 'fcp', 100);
    t.deepEqual(apdexWeight, [6, 3, 8]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
        },
    });
    calculateDurationWeight(setting.perf_apdex, 'fcp', 1500);
    t.deepEqual(apdexWeight, [6, 6, 8]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
        },
    });
    calculateDurationWeight(setting.perf_apdex, 'fcp', 5000);
    t.deepEqual(apdexWeight, [6, 6, 11]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
        },
    });
    calculateDurationWeight(setting.perf_apdex, 'lcp', 5000);
    t.deepEqual(apdexWeight, [6, 6, 14]);
    t.deepEqual(apdexDetail, {
        error_count: [0, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(setting.error_weight, 0);
    t.deepEqual(apdexWeight, [6, 6, 17]);
    t.deepEqual(apdexDetail, {
        error_count: [1, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(setting.error_weight, 0);
    t.deepEqual(apdexWeight, [6, 6, 20]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 0, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(setting.error_weight, 1);
    t.deepEqual(apdexWeight, [6, 6, 23]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 0, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(setting.error_weight, 2);
    t.deepEqual(apdexWeight, [6, 6, 25]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 1, 0],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(setting.error_weight, 3);
    t.deepEqual(apdexWeight, [6, 6, 5025]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 1, 1],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateErrorWeight(undefined, 3);
    t.deepEqual(apdexWeight, [6, 6, 5025]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 1, 1],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    calculateDurationWeight(undefined, 'fcp', 5000);
    t.deepEqual(apdexWeight, [6, 6, 5025]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 1, 1],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
    resetApdex();
    t.deepEqual(apdexWeight, [6, 6, 5025]);
    t.deepEqual(apdexDetail, {
        error_count: [2, 1, 1, 1],
        duration_count: [2, 1, 0],
        perf_apdex: {
            fcp_0: 2,
            fcp_1: 1,
            fcp_2: 1,
            lcp_2: 1,
        },
    });
});
test('calculateSession', function (t) {
    var _a = __read(calculateSession(), 5), handleUnload = _a[0], handlePageview = _a[1], handleAction = _a[2], setEntry = _a[3], getSessionPayload = _a[4];
    var sessionPayload = getSessionPayload();
    setEntry('firstPid');
    t.is(sessionPayload.entry, 'firstPid');
    t.is(sessionPayload.exit, 'firstPid');
    setEntry('secondPid');
    t.is(sessionPayload.entry, 'secondPid');
    t.is(sessionPayload.exit, 'secondPid');
    handleAction();
    t.is(sessionPayload.a_count, 1);
    handleAction();
    t.is(sessionPayload.a_count, 2);
    var lastPage = {
        start: 1,
        pid: 'secondPid',
        view_id: '33',
        end: 2,
        time_spent: 34,
        apdex: [0, 0, 0],
        rank: 1,
        detail: {
            error_count: [0, 0, 0, 0],
            duration_count: [0, 0, 0],
            perf_apdex: {},
        },
    };
    handlePageview(lastPage, 'newPid');
    t.true(sessionPayload.time_spent === 34);
    t.is(sessionPayload.p_count, 1);
    t.is(sessionPayload.exit, 'newPid');
    var exitPage = {
        start: 1,
        pid: 'newPid',
        view_id: '33',
        end: 2,
        time_spent: 34,
        apdex: [0, 0, 0],
        rank: 1,
        detail: {
            error_count: [0, 0, 0, 0],
            duration_count: [0, 0, 0],
            perf_apdex: {},
        },
    };
    handleUnload([
        1,
        [1, 1, 1],
        {
            error_count: [1, 1, 1, 1],
            duration_count: [0, 0, 0],
            perf_apdex: {},
        },
    ], exitPage);
    t.true(sessionPayload.start > 0);
    t.true(sessionPayload.end > 0);
    t.true(sessionPayload.time_spent === 68);
    t.is(sessionPayload.entry, 'secondPid');
    t.is(sessionPayload.exit, 'newPid');
    t.is(sessionPayload.p_count, 2);
    t.is(sessionPayload.a_count, 2);
    t.deepEqual(sessionPayload.last_page, exitPage);
    t.is(sessionPayload.rank, 1);
    t.deepEqual(sessionPayload.apdex, [1, 1, 1]);
    t.deepEqual(sessionPayload.apdex_detail, {
        error_count: [1, 1, 1, 1],
        duration_count: [0, 0, 0],
        perf_apdex: {},
    });
    t.is(sessionPayload.is_bounced, false);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/sdk-web/esm/monitors/pageview/__test__/util.spec.js.map