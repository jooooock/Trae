import test from 'ava';
import sinon from 'sinon';
import { createTestWebClient } from '../../__test__/util';
import { TimeCalibrationPlugin } from '../time-calibration';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('InjectEnvPlugin without serverTime', function (t) {
    var client = createTestWebClient();
    TimeCalibrationPlugin(client);
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
    });
    client.start();
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
        extra: {
            url: 'origin url',
        },
    });
    t.assert(onBuild.calledOnce);
    t.is(onBuild.args[0][0].extra.sdk_offset, undefined);
});
test('InjectEnvPlugin with invalid serverTimestamp', function (t) {
    var _a;
    var client = createTestWebClient();
    TimeCalibrationPlugin(client);
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
    });
    client.config().serverTimestamp = -1;
    client.config({
        userId: 'test',
    });
    t.is((_a = client.config()) === null || _a === void 0 ? void 0 : _a.serverTimestamp, -1);
    client.start();
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
        extra: {
            url: 'origin url',
        },
    });
    t.assert(onBuild.calledOnce);
    t.is(onBuild.args[0][0].extra.sdk_offset, undefined);
});
test('InjectEnvPlugin with valid serverTimestamp', function (t) {
    var _a, _b;
    var client = createTestWebClient();
    TimeCalibrationPlugin(client);
    var onBuild = sinon.fake();
    client.on('build', onBuild);
    client.init({
        bid: 'bid',
    });
    client.config().serverTimestamp = 1;
    client.config({
        userId: 'test',
    });
    t.is((_a = client.config()) === null || _a === void 0 ? void 0 : _a.serverTimestamp, 1);
    client.start();
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
        extra: {
            url: 'origin url',
        },
    });
    t.assert(onBuild.calledOnce);
    t.is(typeof onBuild.args[0][0].extra.sdk_offset, 'number');
    // only use the init serverTimestamp
    client.config().serverTimestamp = 30;
    client.config({
        pid: 'test',
    });
    t.is((_b = client.config()) === null || _b === void 0 ? void 0 : _b.serverTimestamp, 30);
    client.report({
        ev_type: 'pageview',
        payload: {
            pid: 'init-pid',
            source: 'init',
        },
        extra: {
            url: 'origin url',
        },
    });
    t.assert(onBuild.calledTwice);
    t.true(onBuild.args[0][0].extra.sdk_offset === onBuild.args[1][0].extra.sdk_offset);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/integrations/node_modules/@slardar/web/esm/plugins/__test__/time-calibration.spec.js.map