import { __assign } from "tslib";
import { id, initSubjectInGlobal, createSafeObserver, registerTearDownGroup, } from '@slardar/sdk-template';
import { reportWithCurrentContext } from '../../collector/client';
import { fetchSubject, hookFetch } from '../../collector/http';
import { resourceSubject } from '../../collector/perf';
import { HTTP_EV_TYPE } from '../../constants';
import { httpGetterWithFetchObserver } from '../../monitors/http/fetch';
import { setTraceContext, setVolTraceContext } from '../../monitors/http/trace';
import { getConfig } from '../../utils';
import { getPluginConfig } from './utils';
export var FETCH_MONITOR_PLUGIN_NAME = 'fetch';
var defaultConfig = {
    autoWrap: true,
    setContextAtReq: function () { return id; },
    ignoreUrls: [],
    collectBodyOnError: false,
};
export function FetchMonitorBasePlugin(client, c) {
    var config = getConfig(c, defaultConfig);
    if (!config) {
        return;
    }
    var tearDownGroup = [];
    var fetchConfig = __assign(__assign({}, config), { setContextAtReq: function () { return reportWithCurrentContext(client, true); }, setTraceHeader: setTraceContext(config.trace) });
    var getResourceObserver = function () { return initSubjectInGlobal(client, resourceSubject); };
    fetchConfig.autoWrap &&
        httpGetterWithFetchObserver(tearDownGroup, [initSubjectInGlobal(client, fetchSubject), getResourceObserver], fetchConfig);
    registerTearDownGroup(client, FETCH_MONITOR_PLUGIN_NAME, HTTP_EV_TYPE, tearDownGroup);
    client.provide('wrapFetch', function (f) {
        var newFetch = undefined;
        httpGetterWithFetchObserver(tearDownGroup, [
            createSafeObserver(function (next) {
                newFetch = hookFetch(f, next);
            }),
            getResourceObserver,
        ], fetchConfig);
        return newFetch;
    });
}
export function FetchMonitorPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = (_a = client.config()) === null || _a === void 0 ? void 0 : _a.plugins[FETCH_MONITOR_PLUGIN_NAME];
        FetchMonitorBasePlugin(client, config);
    });
}
export function FetchMonitorVolPlugin(client) {
    client.on('init', function () {
        var _a;
        var config = getPluginConfig(client, FETCH_MONITOR_PLUGIN_NAME, defaultConfig);
        if (!config) {
            return;
        }
        var tearDownGroup = [];
        var fetchConfig = __assign(__assign({}, config), { setContextAtReq: function () { return reportWithCurrentContext(client, true); }, setTraceHeader: setVolTraceContext(config.trace, "app_id=" + ((_a = client.config()) === null || _a === void 0 ? void 0 : _a.aid) + ",origin=web") });
        fetchConfig.autoWrap &&
            httpGetterWithFetchObserver(tearDownGroup, [initSubjectInGlobal(client, fetchSubject), function () { return initSubjectInGlobal(client, resourceSubject); }], fetchConfig);
        registerTearDownGroup(client, FETCH_MONITOR_PLUGIN_NAME, HTTP_EV_TYPE, tearDownGroup);
    });
}//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/plugins/monitors/fetch.js.map