import test from 'ava';
import { htmlTreeAsString } from '../dom';
test('html to string', function (t) {
    var elem1 = {
        tagName: 'div',
        id: '123',
        className: '99',
        name: 'elem1',
        getAttribute: function (id) {
            return this[id];
        },
    };
    var elem2 = {
        tagName: 'a',
        className: 'aaa',
        title: 'elem2',
        parentNode: elem1,
        getAttribute: function (id) {
            return this[id];
        },
    };
    t.is(htmlTreeAsString(elem2), '#123 > a.aaa[title="elem2"]');
});
test('it work when element getAttribute return null', function (t) {
    var elem1 = {
        tagName: 'LINK',
        getAttribute: function () {
            return null;
        },
    };
    t.is(htmlTreeAsString(elem1), 'link');
});
test('get nth of type when the element has previous siblings', function (t) {
    var elem1 = {
        tagName: 'div',
        id: '123',
        className: '99',
        name: 'elem1',
        getAttribute: function (id) {
            return this[id];
        },
    };
    var elem2 = {
        tagName: 'a',
        className: 'aaa',
        title: 'elem2',
        parentNode: elem1,
        getAttribute: function (id) {
            return this[id];
        },
    };
    var elem3 = {
        tagName: 'a',
        className: 'aaa',
        title: 'elem2',
        parentNode: elem1,
        getAttribute: function (id) {
            return this[id];
        },
        previousElementSibling: elem2,
    };
    t.is(htmlTreeAsString(elem3), '#123 > a.aaa[title="elem2"]:nth-of-type(2)');
});
test('get nth of type when the element has previous siblings when only uniq', function (t) {
    var elem1 = {
        tagName: 'div',
        id: '123',
        className: '99',
        name: 'elem1',
        getAttribute: function (id) {
            return this[id];
        },
    };
    var elem2 = {
        tagName: 'a',
        className: 'aaa',
        title: 'elem2',
        parentNode: elem1,
        getAttribute: function (id) {
            return this[id];
        },
    };
    var elem3 = {
        tagName: 'a',
        className: 'aaa',
        title: 'elem3',
        parentNode: elem1,
        getAttribute: function (id) {
            return this[id];
        },
        previousElementSibling: elem2,
    };
    t.is(htmlTreeAsString(elem3), '#123 > a.aaa[title="elem3"]');
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/utils/__test__/dom.spec.js.map