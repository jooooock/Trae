import { __read } from "tslib";
import { getRegexp, arrayIncludes } from '@slardar/sdk-template';
import { RESOURCE_EV_TYPE } from '../../constants';
import { getDefaultPerformance, applyPerformance } from '../../utils';
var RESOURCE_PERFORMANCE_ENTRY_TYPE = 'resource';
var RESOURCE_IGNORE_TYPES = ['xmlhttprequest', 'fetch', 'beacon'];
export var resourceGetterWithContext = function (report, tearDownGroup, _a, config) {
    var _b = __read(_a, 2), loadObserver = _b[0], getResourceObserver = _b[1];
    var performance = getDefaultPerformance();
    if (!performance)
        return;
    var ignoreUrls = config.ignoreUrls, slowSessionThreshold = config.slowSessionThreshold, ignoreTypes = config.ignoreTypes;
    var ignoreRegExp = getRegexp(ignoreUrls);
    var reportResource = function (entry, isSlowSession) {
        if (isSlowSession === void 0) { isSlowSession = false; }
        if (arrayIncludes(ignoreTypes || RESOURCE_IGNORE_TYPES, entry.initiatorType) ||
            (ignoreRegExp && ignoreRegExp.test(entry.name)))
            return;
        var data = { ev_type: RESOURCE_EV_TYPE, payload: entry };
        isSlowSession && (data.extra = { sample_rate: 1 });
        report(data);
    };
    tearDownGroup.push(loadObserver[0](function () {
        var _a = __read(applyPerformance(performance), 3), timing = _a[0], getEntriesByType = _a[2];
        // make sure all resource of slow session can be reported
        var checkSlowSession = function () {
            if (!timing) {
                return false;
            }
            var loadTime = timing.loadEventEnd - timing.navigationStart;
            return loadTime > slowSessionThreshold;
        };
        var isSlowSession = checkSlowSession();
        var cacheEntries = getEntriesByType(RESOURCE_PERFORMANCE_ENTRY_TYPE);
        cacheEntries.forEach(function (e) { return reportResource(e, isSlowSession); });
        tearDownGroup.push(getResourceObserver()[0](function (entry) {
            reportResource(entry);
        }));
    }));
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/monitors/resource/index.js.map