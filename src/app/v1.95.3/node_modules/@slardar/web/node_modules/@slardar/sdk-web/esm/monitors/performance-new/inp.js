import { __read } from "tslib";
import { observePerfWithBuffer } from '../../collector/perf';
import { getDefaultPerformanceObserver, getDefaultPerformanceEventTiming, getDefaultPerformance, htmlTreeAsString, } from '../../utils';
import { initMetric } from '../performance/util';
import { FI_ENTRY_NAME } from './fid';
import { applyReportMetric } from './util';
export var EVENT_TIMING_TYPE = 'event';
export var INP_METRIC_NAME = "inp" /* inp */;
export var MAX_INTERACTIONS_TO_CONSIDER = 10;
export var initInteractionCountPolyfill = function (po, tearDownGroup) {
    var interactionCountEstimate = 0;
    var minKnownInteractionId = Infinity;
    var maxKnownInteractionId = 0;
    var updateEstimate = function (e) {
        if (e.interactionId) {
            minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);
            maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);
            interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;
        }
    };
    tearDownGroup.push(observePerfWithBuffer(po, updateEstimate, EVENT_TIMING_TYPE, 0));
    return [
        function () {
            return interactionCountEstimate;
        },
    ];
};
var getINP = function (report, tearDownGroup, _a) {
    var _b = __read(_a, 3), activatedObserver = _b[0], getPVObserver = _b[1], getUnloadObserver = _b[2];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var PerformanceEventTiming = getDefaultPerformanceEventTiming();
    var performance = getDefaultPerformance();
    var metric = initMetric(INP_METRIC_NAME, 0);
    var reportMetric = applyReportMetric(report);
    if (!PerformanceObserver || !PerformanceEventTiming || !performance) {
        metric.isSupport = false;
        reportMetric(metric);
        return;
    }
    var prevInteractionCount = 0;
    // top 10 longest interactionList and the first one is the longest
    var longestInteractionList = [];
    // a mapping of longest interactions by their interaction ID.
    var longestInteractionMap = {};
    var resetStatus = function () {
        prevInteractionCount = getInteractionCount();
        longestInteractionList = [];
        longestInteractionMap = {};
    };
    var processEntry = function (entry) {
        var minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];
        var existingInteraction = longestInteractionMap[entry.interactionId];
        // update longestInteractionList info if necessary: if the interaction already exists, update it, otherwise create one.
        if (existingInteraction ||
            longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||
            entry.duration > minLongestInteraction.latency) {
            if (existingInteraction) {
                existingInteraction.entries.push(entry);
                existingInteraction.latency = Math.max(existingInteraction.latency, entry.duration);
            }
            else {
                var interaction = {
                    id: entry.interactionId,
                    latency: entry.duration,
                    entries: [entry],
                };
                longestInteractionMap[interaction.id] = interaction;
                longestInteractionList.push(interaction);
            }
            // sort the longestInteractionList again.
            longestInteractionList.sort(function (a, b) { return b.latency - a.latency; });
            longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(function (i) {
                delete longestInteractionMap[i.id];
            });
        }
    };
    var _c = __read(initInteractionCountPolyfill(PerformanceObserver, tearDownGroup), 1), getInteractionCount = _c[0];
    var getInteractionCountForNavigation = function () {
        return getInteractionCount() - prevInteractionCount;
    };
    var estimateP98LongestInteraction = function () {
        var candidateInteractionIndex = Math.min(longestInteractionList.length - 1, Math.floor(getInteractionCountForNavigation() / 50));
        return longestInteractionList[candidateInteractionIndex];
    };
    var updateMetric = function () {
        var inp = estimateP98LongestInteraction();
        if (inp) {
            metric.value = inp.latency;
            // add element if have
            var target = inp.entries[0].target;
            target && (metric.extra = { element: htmlTreeAsString(target) });
        }
    };
    var handleEntry = function (entry) {
        if (entry.interactionId) {
            processEntry(entry);
        }
        if (entry.entryType === 'first-input') {
            var noMatchingEntry = !longestInteractionList.some(function (interaction) {
                return interaction.entries.some(function (prevEntry) {
                    return entry.duration === prevEntry.duration && entry.startTime === prevEntry.startTime;
                });
            });
            // only consider if no matching entry
            if (noMatchingEntry) {
                processEntry(entry);
            }
        }
    };
    tearDownGroup.push(activatedObserver[0](function () {
        // observe event
        tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, handleEntry, EVENT_TIMING_TYPE, 40));
        // observe FI if support interactionId
        if ('interactionId' in PerformanceEventTiming.prototype) {
            tearDownGroup.push(observePerfWithBuffer(PerformanceObserver, handleEntry, FI_ENTRY_NAME));
        }
        var pvObserver = getPVObserver();
        tearDownGroup.push(pvObserver[0](function (overrides) {
            updateMetric();
            reportMetric(metric, overrides);
            resetStatus();
            // set new metric
            metric = initMetric(INP_METRIC_NAME, 0);
        }));
        var unloadObserver = getUnloadObserver();
        tearDownGroup.push(unloadObserver[0](function () {
            updateMetric();
            reportMetric(metric);
        }));
        tearDownGroup.push(resetStatus);
    }));
};
export var INP = [INP_METRIC_NAME, getINP];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/monitors/performance-new/inp.js.map