import { __read } from "tslib";
import { observePerf } from '../../collector';
import { visibilityStateIsHidden } from '../../collector/page';
import { getDefaultPerformanceObserver, getDefaultPerformance, applyPerformance, getDefaultDocument } from '../../utils';
import { initMetric } from '../performance/util';
import { applySendOnceAndTearDown, wrapPerformanceMetric, getActivationStart } from './util';
export var FCP_ENTRY_NAME = 'first-contentful-paint';
export var FP_ENTRY_NAME = 'first-paint';
export var FP_METRIC_NAME = "fp" /* fp */;
export var FCP_METRIC_NAME = "fcp" /* fcp */;
var Paint_Type = 'paint';
var getFP = function (report, tearDownGroup, context) {
    return getPaint(FP_ENTRY_NAME, FP_METRIC_NAME, report, tearDownGroup, context);
};
var getFCP = function (report, tearDownGroup, context) {
    return getPaint(FCP_ENTRY_NAME, FCP_METRIC_NAME, report, tearDownGroup, context);
};
export var getPaint = function (entryName, metricName, report, tearDownGroup, _a) {
    var _b = __read(_a, 3), activatedObserver = _b[0], getHiddenObserver = _b[1], getUnloadObserver = _b[2];
    var PerformanceObserver = getDefaultPerformanceObserver();
    var performance = getDefaultPerformance();
    var document = getDefaultDocument();
    var metric = initMetric(metricName, 0);
    var sendOnceAndTearDown = applySendOnceAndTearDown(wrapPerformanceMetric, report, tearDownGroup);
    if (!performance || !PerformanceObserver || !document) {
        metric.isSupport = false;
        sendOnceAndTearDown(metric);
        return;
    }
    var handleActivated = function () {
        // if the page is initially hidden or still hidden after prerendering
        // that means the tab was activated in a background state, so it is marked as unsupported
        if (visibilityStateIsHidden(document)) {
            metric.isSupport = false;
            sendOnceAndTearDown(metric);
            return;
        }
        var invokePaint = function (_a) {
            var startTime = _a.startTime;
            // should be relative to page activation rather than navigation start if the page was pre-rendered.
            // but in cases where `activationStart` occurs after the FP or FCP, this time should be clamped at 0.
            var activatedTimeStamp = getActivationStart();
            metric.value = startTime < activatedTimeStamp ? 0 : startTime - activatedTimeStamp;
            sendOnceAndTearDown(metric);
        };
        var _a = __read(applyPerformance(performance), 5), getEntriesByName = _a[4];
        var paint = getEntriesByName(entryName)[0];
        if (paint) {
            invokePaint(paint);
            return;
        }
        tearDownGroup.push(observePerf(PerformanceObserver, function (entry) {
            entry.name === entryName && invokePaint(entry);
        }, [Paint_Type]));
        var unloadObserver = getUnloadObserver();
        tearDownGroup.push(unloadObserver[0](function () {
            metric.isBounced = true;
            sendOnceAndTearDown(metric);
        }));
        var hiddenCallback = function (isHidden) {
            if (isHidden) {
                // if initially not hidden but suddenly becomes hidden, then the metric can be settle.
                sendOnceAndTearDown(metric);
            }
        };
        // hiddenObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
        var hiddenObserver = getHiddenObserver();
        tearDownGroup.push(function () { return hiddenObserver[1](hiddenCallback); });
        hiddenObserver[0](hiddenCallback);
    };
    // activatedObserver may execute immediately, so unsubscribe function needs to be pushed to tearDownGroup first.
    tearDownGroup.push(function () { return activatedObserver[1](handleActivated); });
    activatedObserver[0](handleActivated);
};
export var FP = [FP_METRIC_NAME, getFP];
export var FCP = [FCP_METRIC_NAME, getFCP];//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/node_modules/@slardar/sdk-web/esm/monitors/performance-new/paint.js.map