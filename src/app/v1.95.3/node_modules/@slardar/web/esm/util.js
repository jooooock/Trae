/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { __read, __spreadArray } from "tslib";
import { uuid } from '@slardar/sdk-template';
import { getDefaultBrowser, getDefaultDocument, getStorageWithDecoding, setStorageWithEncoding, getCurrentScript, isSupportEncrypt, formatStorageExpires, } from '@slardar/sdk-web';
import { BATCH_REPORT_PATH, SETTINGS_PATH, STORAGE_PREFIX } from './constants';
export var getReportUrl = function (domain, path) {
    if (path === void 0) { path = BATCH_REPORT_PATH; }
    return "" + (domain && domain.indexOf('//') >= 0 ? '' : 'https://') + domain + path;
};
export var getSettingsUrl = function (domain, path) {
    if (path === void 0) { path = SETTINGS_PATH; }
    return "" + (domain && domain.indexOf('//') >= 0 ? '' : 'https://') + domain + path;
};
export var getDefaultSessionId = function () {
    return uuid();
};
export var toObservableArray = function (arr) {
    var observers = [];
    arr.observe = function (o) {
        observers.push(o);
    };
    arr.push = function () {
        var _a;
        var vs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            vs[_i] = arguments[_i];
        }
        vs.forEach(function (v) {
            observers.forEach(function (o) { return o(v); });
        });
        return (_a = [].push).call.apply(_a, __spreadArray([arr], __read(vs), false));
    };
    return arr;
};
export var getGlobalName = function () {
    var _a, _b, _c;
    var window = getDefaultBrowser();
    var document = getDefaultDocument();
    if (window && document) {
        return (((_c = (_b = (_a = getCurrentScript()) === null || _a === void 0 ? void 0 : _a.getAttribute('src')) === null || _b === void 0 ? void 0 : _b.match(/globalName=(.+)$/)) === null || _c === void 0 ? void 0 : _c[1]) || 'Slardar');
    }
};
export var getGlobalInstance = function () {
    var window = getDefaultBrowser();
    var globalName = getGlobalName();
    if (window && globalName) {
        return window[globalName];
    }
};
export var getStorageKey = function (bid) { return STORAGE_PREFIX + bid; };
/**
 * glue code for storage security. Maybe it could remove in one year later
 * @param key storage key
 * @returns
 */
export var glueCodeForStorageSecurity = function (key, expires) {
    try {
        var value = localStorage.getItem(key);
        // btoa(encodeURI('{')) === JTdC
        // old content:{ userId: '', deviceId: '' }
        if (!value || !isSupportEncrypt() || value[0] !== '{')
            return;
        setStorageWithEncoding(key, JSON.parse(value), expires);
    }
    catch (error) {
        // do nothing
    }
};
export var getDefaultUserIdAndDeviceId = function (bid, expires) {
    if (bid === void 0) { bid = ''; }
    var randomIdInfo = {
        userId: uuid(),
        deviceId: uuid(),
    };
    // <= 0 时，不移除现 localStorage 数据，只是不取和不存
    if (expires <= 0)
        return randomIdInfo;
    var key = getStorageKey(bid);
    glueCodeForStorageSecurity(key, expires);
    return getStorageWithDecoding(key) || randomIdInfo;
};
export var hasSetStorageItem = function (bid) {
    if (bid === void 0) { bid = ''; }
    var key = getStorageKey(bid);
    return !!getStorageWithDecoding(key);
};
export var setStorageUserIdAndDeviceId = function (config) {
    var bid = config.bid, userId = config.userId, deviceId = config.deviceId, storageExpires = config.storageExpires;
    var key = getStorageKey(bid);
    setStorageWithEncoding(key, {
        userId: userId,
        deviceId: deviceId,
    }, formatStorageExpires(storageExpires));
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/esm/util.js.map