/* eslint-disable compat/compat */
/* eslint-disable @typescript-eslint/ban-ts-comment */
import ava from 'ava';
import * as sinon from 'sinon';
import { npmPreCollect } from '../npm-precollect';
var browserEnv = require('browser-env');
var test = ava;
test.before(function () {
    browserEnv();
    var MockPerformanceObserver = /** @class */ (function () {
        function MockPerformanceObserver(cb) {
            ;
            this.observe = function () {
                cb({
                    getEntries: function () {
                        return {};
                    },
                }, {
                    disconnect: sinon.fake(),
                });
                return {};
            };
        }
        MockPerformanceObserver.prototype.disconnect = function () { };
        return MockPerformanceObserver;
    }());
    // @ts-ignore
    global.PerformanceObserver = MockPerformanceObserver;
    // @ts-ignore
    window.PerformanceObserver = MockPerformanceObserver;
    // @ts-ignore
    global.PerformanceLongTaskTiming = function () { };
    // @ts-ignore
    window.PerformanceLongTaskTiming = function () { };
});
test.beforeEach(function (t) {
    t.context.map = {};
    sinon.restore();
    sinon.stub(window, 'addEventListener').callsFake(function (event, cb) {
        t.context.map[event] = cb;
    });
});
test.afterEach(function () {
    sinon.restore();
});
test('npmPreCollect', function (t) {
    var client = sinon.fake();
    npmPreCollect(window, client);
    t.assert(client.pcErr);
    t.assert(client.pcRej);
    t.context.map['error']({
        target: { src: 'xxx', tagName: 'script' },
        error: { name: 'TypeError', message: 'test error' },
    });
    t.true(client.calledOnce);
    t.is(client.args[0][0], 'precollect');
    t.is(client.args[0][1], 'err');
    t.deepEqual(client.args[0][2], { name: 'TypeError', message: 'test error' });
    t.context.map['unhandledrejection']({
        reason: { name: 'TypeError', message: 'test error 2' },
    });
    t.true(client.calledTwice);
    t.is(client.args[1][0], 'precollect');
    t.is(client.args[1][1], 'reject');
    t.deepEqual(client.args[1][2], { name: 'TypeError', message: 'test error 2' });
    t.assert(client.pp);
    t.assert(client.pp.observer);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/web/esm/instances/__test__/npm-precollect.spec.js.map