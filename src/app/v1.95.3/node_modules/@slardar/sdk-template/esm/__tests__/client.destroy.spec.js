import test from 'ava';
import sinon from 'sinon';
import { createClient } from '../client';
import { id, createBaseConfigManager, noopBuilder, noopSender } from '../utils';
test('client.destroy - call handlers', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    var onBeforeDestroy = sinon.fake();
    client.on('beforeDestroy', onBeforeDestroy);
    t.assert(onBeforeDestroy.notCalled);
    client.destroy();
    t.assert(onBeforeDestroy.calledOnce);
    // callback is cleared when executing
    client.destroy();
    t.assert(onBeforeDestroy.calledOnce);
    client.on('beforeDestroy', onBeforeDestroy);
    client.destroy();
    t.assert(onBeforeDestroy.calledTwice);
    t.notThrows(function () {
        client.on('beforeDestroy', function () {
            throw new Error('test');
        });
    });
    client.on('beforeDestroy', onBeforeDestroy);
    t.assert(onBeforeDestroy.calledThrice);
});
test('client.destroy - destroyAgent', function (t) {
    var client = createClient({
        builder: noopBuilder,
        createSender: function () { return noopSender; },
        createDefaultConfig: function () { return ({}); },
        validateInitConfig: function () { return true; },
        initConfigNormalizer: id,
        userConfigNormalizer: id,
        createConfigManager: createBaseConfigManager,
    });
    t.assert(typeof client.destroyAgent.set === 'function');
    t.assert(typeof client.destroyAgent.remove === 'function');
    t.assert(typeof client.destroyAgent.removeByEvType === 'function');
    t.assert(typeof client.destroyAgent.clear === 'function');
    var pluginATearDown1 = sinon.spy();
    var pluginATearDownGroup = [pluginATearDown1];
    client.destroyAgent.set('pluginA', 'dataA', pluginATearDownGroup);
    t.assert(pluginATearDown1.notCalled);
    client.destroyAgent.remove('pluginA');
    t.assert(pluginATearDown1.calledOnce);
    t.is(pluginATearDownGroup.length, 0);
    client.destroyAgent.removeByEvType('dataA');
    t.assert(pluginATearDown1.calledOnce);
    var pluginATearDown2 = sinon.spy();
    client.destroyAgent.set('pluginA', 'dataA', [pluginATearDown2]);
    client.destroyAgent.removeByEvType('dataA');
    t.assert(pluginATearDown2.calledOnce);
    client.destroyAgent.remove('pluginA');
    t.assert(pluginATearDown2.calledOnce);
    var pluginATearDown3 = sinon.spy();
    client.destroyAgent.set('pluginA', 'dataA', [pluginATearDown3]);
    client.destroy();
    t.assert(pluginATearDown1.calledOnce);
    t.assert(pluginATearDown2.calledOnce);
    t.assert(pluginATearDown3.calledOnce);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/sdk-template/esm/__tests__/client.destroy.spec.js.map