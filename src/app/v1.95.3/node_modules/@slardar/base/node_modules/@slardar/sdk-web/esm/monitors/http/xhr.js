import { __read } from "tslib";
import { isString, noop, checkIfHit } from '@slardar/sdk-template';
import { HTTP_EV_TYPE } from '../../constants';
import { getFullUrl, now } from '../../utils';
import { isSensitiveHeader, handleWithExtractUrl } from './util';
export var httpGetterWithXhrObserver = function (tearDownGroup, _a, xhrConfig) {
    var _b = __read(_a, 2), xhrObserver = _b[0], getResourceObserver = _b[1];
    var setTraceHeader = xhrConfig.setTraceHeader, ignoreUrls = xhrConfig.ignoreUrls, setContextAtReq = xhrConfig.setContextAtReq, extractUrl = xhrConfig.extractUrl;
    tearDownGroup.push(xhrObserver[0](function (_a) {
        var _b = __read(_a, 4), _method = _b[0], _url = _b[1], _start = _b[2], xhr = _b[3];
        if (!_url)
            return noop;
        var fullUrl = getFullUrl(_url);
        if (checkIfHit(ignoreUrls, fullUrl))
            return noop;
        setTraceHeader && setTraceHeader(fullUrl, function (key, value) { return xhr.setRequestHeader(key, value); });
        var reportWithContext = setContextAtReq();
        var timing = undefined;
        var resourceTearDown = getResourceObserver()[0](function (entry) {
            fullUrl === entry.name && !timing && (timing = entry);
        });
        return function (xhrAfterReady) {
            var payload = getEventParams(xhrAfterReady, xhrConfig);
            setTimeout(function () {
                timing && (payload.response.timing = timing);
                handleWithExtractUrl(payload, extractUrl);
                reportWithContext && reportWithContext({ ev_type: HTTP_EV_TYPE, payload: payload });
                resourceTearDown();
            }, 100);
        };
    }));
};
function formatXHRAllResponseHeaders(headers) {
    if (isString(headers) && headers) {
        return headers.split('\r\n').reduce(function (result, line) {
            if (isString(line)) {
                var _a = __read(line.split(': '), 2), name_1 = _a[0], value = _a[1];
                !isSensitiveHeader(name_1, value) && (result[name_1.toLowerCase()] = value);
            }
            return result;
        }, {});
    }
    return {};
}
function formatRequestHeaders(headers) {
    return Object.keys(headers).reduce(function (result, name) {
        !isSensitiveHeader(name, headers[name]) && (result[name.toLowerCase()] = headers[name]);
        return result;
    }, {});
}
export var getEventParams = function (xhr, props) {
    var _method = xhr._method, _reqHeaders = xhr._reqHeaders, _url = xhr._url, _start = xhr._start, _data = xhr._data;
    var fullUrl = getFullUrl(_url);
    var params = {
        api: 'xhr',
        request: {
            url: fullUrl,
            method: (_method || '').toLowerCase(),
            headers: _reqHeaders && formatRequestHeaders(_reqHeaders),
            timestamp: _start,
        },
        response: {
            status: xhr.status || 0,
            is_custom_error: false,
            timestamp: now(),
        },
        duration: now() - _start,
    };
    if (typeof xhr.getAllResponseHeaders === 'function') {
        params.response.headers = formatXHRAllResponseHeaders(xhr.getAllResponseHeaders());
    }
    var status = params.response.status;
    var collectBodyOnError = props.collectBodyOnError, extraExtractor = props.extraExtractor;
    try {
        var extra = extraExtractor === null || extraExtractor === void 0 ? void 0 : extraExtractor(xhr.response, params, _data);
        extra && (params.extra = extra);
        extra && (params.response.is_custom_error = true);
        // 非 2xx , 3xx 请求，上传request body
        if (collectBodyOnError && (extra || status >= 400)) {
            params.request.body = _data ? "" + _data : undefined;
            params.response.body = xhr.response ? "" + xhr.response : undefined;
        }
    }
    catch (_o) {
        // do nothing
    }
    return params;
};//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/node_modules/@slardar/sdk-web/esm/monitors/http/xhr.js.map