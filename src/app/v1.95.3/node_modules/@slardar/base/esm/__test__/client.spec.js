import test from 'ava';
import { CustomPlugin } from 'sdk-web/src/plugins';
import sinon from 'sinon';
import { noop } from '@slardar/sdk-template';
import { createMinimalClient, createBaseClient } from '../client';
test('createMinimalClient', function (t) {
    var _a, _b, _c, _d;
    var client = createMinimalClient();
    t.assert(client.context);
    var onBeforeSend = sinon.fake();
    client.on('beforeSend', onBeforeSend);
    client.init({
        bid: 'bid',
        pid: 'init-pid',
        transport: { get: noop, post: noop },
    });
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('afterInit', true);
    client.config({
        pid: 'another-pid',
    });
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.set('beforeStart', true);
    (_c = client.context) === null || _c === void 0 ? void 0 : _c.delete('afterInit');
    client.start();
    t.assert(onBeforeSend.notCalled);
    CustomPlugin(client);
    (_d = client.sendEvent) === null || _d === void 0 ? void 0 : _d.call(client, {
        name: 'first-event',
    });
    t.assert(onBeforeSend.calledOnce);
    t.like(onBeforeSend.args[0][0], {
        ev_type: 'custom',
        payload: {
            name: 'first-event',
            type: 'event',
        },
        common: {
            bid: 'bid',
            pid: 'another-pid',
            url: '',
            protocol: '',
            domain: '',
            path: '',
            query: '',
            context: {
                beforeStart: 'true',
            },
        },
    });
});
test('createBaseClient', function (t) {
    var _a;
    var client = createBaseClient();
    client.init({
        bid: 'bid',
        pid: 'pid',
        transport: { get: noop, post: noop },
    });
    client.start();
    var onBeforeSend = sinon.fake();
    client.on('beforeSend', onBeforeSend);
    t.assert(client.sendEvent);
    (_a = client.sendEvent) === null || _a === void 0 ? void 0 : _a.call(client, {
        name: 'first-event',
    });
    t.assert(onBeforeSend.calledOnce);
    t.like(onBeforeSend.args[0][0], {
        ev_type: 'custom',
        payload: {
            name: 'first-event',
            type: 'event',
        },
        common: {
            bid: 'bid',
            pid: 'pid',
            url: '',
            protocol: '',
            domain: '',
            path: '',
            query: '',
            context: {},
        },
    });
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@slardar/base/esm/__test__/client.spec.js.map