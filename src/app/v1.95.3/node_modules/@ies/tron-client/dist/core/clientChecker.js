"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TronClientChecker = void 0;
const clientBase_1 = require("./clientBase");
const logger_1 = __importDefault(require("./logger"));
const path_1 = require("path");
const fs_1 = require("fs");
const api_1 = __importDefault(require("./api"));
class TronClientChecker extends clientBase_1.TronClientBase {
    constructor(config) {
        super(config);
        this.deviceId = config.deviceId;
        this.appPath = config.appPath;
        this.branch = this.getBranch();
        this.buildId = this.getbuildId();
    }
    /**
     * get buildId stored in package.json
     */
    getbuildId() {
        const packageFile = (0, fs_1.readFileSync)((0, path_1.join)(this.appPath, 'package.json'), 'utf-8');
        const buildId = Number(JSON.parse(packageFile).buildId);
        if (!buildId) {
            throw new Error(`tron can't find buildId in in ${(0, path_1.join)(this.appPath, 'package.json')}, you must run tron-client memorize before build`);
        }
        return buildId;
    }
    /**
     * get current working branch
     */
    getBranch() {
        const packageFile = (0, fs_1.readFileSync)((0, path_1.join)(this.appPath, 'package.json'), 'utf-8');
        const { branch } = JSON.parse(packageFile);
        if (branch) {
            logger_1.default.info(`tron checker branch is set to ${branch}`);
            return branch;
        }
        else {
            const message = `tron can't find branch in ${(0, path_1.join)(this.appPath, 'package.json')}, you must run tron-client memorize before build`;
            throw new Error(message);
        }
    }
    /**
     * check for update
     */
    checkForUpdate() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${clientBase_1.CHECK_API}?pid=${this.pid}&uid=${this.deviceId}&branch=${this.branch}&buildId=${this.buildId}`;
            logger_1.default.info(`[checkForUpdate]url: ${url}`);
            return api_1.default.get(url).then(res => {
                logger_1.default.info(`update info: ${JSON.stringify(res, null, 2)}`);
                return res;
            });
        });
    }
    /**
     * get current buildId's buildInfo
     */
    getCurrentBuildInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return api_1.default.get(`${clientBase_1.CURRENT_BUILD_API}?pid=${this.pid}&buildId=${this.buildId}`).then(res => {
                logger_1.default.info(`build info of current build: ${JSON.stringify(res, null, 2)}`);
                return res;
            });
        });
    }
}
exports.TronClientChecker = TronClientChecker;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/clientChecker.js.map