"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setToken = void 0;
const crypto_1 = require("crypto");
const axios_1 = __importDefault(require("axios"));
const logger_1 = __importDefault(require("./logger"));
const utils_1 = require("./utils");
const maxRetryCount = 3;
let token = '';
function setToken(newToken) {
    token = newToken;
}
exports.setToken = setToken;
function encrypt(algorithm, content) {
    const hash = (0, crypto_1.createHash)(algorithm);
    hash.update(content);
    return hash.digest('hex');
}
function sha1(content) {
    return encrypt('sha1', content);
}
const config = {
    timeout: 4000,
    // proxy: {
    //   host: '127.0.0.1',
    //   port: 8899,
    // }
};
const instance = axios_1.default.create(config);
instance.interceptors.request.use(config => {
    // 在请求发送之前修改 config
    config.params = Object.assign(Object.assign({}, config.params), { sdkVersion: (0, utils_1.getSDKVersion)() });
    if (token) {
        const currentTime = Date.now();
        config.headers = {
            'x-tron-timeStamp': currentTime,
            'x-tron-signature': sha1(`${currentTime}${token}`),
        };
    }
    return config;
});
instance.interceptors.response.use((res) => {
    try {
        const { err_code: errCode, err_message: errMessage, data } = res.data;
        if (errCode === 0) {
            return data;
        }
        if (errMessage) {
            return Promise.reject(new Error(errMessage));
        }
        throw new Error();
    }
    catch (e) {
        throw new Error(`request to ${res.config.baseURL}${res.config.url} failed, because response ${res.data} is invalid`);
    }
}, (error) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const { config } = error;
    config._retryCount = config._retryCount || 0;
    if (config._retryCount >= maxRetryCount) {
        throw new Error(`${(_a = error.response) === null || _a === void 0 ? void 0 : _a.status}\n${(_b = error.response) === null || _b === void 0 ? void 0 : _b.statusText}\n[error.response]:${JSON.stringify(error, null, 4)}`);
    }
    yield new Promise(resolve => setTimeout(resolve, 1500));
    config._retryCount += 1;
    logger_1.default.error(`\n${config.url}: auto retring${config._retryCount} times\n`, error);
    return instance(config);
}));
exports.default = instance;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/api.js.map