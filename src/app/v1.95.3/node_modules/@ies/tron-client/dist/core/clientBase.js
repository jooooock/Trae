"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TronClientBase = exports.CHECK_OFFLINE_API = exports.ALEART_API = exports.CURRENT_BUILD_API = exports.CHECK_API = exports.JobStatus = void 0;
const api_1 = __importDefault(require("./api"));
const logger_1 = __importDefault(require("./logger"));
const utils_1 = require("./utils");
const constant_1 = require("./constant");
var JobStatus;
(function (JobStatus) {
    JobStatus[JobStatus["PENDING"] = 0] = "PENDING";
    JobStatus[JobStatus["RUNNING"] = 1] = "RUNNING";
    JobStatus[JobStatus["SUCCESS"] = 2] = "SUCCESS";
    JobStatus[JobStatus["FAILED"] = 3] = "FAILED";
    JobStatus[JobStatus["ABORT"] = 4] = "ABORT";
})(JobStatus = exports.JobStatus || (exports.JobStatus = {}));
exports.CHECK_API = '/api/sdk/check_update';
exports.CURRENT_BUILD_API = '/api/sdk/get_build_info';
exports.ALEART_API = '/api/sdk/alert';
exports.CHECK_OFFLINE_API = '/api/sdk/check_update_offline';
class TronClientBase {
    constructor(options) {
        this.pid = options.pid;
        this.region = (0, utils_1.hasValue)(options.region) ? options.region : 'cn';
        this.external = (0, utils_1.hasValue)(options.external) ? Boolean(options.external) : true;
        this.debug = (0, utils_1.hasValue)(options.debug) ? Boolean(options.debug) : true;
        if (this.debug) {
            options.logger && logger_1.default.setup(options.logger);
        }
        else {
            logger_1.default.disable();
        }
        api_1.default.defaults.baseURL = process.env.TRON_BASE_URL || this.getBaseUrl();
        (0, utils_1.checkSDKVersion)();
    }
    /**
     * get tron base url
     */
    getBaseUrl() {
        let baseURL = '';
        if (this.region === 'boe') {
            baseURL = constant_1.REGION_CONFIG.boe.internal;
        }
        else if (this.external) {
            baseURL = this.region === 'sg' ? constant_1.REGION_CONFIG.sg.external : constant_1.REGION_CONFIG.cn.external;
        }
        else {
            baseURL = this.region === 'sg' ? constant_1.REGION_CONFIG.sg.internal : constant_1.REGION_CONFIG.cn.internal;
        }
        logger_1.default.info('base url is set to', baseURL);
        return baseURL;
    }
    /**
     * get certain buildId's buildInfo
     */
    getBuildInfo(buildId) {
        return __awaiter(this, void 0, void 0, function* () {
            return api_1.default.get(`${exports.CURRENT_BUILD_API}?pid=${this.pid}&buildId=${buildId}`).then(res => {
                logger_1.default.info(`build info of buildId ${buildId} : ${JSON.stringify(res, null, 2)}`);
                return res;
            });
        });
    }
}
exports.TronClientBase = TronClientBase;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@ies/tron-client/dist/core/clientBase.js.map