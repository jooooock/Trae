"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryReporter = exports.TelemetrySender = void 0;
const vscode = __importStar(require("vscode"));
const base_1 = require("../base");
const toString_1 = __importDefault(require("lodash/toString"));
class TelemetrySender {
    _reporter;
    constructor(reporter) {
        this._reporter = reporter;
    }
    sendEventData(eventName, data) {
        this._reporter.sendEvent({ name: eventName, categories: this._formatData(data) });
    }
    sendErrorData(error, data) {
        this._reporter.captureException(error, this._formatData(data));
    }
    flush() {
        this._reporter.flush();
    }
    _formatData(data) {
        if (data) {
            return Object.entries(data).reduce((acc, [key, value]) => {
                acc[key.replaceAll('.', '_')] = (0, toString_1.default)(value);
                return acc;
            }, {});
        }
        return undefined;
    }
}
exports.TelemetrySender = TelemetrySender;
class TelemetryReporter extends base_1.Disposable {
    telemetryLogger;
    constructor(reporter) {
        super();
        this.telemetryLogger = vscode.env.createTelemetryLogger(new TelemetrySender(reporter), {});
        this._register(this.telemetryLogger);
    }
}
exports.TelemetryReporter = TelemetryReporter;
