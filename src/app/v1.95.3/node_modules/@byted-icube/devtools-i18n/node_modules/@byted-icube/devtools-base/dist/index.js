"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBaseClient = exports.context = void 0;
const uuid_1 = require("uuid");
const devtools_constants_1 = require("@byted-icube/devtools-constants");
const index_1 = require("./auth/index");
const base_1 = require("./base");
const index_2 = require("./i18n/index");
const index_3 = require("./logger/index");
const index_4 = require("./slardar/index");
const index_5 = require("./request/index");
const reporter_1 = require("./slardar/reporter");
const index_6 = require("./tea/index");
const telemetry_1 = require("./telemetry");
const vscode = __importStar(require("vscode"));
const context_1 = __importDefault(require("./common/context"));
exports.context = context_1.default;
const init_1 = require("./init");
const workspace_1 = require("./workspace");
const context_2 = require("./slardar/context");
const ILogger_1 = require("./logger/ILogger");
const region_1 = require("./common/region");
__exportStar(require("./base"), exports);
__exportStar(require("./request/index"), exports);
__exportStar(require("./logger/index"), exports);
__exportStar(require("./logger/ILogger"), exports);
__exportStar(require("./slardar/index"), exports);
__exportStar(require("./tea/index"), exports);
// export * from './auth/index';
__exportStar(require("./i18n/index"), exports);
__exportStar(require("./types/index"), exports);
__exportStar(require("./common/region"), exports);
__exportStar(require("./common/tenant"), exports);
__exportStar(require("./perfermance/index"), exports);
function initBaseClient(options) {
    (0, init_1.injectNativeEnv)();
    const sessionId = (0, uuid_1.v4)();
    const { name, outputChannelName, slardarBid, pageId, i18nOptions, globalTags = {}, loggerControl, getContext } = options;
    const region = (0, region_1.getRegion)(process.env || {});
    const slardarConfig = {
        pid: pageId
    };
    if (slardarBid) {
        slardarConfig.bid = slardarBid;
    }
    const slardar = (0, index_4.createDefaultSlardarClient)(slardarConfig, {
        ...globalTags,
        session_id: sessionId,
        runtime: 'node',
    }, region);
    context_1.default.set('sessionId', sessionId);
    const outputChannel = vscode.window.createOutputChannel(outputChannelName || name);
    const logger = (0, index_3.createLogger)({
        name,
        slardar,
        outputChannel,
        context: {
            sessionId,
            runtime: 'node',
        },
    }, loggerControl);
    const tea = (0, index_6.createDefaultTeaClient)({ region });
    const workspace = new workspace_1.WorkspaceClient({ logger });
    const defaultContext = (0, index_4.getDefaultContext)();
    tea.config({ custom: { ...defaultContext, ...globalTags } });
    if (process.env.VSCODE_RUN_IN_ELECTRON) {
        vscode.commands.executeCommand('icube.event.getCommonParams').then((commonParams) => {
            const { machine_id } = commonParams;
            tea.config({
                user: {
                    user_unique_id: machine_id,
                },
                custom: {
                    ...commonParams,
                    ...globalTags,
                },
            });
            logger.setSlardarContext(commonParams);
        });
    }
    (0, init_1.initGlobalContext)({ tea, slardar, getContext });
    const reporter = new reporter_1.Reporter(slardar, (0, context_2.getIsDev)(process.env || {}), pageId);
    const request = (0, index_5.createDefaultRequestInstance)({
        interceptors: {
            request: [
                {
                    onFullfilled: config => {
                        reporter.emitCounter(devtools_constants_1.EVENT_STABILITY_DEVTOOLS_REQUEST_START, {
                            api: config.url || '/',
                        });
                        config.headers['x-requet-time'] = Number(new Date());
                        return config;
                    },
                    onRejected: error => {
                        reporter.emitCounter(devtools_constants_1.EVENT_STABILITY_DEVTOOLS_REQUEST_FAILED, {
                            api: error?.config?.url || '/',
                        });
                        return Promise.reject(error);
                    },
                },
            ],
            response: [
                {
                    onFullfilled: response => {
                        const requestTime = Number(response.config.headers['x-requet-time']);
                        reporter.emitTimer(devtools_constants_1.EVENT_STABILITY_DEVTOOLS_REQUEST_DURATION, Number(new Date()) - requestTime, {
                            api: response.config?.url || '/',
                        });
                        return response;
                    },
                    onRejected: (error) => {
                        reporter.emitCounter(devtools_constants_1.EVENT_STABILITY_DEVTOOLS_REQUEST_FAILED, {
                            api: error?.config?.url || '/',
                        });
                        return Promise.reject(error);
                    },
                },
            ],
        },
    });
    const i18n = (0, index_2.createI18nTranslator)(i18nOptions || {});
    const telemetryReporter = new telemetry_1.TelemetryReporter(reporter);
    const auth = new index_1.AuthClient(region, {
        logger: logger?.getLogger(ILogger_1.LoggerType.Slardar),
        disableInvokeDeployTokenInConstructor: options.auth?.disableInvokeDeployTokenInConstructor,
    });
    const disposable = (0, base_1.toDisposable)(() => {
        telemetryReporter.dispose();
        reporter.dispose();
    });
    return { request, reporter, logger, tea, slardar, i18n, disposable, auth, workspace, outputChannel };
}
exports.initBaseClient = initBaseClient;
