"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageStorage = exports.fetchLocaleDatas = void 0;
const constants_1 = require("../constants");
const starlingClient_1 = require("./starlingClient");
__exportStar(require("./starlingClient"), exports);
async function fetchLocaleDatas(options) {
    const { lang, i18n, namespace = constants_1.DEFAULT_STARLING_NAMESPACE, starlingZoneHost } = options;
    i18n.setLang(lang);
    const starlingClient = new starlingClient_1.StarlingClient({
        api_key: constants_1.DEFAULT_STARLING_APP_KEY,
        namespace,
        locale: lang,
        // zoneHost: STARLING_ZONE_HOST_MAP[region],
        // @ts-ignore
        zoneHost: starlingZoneHost || STARLING_ZONE_HOST,
        store: new LocalStorageStorage(),
    });
    const texts = await starlingClient.load();
    i18n.addResourceBundle(lang, 'translation', texts, true, true);
    return i18n;
}
exports.fetchLocaleDatas = fetchLocaleDatas;
class LocalStorageStorage {
    get(key, optionalDefaultValue) {
        if (!window.localStorage || !window.localStorage.getItem)
            return;
        const cachedValue = window.localStorage.getItem(key);
        if (cachedValue) {
            return deserialize(cachedValue) || optionalDefaultValue;
        }
        return optionalDefaultValue;
    }
    set(key, value) {
        if (!window.localStorage || !window.localStorage.setItem)
            return;
        return window.localStorage.setItem(key, serialize(value));
    }
}
exports.LocalStorageStorage = LocalStorageStorage;
function serialize(val) {
    return JSON.stringify(val);
}
function deserialize(val) {
    if (typeof val !== 'string') {
        return undefined;
    }
    try {
        return JSON.parse(val);
    }
    catch (e) {
        return val || undefined;
    }
}
