"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionEvent = exports.HeatmapEvent = exports.BlankEvent = exports.SriEvent = exports.ResourceEvent = exports.ResourceErrorEvent = exports.PerformanceTimingEvent = exports.PerformanceLongTaskEvent = exports.PerformanceEvent = exports.ActionEvent = exports.PageviewEvent = exports.PageviewEventSource = exports.JSErrorEvent = exports.HttpEvent = exports.CustomEvent = exports.BaseEvent = void 0;
class BaseEvent {
    extra;
    overrides;
    constructor(options) {
        this.extra = options?.extra;
        this.overrides = options?.overrides;
    }
}
exports.BaseEvent = BaseEvent;
class CustomEvent extends BaseEvent {
    ev_type = 'custom';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.CustomEvent = CustomEvent;
class HttpEvent extends BaseEvent {
    ev_type = 'http';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.HttpEvent = HttpEvent;
class JSErrorEvent extends BaseEvent {
    ev_type = 'js_error';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.JSErrorEvent = JSErrorEvent;
var PageviewEventSource;
(function (PageviewEventSource) {
    PageviewEventSource["Init"] = "init";
    PageviewEventSource["PathChange"] = "path-change";
    PageviewEventSource["HashChange"] = "hash-change";
    PageviewEventSource["HistoryStateChange"] = "history-state-change";
    PageviewEventSource["UserSet"] = "user-set";
})(PageviewEventSource || (exports.PageviewEventSource = PageviewEventSource = {}));
class PageviewEvent extends BaseEvent {
    ev_type = 'pageview';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.PageviewEvent = PageviewEvent;
class ActionEvent extends BaseEvent {
    ev_type = 'action';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.ActionEvent = ActionEvent;
class PerformanceEvent extends BaseEvent {
    ev_type = 'performance';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.PerformanceEvent = PerformanceEvent;
class PerformanceLongTaskEvent extends BaseEvent {
    ev_type = 'performance_longtask';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.PerformanceLongTaskEvent = PerformanceLongTaskEvent;
class PerformanceTimingEvent extends BaseEvent {
    ev_type = 'performance_timing';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.PerformanceTimingEvent = PerformanceTimingEvent;
class ResourceErrorEvent extends BaseEvent {
    ev_type = 'resource_error';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.ResourceErrorEvent = ResourceErrorEvent;
class ResourceEvent extends BaseEvent {
    ev_type = 'resource';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.ResourceEvent = ResourceEvent;
class SriEvent extends BaseEvent {
    ev_type = 'sri';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.SriEvent = SriEvent;
class BlankEvent extends BaseEvent {
    ev_type = 'blank_screen';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.BlankEvent = BlankEvent;
class HeatmapEvent extends BaseEvent {
    ev_type = 'heatmap';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.HeatmapEvent = HeatmapEvent;
class SessionEvent extends BaseEvent {
    ev_type = 'session';
    payload;
    constructor(payload, extra) {
        super(extra);
        this.payload = payload;
    }
}
exports.SessionEvent = SessionEvent;
