"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlardarLogger = void 0;
const BaseLogger_1 = require("./BaseLogger");
const ILogger_1 = require("./ILogger");
const reporter_1 = require("../slardar/reporter");
class SlardarLogger extends BaseLogger_1.BaseLogger {
    _name;
    _slardarClient;
    _reporter;
    type = ILogger_1.LoggerType.Slardar;
    constructor(context, name, slardarClient) {
        super(context);
        this._name = name;
        this._slardarClient = slardarClient;
        this._reporter = new reporter_1.Reporter(slardarClient);
    }
    withContext(context) {
        return new SlardarLogger({ ...this.ctx, ...context }, this._name, this._slardarClient);
    }
    _log(level, msg, ...args) {
        if (msg instanceof Error) {
            this._reporter.captureException(msg, { name: this._name, ...this.ctx });
            msg = msg.stack || msg.message;
        }
        this._slardarClient.sendLog?.({
            content: `${msg} ${args.join(' ')}`,
            level: this._getSlardarLevel(level),
            extra: this.ctx,
        });
    }
    _getSlardarLevel(level) {
        switch (level) {
            case ILogger_1.LogLevel.Error:
                return 'error';
            case ILogger_1.LogLevel.Warn:
                return 'warn';
            case ILogger_1.LogLevel.Debug:
                return 'debug';
            case ILogger_1.LogLevel.Info:
                return 'info';
            case ILogger_1.LogLevel.Trace:
                return 'trace';
        }
    }
    setContext(ctx) {
        this._slardarClient.context?.merge(ctx);
    }
}
exports.SlardarLogger = SlardarLogger;
