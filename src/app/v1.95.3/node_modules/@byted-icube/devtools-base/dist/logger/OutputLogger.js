"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutputLogger = void 0;
const moment_1 = __importDefault(require("moment"));
const BaseLogger_1 = require("./BaseLogger");
const vscode = __importStar(require("vscode"));
const util_1 = require("util");
const ILogger_1 = require("./ILogger");
class OutputLogger extends BaseLogger_1.BaseLogger {
    _outputChannel;
    type = ILogger_1.LoggerType.Output;
    constructor(context, channelName, outputChannel) {
        super(context);
        this._outputChannel = outputChannel || vscode.window.createOutputChannel(channelName);
    }
    withContext(context) {
        return new OutputLogger({ ...this.ctx, ...context }, this._outputChannel.name, this._outputChannel);
    }
    _log(level, msg, ...args) {
        const prefix = this._getOutputPrefix(level);
        const now = (0, moment_1.default)().format('YYYY-MM-DD HH:mm:ss.SSS z');
        const extraMessages = args.flatMap(m => (typeof m === 'string' ? m : (0, util_1.inspect)(m, true, 8))).join(' ');
        if (msg instanceof Error) {
            msg = msg.stack || msg.message;
        }
        const formated = msg
            .split('\n')
            .map(line => `[${prefix.padEnd(5)}] ${now} ${line}`)
            .join('\n');
        this._outputChannel.appendLine(`${formated} ${extraMessages}`);
    }
    _getOutputPrefix(level) {
        switch (level) {
            case ILogger_1.LogLevel.Error:
                return 'Error';
            case ILogger_1.LogLevel.Warn:
                return 'Warn';
            case ILogger_1.LogLevel.Debug:
                return 'Debug';
            case ILogger_1.LogLevel.Info:
                return 'Info';
            case ILogger_1.LogLevel.Trace:
                return 'Trace';
        }
    }
}
exports.OutputLogger = OutputLogger;
