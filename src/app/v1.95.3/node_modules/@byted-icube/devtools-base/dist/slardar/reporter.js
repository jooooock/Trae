"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reporter = void 0;
const event_1 = require("./event");
const base_1 = require("../base");
class Reporter extends base_1.Disposable {
    _client;
    _isDev;
    _pageId;
    constructor(client, isDev = false, pageId) {
        super();
        this._client = client;
        this._pageId = pageId;
        this._isDev = isDev;
    }
    report(event) {
        this._client.report(event);
    }
    sendEvent(event) {
        this._client.sendEvent?.(event);
    }
    captureException(error, extra) {
        // local 不上报错误
        if (this._isDev) {
            console.log(`ignore error in dev mode: ${error.stack}`);
            return;
        }
        // 报错时发送pv，避免出现错误率大于 100% 的情况
        if (this._pageId) {
            this.sendPageview(this._pageId, event_1.PageviewEventSource.PathChange);
        }
        this._client.report(new event_1.JSErrorEvent({
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name,
            },
            extra,
            breadcrumbs: [],
        }));
    }
    sendPageview(pid, source) {
        this._client.report(new event_1.PageviewEvent({ pid, source: source ?? event_1.PageviewEventSource.UserSet }));
    }
    emitStore(key, value, tags = {}) {
        this._client.sendEvent?.({
            name: key,
            metrics: {
                value,
            },
            categories: tags,
        });
    }
    emitTimer(key, value, tags = {}) {
        this._client.sendEvent?.({
            name: key,
            metrics: {
                value,
            },
            categories: tags,
        });
    }
    emitCounter(key, tags = {}) {
        this._client.sendEvent?.({
            name: key,
            metrics: {
                value: 1,
            },
            categories: tags,
        });
    }
    flush() {
        this._client.getSender()?.flush();
    }
    dispose() {
        this.flush();
        super.dispose();
    }
}
exports.Reporter = Reporter;
