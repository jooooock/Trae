"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCodeStorage = exports.fetchLocaleDatas = exports.STARLING_ZONE_HOST_MAP = void 0;
const constants_1 = require("../constants");
const types_1 = require("../types");
const starlingClient_1 = require("./starlingClient");
const region_1 = require("../common/region");
__exportStar(require("./starlingClient"), exports);
exports.STARLING_ZONE_HOST_MAP = {
    [types_1.Region.CN]: 'https://starling.zijieapi.com',
    [types_1.Region.BOE]: 'https://starling.zijieapi.com',
    [types_1.Region.US]: 'https://starling-oversea.byteoversea.com',
    [types_1.Region.SG]: 'https://starling-oversea.byteoversea.com',
    [types_1.Region.BOEI18N]: 'https://starling-oversea.byteoversea.com',
};
async function fetchLocaleDatas(options) {
    const { lang, i18n, context, namespace = constants_1.DEFAULT_STARLING_NAMESPACE, region = (0, region_1.getRegion)(process.env), starlingZoneHost, } = options;
    i18n.setLang(lang);
    const starlingClient = new starlingClient_1.StarlingClient({
        api_key: constants_1.DEFAULT_STARLING_APP_KEY,
        namespace,
        locale: lang,
        zoneHost: starlingZoneHost || exports.STARLING_ZONE_HOST_MAP[region],
        store: context ? new VSCodeStorage(context) : undefined,
    });
    const texts = await starlingClient.load();
    i18n.addResourceBundle(lang, 'translation', texts, true, true);
    return i18n;
}
exports.fetchLocaleDatas = fetchLocaleDatas;
class VSCodeStorage {
    _context;
    constructor(context) {
        this._context = context;
    }
    get(key, optionalDefaultValue) {
        const value = this._context.workspaceState.get(key) || optionalDefaultValue;
        return value;
    }
    set(key, value) {
        return this._context.workspaceState.update(key, value);
    }
}
exports.VSCodeStorage = VSCodeStorage;
