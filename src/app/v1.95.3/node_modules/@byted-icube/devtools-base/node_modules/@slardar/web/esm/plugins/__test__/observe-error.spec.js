import test from 'ava';
import sinon from 'sinon';
import { JS_ERROR_EV_TYPE, normalizeUnknownError, reportSelfError } from '@slardar/sdk-web';
import { createTestWebClient } from '../../__test__/util';
import { ObserveErrorPlugin, buildSelfErrorEvent } from '../observe-error';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('buildSelfErrorEvent', function (t) {
    var err1 = new Error('1');
    t.like(buildSelfErrorEvent([err1]), {
        ev_type: JS_ERROR_EV_TYPE,
        payload: {
            error: normalizeUnknownError(err1),
            breadcrumbs: [],
            extra: {},
        },
        extra: {
            bid: 'slardar_sdk',
        },
    });
});
test('ObserveErrorPlugin', function (t) {
    var err1 = new Error('1');
    reportSelfError(err1);
    var client = createTestWebClient();
    var onReport = sinon.fake();
    client.on('report', onReport);
    ObserveErrorPlugin(client, 1);
    t.assert(onReport.calledOnce);
    t.like(onReport.args[0][0], buildSelfErrorEvent([err1]));
    var err2 = new Error('2');
    reportSelfError(err2);
    t.assert(onReport.calledTwice);
    t.like(onReport.args[1][0], buildSelfErrorEvent([err2]));
});
test('ObserveErrorPlugin in multiInstance', function (t) {
    var err1 = new Error('1');
    reportSelfError(err1);
    var client1 = createTestWebClient();
    var client2 = createTestWebClient();
    var onReport = sinon.fake();
    client2.on('report', onReport);
    ObserveErrorPlugin(client1, 1);
    ObserveErrorPlugin(client2, 1);
    t.assert(onReport.notCalled);
    var err2 = new Error('2');
    reportSelfError(err2);
    t.assert(onReport.notCalled);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/plugins/__test__/observe-error.spec.js.map