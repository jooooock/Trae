import test from 'ava';
import { createTestWebClient } from 'sdk-web/src/utils/__test__/util';
import sinon from 'sinon';
import { IntegrationPlugin } from '@slardar/sdk-template';
import { createQueue, pause } from '../pause';
function createMockClient() {
    var _a;
    var client = createTestWebClient();
    IntegrationPlugin(client);
    client.init({
        integrations: [pause()],
        bid: '',
    });
    var onTransition = sinon.stub();
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.onTransition(onTransition);
    var reportCb = sinon.stub();
    client.on('report', reportCb);
    return { client: client, onTransition: onTransition, reportCb: reportCb };
}
function createMockReport(name) {
    return {
        ev_type: 'custom',
        payload: {
            type: 'event',
            name: name,
        },
    };
}
test('queue', function (t) {
    var capacity = 4;
    var fullCallback = sinon.stub();
    var queue = createQueue(capacity, fullCallback);
    t.is(queue.getCapacity(), capacity);
    t.is(queue.getSize(), 0);
    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);
    t.is(fullCallback.callCount, 0);
    queue.enqueue(4);
    t.is(fullCallback.callCount, 1);
    t.is(queue.getSize(), capacity);
    queue.enqueue(5);
    t.is(fullCallback.callCount, 2);
    t.is(queue.getSize(), capacity);
    fullCallback.reset();
    var item = queue.dequeue();
    t.is(item, 2);
    t.is(queue.getSize(), capacity - 1);
    var newCapacity = 2;
    queue.setCapacity(newCapacity);
    t.is(queue.getSize(), 2);
    t.is(queue.dequeue(), 4);
    t.is(fullCallback.callCount, 0);
    queue.enqueue(5);
    t.is(fullCallback.callCount, 1);
    t.is(queue.getSize(), newCapacity);
    queue.clear();
    t.is(queue.getCapacity(), newCapacity);
    t.is(queue.getSize(), 0);
});
test('should init state is running', function (t) {
    var _a;
    var _b = createMockClient(), client = _b.client, onTransition = _b.onTransition;
    t.is((_a = client.pause) === null || _a === void 0 ? void 0 : _a.getState(), 'running');
    t.false(onTransition.called);
});
test('should [running state] --<startAction>--> fail', function (t) {
    var _a;
    var _b = createMockClient(), client = _b.client, onTransition = _b.onTransition;
    // [running state] --<startAction>--> fail
    t.false((_a = client.pause) === null || _a === void 0 ? void 0 : _a.startAction());
    t.false(onTransition.called);
});
test('should [running state] --<stopAction>--> [stop state]', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, onTransition = _c.onTransition;
    // [running state] --<stopAction>--> [stop state]
    t.true((_a = client.pause) === null || _a === void 0 ? void 0 : _a.stopAction());
    t.deepEqual(onTransition.getCall(0).args, ['running', 'stop']);
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getState(), 'stop');
});
test('should [running state] --<pauseAction>--> [pause state]', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, onTransition = _c.onTransition;
    // [running state] --<pauseAction>--> [pause state]
    t.true((_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction());
    t.deepEqual(onTransition.getCall(0).args, ['running', 'pause']);
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getState(), 'pause');
});
test('should [stop state] --<startAction>--> [running state]', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, onTransition = _d.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.stopAction();
    onTransition.reset();
    // [stop state] --<startAction>--> [running state]
    t.true((_b = client.pause) === null || _b === void 0 ? void 0 : _b.startAction());
    t.deepEqual(onTransition.getCall(0).args, ['stop', 'running']);
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getState(), 'running');
});
test('should [stop state] --<stopAction>--> fail', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, onTransition = _c.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.stopAction();
    onTransition.reset();
    // [stop state] --<stopAction>--> fail
    t.false((_b = client.pause) === null || _b === void 0 ? void 0 : _b.stopAction());
    t.false(onTransition.called);
});
test('should [stop state] --<pauseAction>--> fail', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, onTransition = _c.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.stopAction();
    onTransition.reset();
    // [stop state] --<stopAction>--> fail
    t.false((_b = client.pause) === null || _b === void 0 ? void 0 : _b.pauseAction());
    t.false(onTransition.called);
});
test('should [pause state] --<startAction>--> [running state]', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, onTransition = _d.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    onTransition.reset();
    // [pause state] --<startAction>--> [running state]
    t.true((_b = client.pause) === null || _b === void 0 ? void 0 : _b.startAction());
    t.deepEqual(onTransition.getCall(0).args, ['pause', 'running']);
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getState(), 'running');
});
test('should [pause state] --<stopAction>--> [stop state]', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, onTransition = _d.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    onTransition.reset();
    // [pause state] --<stopAction>--> [stop state]
    t.true((_b = client.pause) === null || _b === void 0 ? void 0 : _b.stopAction());
    t.deepEqual(onTransition.getCall(0).args, ['pause', 'stop']);
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getState(), 'stop');
});
test('should [pause state] --<pauseAction>--> fail', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, onTransition = _c.onTransition;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    onTransition.reset();
    // [pause state] --<pauseAction>--> fail
    t.false((_b = client.pause) === null || _b === void 0 ? void 0 : _b.pauseAction());
    t.false(onTransition.called);
});
test('should put ReportEvents in the queue, if state is pause', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, reportCb = _c.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    client.report(createMockReport('1'));
    client.report(createMockReport('2'));
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getQueueSize(), 2);
    t.false(reportCb.called);
});
test('should report all ReportEvents when state transition from pause to stop if options.isReportAll is true', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, reportCb = _d.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    client.report(createMockReport('1'));
    client.report(createMockReport('2'));
    (_b = client.pause) === null || _b === void 0 ? void 0 : _b.stopAction({ isReportAll: true });
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getQueueSize(), 0);
    t.is(reportCb.callCount, 2);
});
test('should discard all ReportEvents in the queue when state transition from pause to stop if options.isReportAll is false', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, reportCb = _d.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    client.report(createMockReport('1'));
    client.report(createMockReport('2'));
    (_b = client.pause) === null || _b === void 0 ? void 0 : _b.stopAction({ isReportAll: false });
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getQueueSize(), 0);
    t.false(reportCb.called);
});
test('should report all events in the queue when state transition from pause to running', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, reportCb = _d.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    var report1 = createMockReport('1');
    var report2 = createMockReport('2');
    client.report(report1);
    client.report(report2);
    (_b = client.pause) === null || _b === void 0 ? void 0 : _b.startAction();
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getQueueSize(), 0);
    t.is(reportCb.callCount, 2);
    t.deepEqual(reportCb.getCall(0).args, [report1]);
    t.deepEqual(reportCb.getCall(1).args, [report2]);
});
test('should discard the queued ReportEvent when exceed the queue capacity, if state is pause and isResume is false', function (t) {
    var _a, _b, _c, _d;
    var _e = createMockClient(), client = _e.client, reportCb = _e.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction({ capacity: 2, isResume: false });
    var report1 = createMockReport('1');
    var report2 = createMockReport('2');
    client.report(report1);
    client.report(report2);
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getQueueSize(), 2);
    var report3 = createMockReport('3');
    client.report(report3);
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getQueueSize(), 2);
    (_d = client.pause) === null || _d === void 0 ? void 0 : _d.startAction();
    t.is(reportCb.callCount, 2);
    t.deepEqual(reportCb.getCall(0).args, [report2]);
    t.deepEqual(reportCb.getCall(1).args, [report3]);
});
test('should resume when exceed the queue capacity, if state is pause and isResume is true', function (t) {
    var _a, _b, _c;
    var _d = createMockClient(), client = _d.client, reportCb = _d.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction({ capacity: 2, isResume: true });
    var report1 = createMockReport('1');
    var report2 = createMockReport('2');
    client.report(report1);
    client.report(report2);
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getQueueSize(), 0);
    t.is(reportCb.callCount, 2);
    t.deepEqual(reportCb.getCall(0).args, [report1]);
    t.deepEqual(reportCb.getCall(1).args, [report2]);
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getState(), 'running');
});
test('should discard all ReportEvent, if state is stop', function (t) {
    var _a, _b;
    var _c = createMockClient(), client = _c.client, reportCb = _c.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.stopAction();
    client.report(createMockReport('1'));
    client.report(createMockReport('2'));
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getQueueSize(), 0);
    t.false(reportCb.called);
});
test('should clean all if client destroy', function (t) {
    var _a, _b, _c, _d;
    var _e = createMockClient(), client = _e.client, reportCb = _e.reportCb;
    (_a = client.pause) === null || _a === void 0 ? void 0 : _a.pauseAction();
    client.report(createMockReport('1'));
    client.report(createMockReport('2'));
    t.is((_b = client.pause) === null || _b === void 0 ? void 0 : _b.getQueueSize(), 2);
    t.false(reportCb.called);
    client.destroy();
    t.is((_c = client.pause) === null || _c === void 0 ? void 0 : _c.getQueueSize(), 0);
    t.is((_d = client.pause) === null || _d === void 0 ? void 0 : _d.getState(), 'stop');
    t.false(reportCb.called);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/integrations/esm/__test__/pause.spec.js.map