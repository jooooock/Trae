import { __assign, __read, __spreadArray } from "tslib";
import { log } from '@slardar/sdk-template';
import { getDefaultBrowser, syncReportWithCapturedContext, captureCurrentContext, } from '@slardar/sdk-web';
import browserClient from './instances/script';
import { getGlobalName, toObservableArray } from './util';
var window = getDefaultBrowser();
var globalName = getGlobalName();
var consumeQueue = function (client, params) {
    var capturedContext = __assign(__assign({}, captureCurrentContext(client)), { url: params.pop(), timestamp: params.pop() });
    syncReportWithCapturedContext(client, capturedContext)(function () {
        ;
        client.apply(void 0, __spreadArray([], __read(params), false));
    });
};
if (window && globalName) {
    var globalInstance = window[globalName];
    // 缓存命令参数
    var commandQueue = (globalInstance === null || globalInstance === void 0 ? void 0 : globalInstance.q) || [];
    // 提前将全局对象替换掉
    window[globalName] = browserClient;
    // 消费命令参数列表，只消费一次
    commandQueue.forEach(function (args) { return consumeQueue(browserClient, args); });
    commandQueue.length = 0;
    // 全局实例（同名下只能有一个）继续维护预收集数据队列
    if (browserClient.p) {
        if ('observe' in browserClient.p.a) {
            console.warn('global precollect queue already updated');
        }
        browserClient.p.a = toObservableArray(browserClient.p.a);
        var precollect_1 = browserClient.precollect;
        if (precollect_1) {
            browserClient.provide('precollect', function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                browserClient.p.a.push(__spreadArray(['precollect'], __read(args), false));
                return precollect_1.apply(void 0, __spreadArray([], __read(args), false));
            });
        }
    }
}
export default browserClient;//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/script.js.map