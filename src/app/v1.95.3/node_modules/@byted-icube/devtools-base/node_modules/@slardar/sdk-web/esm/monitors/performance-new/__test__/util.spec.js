import { __assign } from "tslib";
/* eslint-disable @typescript-eslint/ban-ts-comment */
import test from 'ava';
import { getLayoutShiftScore, getWorstElement } from '../util';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    //@ts-ignore
    window.innerWidth = 1000;
    //@ts-ignore
    window.innerHeight = 650;
    //@ts-ignore
    window.devicePixelRatio = 2;
});
test('getWorstElement', function (t) {
    t.is(getWorstElement(), undefined);
    t.is(getWorstElement({
        sources: [{ node: undefined }],
    }), undefined);
    var node1 = { nodeName: 'P1' };
    t.is(getWorstElement({
        sources: [{ node: node1 }],
    }), node1);
    var node2 = { nodeName: 'P2' };
    var Rect = {
        x: 0,
        y: 100,
        width: 600,
        height: 200,
        top: 100,
        right: 600,
        bottom: 300,
        left: 0,
    };
    t.is(getWorstElement({
        sources: [
            {
                node: node1,
                previousRect: Rect,
                currentRect: __assign(__assign({}, Rect), { y: 110, top: 110, bottom: 310 }),
            },
            {
                node: node2,
                previousRect: Rect,
                currentRect: __assign(__assign({}, Rect), { y: 200, top: 200, bottom: 400 }),
            },
        ],
    }), node2);
});
test('getLayoutShiftScore-Layout shift on y-axis without intersection', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // current.top > previous.bottom so two rect without intersection
            x: 0,
            y: 832,
            width: 600,
            height: 200,
            top: 832,
            right: 600,
            bottom: 1032,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.016984615384615386) < 0.000001);
});
test('getLayoutShiftScore-Layout shift on y-axis with intersection', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // current.top < previous.bottom so two rect with intersection
            x: 0,
            y: 632,
            width: 600,
            height: 200,
            top: 632,
            right: 600,
            bottom: 832,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.007133538461538462) < 0.000001);
});
test('getLayoutShiftScore-Layout shift on x-axis without intersection', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // current.left > previous.right so two rect without intersection
            x: 800,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 1400,
            bottom: 664,
            left: 800,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.036923076923076927) < 0.000001);
});
test('getLayoutShiftScore-Layout shift on x-axis with intersection', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // current.left < previous.right so two rect with intersection
            x: 400,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 1000,
            bottom: 664,
            left: 400,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.015384615384615385) < 0.000001);
});
test('getLayoutShiftScore-Half of the area moves off the screen', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // height value is half of the previous since the half part of element is moves off the screen
            x: 0,
            y: 1200,
            width: 600,
            height: 100,
            top: 1200,
            right: 600,
            bottom: 1300,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.025476923076923078) < 0.000001);
});
test('getLayoutShiftScore-Total of the area moves off the screen', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
        currentRect: {
            // all attributes will be 0, if element is totally moves off the screen
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.019292307692307692) < 0.000001);
});
test('getLayoutShiftScore-Half of the area moves in the screen', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            x: 0,
            y: 1200,
            width: 600,
            height: 100,
            top: 1200,
            right: 600,
            bottom: 1300,
            left: 0,
        },
        currentRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.025476923076923078) < 0.000001);
});
test('getLayoutShiftScore-Total of the area moves in the screen', function (t) {
    var source = {
        node: {
            nodeName: 'P',
        },
        previousRect: {
            // all attributes will be 0, if element previous is totally out of the screen
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            top: 0,
            right: 0,
            bottom: 0,
            left: 0,
        },
        currentRect: {
            x: 0,
            y: 464,
            width: 600,
            height: 200,
            top: 464,
            right: 600,
            bottom: 664,
            left: 0,
        },
    };
    t.true(Math.abs(getLayoutShiftScore(source) - 0.019292307692307692) < 0.000001);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/sdk-web/esm/monitors/performance-new/__test__/util.spec.js.map