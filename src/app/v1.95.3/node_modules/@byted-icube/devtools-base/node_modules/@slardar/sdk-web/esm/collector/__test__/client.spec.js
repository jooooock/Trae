import test from 'ava';
import sinon from 'sinon';
import { ContextPlugin } from '@slardar/sdk-template';
import { createTestWebClient } from '../../utils/__test__/util';
import { getOverrides, getViewOverrides, reportWithCurrentContext } from '../client';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
});
test('getViewOverrides', function (t) {
    t.deepEqual(getViewOverrides({}), {
        pid: undefined,
        url: 'about:blank',
        view_id: undefined,
    });
    t.deepEqual(getViewOverrides({ pid: 'pid' }), {
        pid: 'pid',
        url: 'about:blank',
        view_id: undefined,
    });
    t.deepEqual(getViewOverrides({ viewId: 'viewId' }), {
        pid: undefined,
        url: 'about:blank',
        view_id: 'viewId',
    });
    t.deepEqual(getViewOverrides({ pid: 'pid', viewId: 'viewId' }), {
        pid: 'pid',
        url: 'about:blank',
        view_id: 'viewId',
    });
});
test('getOverrides without context', function (t) {
    var client = createTestWebClient();
    client.init({});
    t.like(getOverrides(client), {
        context: {},
        pid: '',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
    client.config({ pid: 'pid' });
    t.like(getOverrides(client), {
        context: {},
        pid: 'pid',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
    client.config({ pid: 'pid2' });
    t.like(getOverrides(client), {
        context: {},
        pid: 'pid2',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
});
test('getOverrides with context', function (t) {
    var _a, _b, _c;
    var client = createTestWebClient();
    ContextPlugin(client);
    client.init({});
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('a', 'b');
    t.like(getOverrides(client), {
        context: { a: 'b' },
        pid: '',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
    client.config({ pid: 'pid' });
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.set('b', 2);
    t.like(getOverrides(client), {
        context: { a: 'b', b: '2' },
        pid: 'pid',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
    client.config({ pid: 'pid2' });
    (_c = client.context) === null || _c === void 0 ? void 0 : _c.set('a', 'c');
    t.like(getOverrides(client), {
        context: { a: 'c', b: '2' },
        pid: 'pid2',
        url: 'about:blank',
    });
    t.assert(getOverrides(client).view_id);
});
test('reportWithCurrentContext', function (t) {
    var _a, _b, _c;
    var onReport = sinon.fake();
    var client = createTestWebClient();
    ContextPlugin(client);
    client.init({
        pid: 'pid',
    });
    client.on('report', onReport);
    (_a = client.context) === null || _a === void 0 ? void 0 : _a.set('a', 'b');
    var report = reportWithCurrentContext(client, true);
    client.config({
        pid: 'pid2',
    });
    (_b = client.context) === null || _b === void 0 ? void 0 : _b.set('a', 'c');
    report({
        ev_type: 'http',
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 200,
                is_custom_error: false,
                headers: {},
                timestamp: 0,
            },
        },
    });
    t.true(onReport.calledOnce);
    var callArgs = onReport.args[0][0];
    t.like(callArgs, {
        ev_type: 'http',
        overrides: {
            context: {
                a: 'b',
            },
            pid: 'pid',
            url: 'about:blank',
        },
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                timestamp: 0,
                url: 'http://www.toutiao.com/',
            },
        },
    });
    t.assert(callArgs.overrides.view_id);
    t.assert(callArgs.overrides.timestamp);
    var report2 = reportWithCurrentContext(client);
    client.config({
        pid: 'pid3',
    });
    (_c = client.context) === null || _c === void 0 ? void 0 : _c.set('a', 'd');
    report2({
        ev_type: 'http',
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                url: 'http://www.toutiao.com/',
                headers: undefined,
                timestamp: 0,
            },
            response: {
                status: 200,
                is_custom_error: false,
                headers: {},
                timestamp: 0,
            },
        },
    });
    t.true(onReport.calledTwice);
    var callArgs2 = onReport.args[1][0];
    t.like(callArgs2, {
        ev_type: 'http',
        overrides: {
            context: {
                a: 'c',
            },
            pid: 'pid2',
            url: 'about:blank',
        },
        payload: {
            api: 'xhr',
            duration: 2233,
            request: {
                method: 'get',
                timestamp: 0,
                url: 'http://www.toutiao.com/',
            },
        },
    });
    t.assert(callArgs2.overrides.view_id);
    t.true(callArgs2.overrides.timestamp === undefined);
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/sdk-web/esm/collector/__test__/client.spec.js.map