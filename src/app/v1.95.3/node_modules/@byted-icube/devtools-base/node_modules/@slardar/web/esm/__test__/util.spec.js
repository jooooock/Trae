import test from 'ava';
import sinon from 'sinon';
import { DEFAULT_STORAGE_EXPIRES, setStorageWithEncoding } from '@slardar/sdk-web';
import { getDefaultSessionId, getReportUrl, getSettingsUrl, toObservableArray, getDefaultUserIdAndDeviceId, hasSetStorageItem, getStorageKey, } from '../util';
import { proxyLocalStorage } from './util';
var browserEnv = require('browser-env');
test.before(function () {
    browserEnv();
    proxyLocalStorage();
});
test('getReportUrl', function (t) {
    t.is(getReportUrl('i.snssdk.com'), 'https://i.snssdk.comundefined');
    t.is(getReportUrl('http://i.snssdk.com'), 'http://i.snssdk.comundefined');
    t.is(getReportUrl('http://i.snssdk.com', '/report'), 'http://i.snssdk.com/report');
});
test('getSettingsUrl', function (t) {
    t.is(getSettingsUrl('i.snssdk.com'), 'https://i.snssdk.com/monitor_web/settings/browser-settings');
    t.is(getSettingsUrl('http://i.snssdk.com'), 'http://i.snssdk.com/monitor_web/settings/browser-settings');
    t.is(getSettingsUrl('http://i.snssdk.com', '/settings'), 'http://i.snssdk.com/settings');
});
test('getDefaultSessionId', function (t) {
    t.assert(getDefaultSessionId());
});
test('toObservableArray', function (t) {
    var arr = [1, 2, 3];
    var oarr = toObservableArray(arr);
    var cb = sinon.fake();
    oarr.observe(cb);
    t.assert(cb.notCalled);
    oarr.push(5);
    t.assert(cb.calledOnce);
    t.is(cb.args[0][0], 5);
    oarr.push(8);
    t.assert(cb.calledTwice);
    t.is(cb.args[1][0], 8);
});
test.serial('getDefaultUserIdAndDeviceId should work', function (t) {
    t.is(document.cookie, '');
    var randomInfo = getDefaultUserIdAndDeviceId('', 0);
    t.assert(randomInfo.userId);
    t.assert(randomInfo.deviceId);
    var key = getStorageKey('test');
    setStorageWithEncoding(key, { userId: '1', deviceId: '2' }, DEFAULT_STORAGE_EXPIRES);
    var info = getDefaultUserIdAndDeviceId('test', DEFAULT_STORAGE_EXPIRES);
    t.deepEqual(info, { userId: '1', deviceId: '2' });
});
test.serial('hasSetStorageItem', function (t) {
    var key = getStorageKey('');
    setStorageWithEncoding(key, { test: '1' }, DEFAULT_STORAGE_EXPIRES);
    t.assert(hasSetStorageItem());
});//# sourceMappingURL=https://trae.private/sourcemaps/424b4bd987c6c6a4cadf1a08da420593cc6bf75a/node_modules/@byted-icube/devtools-base/node_modules/@slardar/web/esm/__test__/util.spec.js.map