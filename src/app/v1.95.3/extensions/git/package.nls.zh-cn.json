{"colors.added":"已添加资源的颜色。","colors.conflict":"存在冲突的资源的颜色。","colors.deleted":"已删除资源的颜色。","colors.ignored":"已忽略资源的颜色。","colors.modified":"已修改资源的颜色。","colors.renamed":"重命名或复制的资源的颜色。","colors.stageDeleted":"已暂存的已删除资源的颜色。","colors.stageModified":"已暂存的已修改资源的颜色。","colors.submodule":"子模块资源的颜色。","colors.untracked":"未跟踪资源的颜色。","command.addRemote":"添加远程存储库…","command.api.getRemoteSources":"获取远程源","command.api.getRepositories":"获取存储库","command.api.getRepositoryState":"获取仓库状态","command.branch":"创建分支...","command.branchFrom":"从现有来源创建新的分支...","command.checkout":"签出到...","command.checkoutDetached":"签出到(已分离)…","command.cherryPick":"挑拣…","command.clean":"放弃更改","command.cleanAll":"放弃所有更改","command.cleanAllTracked":"放弃所有跟踪的更改","command.cleanAllUntracked":"放弃所有未跟踪的更改","command.clone":"克隆","command.cloneRecursive":"克隆(递归)","command.close":"关闭仓库","command.closeAllDiffEditors":"关闭所有差异编辑器","command.commit":"提交","command.commitAll":"全部提交","command.commitAllAmend":"全部提交(修改)","command.commitAllAmendNoVerify":"全部提交(修正，不验证)","command.commitAllNoVerify":"全部提交(不验证)","command.commitAllSigned":"全部提交(已署名)","command.commitAllSignedNoVerify":"全部提交(已签收，不验证)","command.commitAmend":"提交(修改)","command.commitAmendNoVerify":"提交(修改，不验证)","command.commitEmpty":"创建空提交","command.commitEmptyNoVerify":"空提交(不验证)","command.commitMessageAccept":"接受提交消息","command.commitMessageDiscard":"放弃提交消息","command.commitNoVerify":"提交(不验证)","command.commitSigned":"提交(已签收)","command.commitSignedNoVerify":"提交(已签收，不验证)","command.commitStaged":"提交已暂存文件","command.commitStagedAmend":"提交已暂存文件(修改)","command.commitStagedAmendNoVerify":"提交已暂存内容(修正，不验证)","command.commitStagedNoVerify":"提交已暂存内容(不验证)","command.commitStagedSigned":"提交已暂存文件(已署名)","command.commitStagedSignedNoVerify":"提交已暂存内容(已签收，不验证)","command.continueInLocalClone":"在本地克隆存储库并在桌面上打开...","command.continueInLocalClone.qualifiedName":"继续在新的本地克隆中工作","command.createTag":"创建标记","command.deleteBranch":"删除分支...","command.deleteRemoteTag":"删除远程标记","command.deleteTag":"删除标签","command.fetch":"抓取","command.fetchAll":"从所有远程存储库中拉取","command.fetchPrune":"获取 (删除)","command.git.acceptMerge":"完成合并","command.git.openMergeEditor":"在合并编辑器中解析","command.git.runGitMerge":"计算与 Git 冲突","command.git.runGitMergeDiff3":"计算与 Git 冲突(Diff3)","command.ignore":"添加到 .gitignore","command.init":"初始化仓库","command.manageUnsafeRepositories":"管理不安全的存储库","command.merge":"合并分支...","command.mergeAbort":"中止合并","command.openAllChanges":"打开所有更改","command.openChange":"打开更改","command.openFile":"打开文件","command.openHEADFile":"打开文件 (HEAD)","command.openRepositoriesInParentFolders":"在父文件夹中打开存储库","command.openRepository":"打开仓库","command.publish":"发布分支...","command.pull":"拉取","command.pullFrom":"拉取自...","command.pullRebase":"拉取(变基)","command.push":"推送","command.pushFollowTags":"推送(“关注”标记)","command.pushFollowTagsForce":"推送(“关注”标记，强制)","command.pushForce":"推送(强制)","command.pushTags":"推送标记","command.pushTo":"推送到...","command.pushToForce":"推送到...(强制)","command.rebase":"变基分支…","command.rebaseAbort":"中止变基","command.refresh":"刷新","command.removeRemote":"删除远程存储库","command.rename":"重命名","command.renameBranch":"重命名分支...","command.reopenClosedRepositories":"重新打开已关闭的存储库...","command.restoreCommitTemplate":"还原提交模板","command.revealFileInOS.linux":"打开包含的文件夹","command.revealFileInOS.mac":"在查找器中显示","command.revealFileInOS.windows":"在文件资源管理器中显示","command.revealInExplorer":"在资源管理器视图中显示","command.revertChange":"还原更改","command.revertSelectedRanges":"还原所选更改","command.showOutput":"显示 GIT 输出","command.stage":"暂存更改","command.stageAll":"暂存所有更改","command.stageAllMerge":"暂存所有合并更改","command.stageAllTracked":"暂存所有跟踪的更改","command.stageAllUntracked":"暂存所有未跟踪的更改","command.stageChange":"暂存更改","command.stageSelectedRanges":"暂存所选范围","command.stash":"储藏","command.stashApply":"应用储藏...","command.stashApplyLatest":"应用最新储藏","command.stashDrop":"删除储藏...","command.stashDropAll":"删除所有储藏...","command.stashIncludeUntracked":"储藏(包含未跟踪)","command.stashPop":"弹出储藏...","command.stashPopLatest":"弹出最新储藏","command.stashStaged":"储藏暂存","command.sync":"同步","command.syncRebase":"同步(变基)","command.timelineCompareWithSelected":"与已选项目进行比较","command.timelineCopyCommitId":"复制提交 ID","command.timelineCopyCommitMessage":"复制提交消息","command.timelineOpenDiff":"打开更改","command.timelineSelectForCompare":"选择以进行比较","command.undoCommit":"撤消上次提交","command.unstage":"取消暂存更改","command.unstageAll":"取消暂存所有更改","command.unstageSelectedRanges":"取消暂存所选范围","config.allowForcePush":"控制是否启用强制推送 (不论 force 还是 force-with-lease)。","config.allowNoVerifyCommit":"控制是否允许没有运行 pre-commit 和 commit-msg 挂钩的提交。","config.alwaysShowStagedChangesResourceGroup":"始终显示“暂存的更改”资源组。","config.alwaysSignOff":"控制所有提交的 signoff 标志。","config.autoRepositoryDetection":"配置何时自动检测存储库。","config.autoRepositoryDetection.false":"禁止自动扫描仓库。","config.autoRepositoryDetection.openEditors":"扫描当前打开文件的父文件夹。","config.autoRepositoryDetection.subFolders":"扫描当前打开文件夹的子文件夹。","config.autoRepositoryDetection.true":"扫描当前打开文件夹与当前打开文件所在文件夹的子文件夹。","config.autoStash":"在拉取前暂存所有更改，在成功拉取后还原这些更改。","config.autofetch":"若设置为 true，则自动从当前 Git 仓库的默认远程仓库提取提交。若设置为“全部”，则从所有远程仓库进行提取。","config.autofetchPeriod":"在启用“#git.autofetch#”情况下每次自动 git fetch 之间的间隔时间(以秒为单位)。","config.autorefresh":"是否启用自动刷新。","config.branchPrefix":"创建新分支时使用的前缀。","config.branchProtection":"受保护分支的列表。默认情况下，在将更改提交到受保护分支之前会显示提示。可以使用 `#git.branchProtectionPrompt#` 设置控制提示。","config.branchProtectionPrompt":"控制是否在将更改提交到受保护的分支之前显示提示。","config.branchProtectionPrompt.alwaysCommit":"始终将更改提交到受保护分支。","config.branchProtectionPrompt.alwaysCommitToNewBranch":"始终将更改提交到新的分支。","config.branchProtectionPrompt.alwaysPrompt":"始终在将更改提交到受保护分支之前进行提示。","config.branchRandomNameDictionary":"用于随机生成的分支名称的字典列表。每个值都表示用于生成分支名称段的字典。支持的词典:“形容词”、“动物”、“颜色”和“数字”。","config.branchRandomNameDictionary.adjectives":"随机形容词","config.branchRandomNameDictionary.animals":"随机动物名称","config.branchRandomNameDictionary.colors":"随机颜色名称","config.branchRandomNameDictionary.numbers":"100 和 999 之间的一个随机数","config.branchRandomNameEnable":"控制在创建新分支时是否生成随机名称。","config.branchSortOrder":"控制分支的排列顺序。","config.branchValidationRegex":"用于验证新分支名称的正则表达式。","config.branchWhitespaceChar":"用于替换新分支名称中的空格，以及用于分隔随机生成的分支名称区段的字符。","config.checkoutType":"控制在运行“签出到…”时列出的 git 参考类型。","config.checkoutType.local":"本地分支","config.checkoutType.remote":"远程分支","config.checkoutType.tags":"标记","config.closeDiffOnOperation":"控制在储藏、提交、放弃、暂存或取消暂存更改时，是否应自动关闭差异编辑器。","config.commandsToLog":"GIT 命令列表 (例如: commit、push)，这些命令的 `stdout` 将被记录到 [git 输出](command:git.showOutput)。如果 GIT 命令配置了客户端挂钩，那么客户端挂钩的 `stdout` 也将被记录到 [git 输出](command:git.showOutput)。","config.confirmEmptyCommits":"始终确认为 \"Git: Commit Empty\" 命令创建空提交。","config.confirmForcePush":"控制在强制推送前是否进行确认。","config.confirmNoVerifyCommit":"控制是否在提交前要求确认而不进行验证。","config.confirmSync":"同步 Git 存储库前请先进行确认。","config.countBadge":"控制 Git 计数徽章。","config.countBadge.all":"对所有更改计数。","config.countBadge.off":"关闭计数器。","config.countBadge.tracked":"仅对跟踪的更改计数。","config.decorations.enabled":"控制 Git 是否在资源管理器和“打开编辑器”视图中添加颜色和小标。","config.defaultBranchName":"初始化新的 git 存储库时默认分支的名称(例如: main、trunk、development)。设置为空时，将使用在 git 中配置的默认分支名称。注意: 需要 git `2.28.0` 或更高版本。****","config.defaultCloneDirectory":"克隆 Git 仓库的默认位置。","config.detectSubmodules":"控制是否自动检测 Git 子模块。","config.detectSubmodulesLimit":"控制可检测到的 Git 子模块的限制。","config.discardAllScope":"控制运行“放弃所有更改”命令时放弃的更改类型。\"all\" 放弃所有更改。\"tracked\" 只放弃跟踪的文件。\"prompt\" 表示在每次运行此操作时显示提示对话框。","config.enableCommitSigning":"使用 GPG 或 x.509 启用提交签名。","config.enableSmartCommit":"在没有暂存的更改时提交所有更改。","config.enableStatusBarSync":"控制Git Sync命令是否出现在状态栏中。","config.enabled":"是否启用 Git。","config.experimental.installGuide":"Git 安装流程的实验性改进。","config.fetchOnPull":"启用后，在拉取时获取所有分支。否则，仅获取当前。","config.followTagsWhenSync":"运行同步命令时推送附注标签。","config.ignoreLegacyWarning":"忽略“旧版 Git”警告。","config.ignoreLimitWarning":"忽略“仓库中存在大量更改”的警告。","config.ignoreMissingGitWarning":"忽略“缺失 Git”的警告。","config.ignoreRebaseWarning":"忽略拉取时发出的分支似乎已变基的警告。","config.ignoreSubmodules":"忽略对文件树中子模块的修改。","config.ignoreWindowsGit27Warning":"如果 Windows 上安装了 Git 2.25 - 2.26，则忽略警告。","config.ignoredRepositories":"要忽略的 Git 存储库列表。","config.inputValidation":"控制何时显示提交消息输入验证。","config.inputValidationLength":"控制显示提交消息长度警告的长度阈值。","config.inputValidationSubjectLength":"控制用于显示警告的提交消息主题长度阈值。请取消设置它以继承 `#git.inputValidationLength#`的值。","config.mergeEditor":"打开当前处于冲突状态的文件的合并编辑器。","config.openAfterClone":"控制是否在克隆后自动打开仓库。","config.openAfterClone.always":"始终在当前窗口中打开。","config.openAfterClone.alwaysNewWindow":"始终在新窗口中打开。","config.openAfterClone.prompt":"始终提示操作。","config.openAfterClone.whenNoFolderOpen":"只有在没有打开任何文件夹时，才在当前窗口中打开。","config.openDiffOnClick":"控制单击更改时是否应打开差异编辑器。否则将打开常规编辑器。","config.openRepositoryInParentFolders":"控制是应打开工作区父文件夹中的存储库还是打开的文件。","config.openRepositoryInParentFolders.always":"始终在工作区的父文件夹中打开存储库或打开文件。","config.openRepositoryInParentFolders.never":"切勿在工作区的父文件夹中打开存储库或打开文件。","config.openRepositoryInParentFolders.prompt":"在打开存储库之前提示工作区的父文件夹或打开文件。","config.optimisticUpdate":"控制是否在运行 git 命令后乐观地更新源代码管理视图的状态。","config.path":"Git 可执行文件的路径和文件名，例如 \"C:\\Program Files\\Git\\bin\\git.exe\" (Windows)。这也可以是一个包含多个要查找的路径的字符串值数组。","config.postCommitCommand":"成功提交后运行 git 命令。","config.postCommitCommand.none":"提交后不要运行任何命令。","config.postCommitCommand.push":"成功提交后运行 'git push'。","config.postCommitCommand.sync":"成功提交后运行 'git pull' 和 'git push' 命令。","config.promptToSaveFilesBeforeCommit":"控制 Git 是否在提交之前检查未保存的文件。","config.promptToSaveFilesBeforeCommit.always":"检查是否有任何未保存的文件。","config.promptToSaveFilesBeforeCommit.never":"禁用此检查。","config.promptToSaveFilesBeforeCommit.staged":"只检查未保存的已暂存文件。","config.promptToSaveFilesBeforeStash":"控制 Git 是否在储藏更改之前检查未保存的文件。","config.promptToSaveFilesBeforeStash.always":"检查是否有任何未保存的文件。","config.promptToSaveFilesBeforeStash.never":"禁用此检查。","config.promptToSaveFilesBeforeStash.staged":"只检查未保存的已暂存文件。","config.pruneOnFetch":"提取时修剪。","config.publishBeforeContinueOn":"控制是否要在从 git 存储库使用“继续工作”时提示发布未发布的 git 状态。","config.publishBeforeContinueOn.always":"从 git 存储库使用“继续工作”时始终发布未发布的 git 状态","config.publishBeforeContinueOn.never":"从 git 存储库使用“继续工作”时切勿发布未发布的 git 状态","config.publishBeforeContinueOn.prompt":"从 git 存储库使用“继续工作”时提示发布未发布的 git 状态","config.pullBeforeCheckout":"控制没有传出提交的分支在签出之前是否快速转发。","config.pullTags":"拉取时提取所有标签。","config.rebaseWhenSync":"在运行“同步”命令时，强制 Git 使用“变基”。","config.rememberPostCommitCommand":"记住提交后运行的最后一个 git 命令。","config.repositoryScanIgnoredFolders":"当 `#git.autoRepositoryDetection#` 设置为 `true` 或 `subFolders` 时扫描 Git 仓库时忽略的文件夹列表。","config.repositoryScanMaxDepth":"在将 `#git.autoRepositoryDetection#` 设置为 `true` 或 `subFolders` 时，控制扫描工作区文件夹以查找 Git 仓库时使用的深度。如果不进行限制，可以设置为 `-1`。","config.requireGitUserConfig":"控制在是要求进行显式 Git 用户配置，还是允许 Git 在缺少配置时进行猜测。","config.scanRepositories":"在其中搜索 Git 存储库的路径的列表。","config.showActionButton":"控制操作按钮是否显示在“源代码管理”视图中。","config.showActionButton.commit":"显示一个操作按钮，以便在本地分支已修改文件可供提交时提交更改。","config.showActionButton.publish":"显示一个操作按钮，以便在本地分支没有跟踪远程分支时发布该分支。","config.showActionButton.sync":"显示一个操作按钮，以便在本地分支位于远程分支前面或后面时同步更改。","config.showCommitInput":"控制是否在 Git 源控制面板中显示提交输入。","config.showInlineOpenFileAction":"控制是否在 Git 更改视图中显示内联“打开文件”操作。","config.showProgress":"控制 Git 操作是否显示进度提示。","config.showPushSuccessNotification":"控制在推送成功时是否显示通知。","config.similarityThreshold":"控制相似性索引(即，相比于文件大小添加/删除的量)的阈值，以便将一对已添加/删除的文件中的更改视为重命名。注意: 需要 git `2.18.0` 或更高版本。****","config.smartCommitChanges":"控制哪些更改由Smart Commit自动暂存。","config.smartCommitChanges.all":"自动暂存所有更改。","config.smartCommitChanges.tracked":"仅自动暂存跟踪的更改。","config.statusLimit":"控制如何限制可从 Git 状态命令分析的更改数。可以设置为 0 表示无限制。","config.suggestSmartCommit":"建议启用智能提交(在无暂存更改时提交所有更改)。","config.supportCancellation":"控制在运行同步操作时是否出现通知，允许用户取消操作。","config.terminalAuthentication":"控制是否启用 VS Code 作为集成终端中生成的 Git 进程的身份验证处理程序。请注意: 需要重启终端才能选取此设置中的更改。","config.terminalGitEditor":"控制是否使 VS Code 成为集成终端中产生的 Git 进程的 Git 编辑器。请注意: 需要重启终端才能选择此设置中的更改。","config.timeline.date":"控制在日程表视图中项目使用的日期。","config.timeline.date.authored":"使用创作日期","config.timeline.date.committed":"使用提交日期","config.timeline.showAuthor":"控制是否在日程表视图中显示提交作者。","config.timeline.showUncommitted":"控制是否在时间线视图中显示未提交的更改。","config.untrackedChanges":"控制未跟踪的更改的行为。","config.untrackedChanges.hidden":"未跟踪的更改被隐藏，并从多个操作中排除。","config.untrackedChanges.mixed":"所有更改，无论是跟踪的还是未跟踪的，都会一起出现并表现出相同的行为。","config.untrackedChanges.separate":"未跟踪的更改单独显示在“源代码管理”视图中。它们也被排除在几个操作之外。","config.useCommitInputAsStashMessage":"控制是否将提交输入框中的消息用作默认储藏消息。","config.useEditorAsCommitInput":"控制当提交输入框中未提供消息时，是否将使用全文编辑器来创作提交消息。","config.useForcePushWithLease":"控制是否使用更安全的 force-with-lease 进行强制推送。","config.useIntegratedAskPass":"控制是否应覆盖 GIT_ASKPASS 以使用集成版本。","config.verboseCommit":"启用`#git.useEditorAsCommitInput#`时启用详细输出。","description":"Git 源代码管理集成","displayName":"Git","submenu.branch":"分支","submenu.changes":"更改","submenu.commit":"提交","submenu.commit.amend":"修改","submenu.commit.signoff":"注销","submenu.explorer":"Git","submenu.pullpush":"拉取，推送","submenu.remotes":"远程","submenu.stash":"存储","submenu.tags":"标记","view.workbench.cloneRepository":"[克隆 Git 仓库](command:git.clone '启用 git 扩展后立即克隆仓库')\r\n可以在本地克隆仓库。","view.workbench.learnMore":" ","view.workbench.scm.closedRepositories":"[重新打开已关闭的存储库](command:git.reopenClosedRepositories)\r\n找到以前关闭的 Git 存储库。若要详细了解如何在 VS Code 中使用 git 和源代码管理[参阅我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.closedRepository":"[重新打开已关闭的存储库](command:git.reopenClosedRepositories)\r\n找到以前关闭的 Git 存储库。若要详细了解如何在 VS Code 中使用 git 和源代码管理[参阅我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.disabled":"如果要使用 git 功能，请在[设置](command:workbench.action.openSettings?%5B%22git.enabled%22%5D)中启用 git。\r\n要了解有关如何在 VS Code 中使用 Git 和源代码管理的更多信息，[请阅读我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.empty":"[打开文件夹](command:vscode.openFolder)\r\n[克隆 Git 仓库](command:git.clone)\r\n为了使用 git 功能，可打开包含 git 仓库的文件夹或从 URL 克隆。要详细了解如何在 VS Code 中使用 Git 和源代码管理，请[阅读我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.emptyWorkspace":"[将文件夹添加到工作区](command:workbench.action.addRootFolder)\r\n当前打开的工作区没有任何包含 git 存储库的文件夹。要详细了解如何在 VS Code 中使用 Git 和源代码管理，[请阅读我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.folder":"[初始化仓库](command:git.init?%5Btrue%5D)\r\n当前打开的文件夹中没有 Git 仓库。可初始化一个仓库，它将实现 Git 提供支持的源代码管理功能。要详细了解如何在 VS Code 中使用 Git 和源代码管理，请[阅读我们的文档](https://aka.ms/vscode-scm)。","view.workbench.scm.missing":"安装 Git (一种流行的源代码管理系统)，以跟踪代码更改并与他人协作。在我们的 [Git 指南](https://aka.ms/vscode-scm)中了解详细信息。","view.workbench.scm.missing.linux":"源代码管理取决于将安装的 Git。\r\n[下载适用于 Linux 的 Git](https://git-scm.com/download/linux)\r\n安装后，请[重新加载](command:workbench.action.reloadWindow) (或[执行故障排除](command:git.showOutput))。可以[从商城]](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22)安装其他源代码管理提供程序。","view.workbench.scm.missing.mac":"[下载适用于 macOS 的 Git](https://git-scm.com/download/mac)\r\n安装后，请[重新加载](command:workbench.action.reloadWindow) (或[执行故障排除](command:git.showOutput))。可以[从商城](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22)安装其他源代码管理提供程序。","view.workbench.scm.missing.windows":"[下载适用于 Windows 的 Git](https://git-scm.com/download/win)\r\n安装后，请[重新加载](command:workbench.action.reloadWindow) (或[执行故障排除](command:git.showOutput))。可以[从商城](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22)安装其他源代码管理提供程序。","view.workbench.scm.repositoriesInParentFolders":"[Open Repository](command:git.openRepositoriesInParentFolders)\r\n在工作区的父文件夹或打开的文件中找到了 Git 存储库。使用 [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) 设置来控制是打开工作区或打开文件的父文件夹中的 git 存储库。若要了解详细信息，请[阅读我们的文档](https://aka.ms/vscode-git-repository-in-parent-folders)。","view.workbench.scm.repositoryInParentFolders":"[Open Repository](command:git.openRepositoriesInParentFolders)\r\n在工作区的父文件夹或打开的文件中找到了 git 存储库。使用 [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) 设置来控制是打开工作区或打开文件的父文件夹中的 git 存储库。若要了解详细信息，请[阅读我们的文档](https://aka.ms/vscode-git-repository-in-parent-folders)。","view.workbench.scm.scanFolderForRepositories":"正在扫描 git 存储库的文件夹...","view.workbench.scm.scanWorkspaceForRepositories":"正在扫描工作区中的 GIT 存储库...","view.workbench.scm.unsafeRepositories":"[管理不安全存储库](command:git.manageUnsafeRepositories)\r\n检测到的 git 存储库可能不安全，因为该文件夹由当前用户以外的其他人所有。要详细了解不安全存储库，[请阅读我们的文档](https://aka.ms/vscode-git-unsafe-repository)。","view.workbench.scm.unsafeRepository":"[管理不安全存储库](command:git.manageUnsafeRepositories)\r\n检测到的 git 存储库可能不安全，因为该文件夹由当前用户以外的其他人所有。要详细了解不安全存储库，[请阅读我们的文档](https://aka.ms/vscode-git-unsafe-repository)。","view.workbench.scm.workspace":"[初始化仓库](command:git.init)\r\n当前打开的工作区中没有任何包含 Git 仓库的文件夹。可初始化某文件夹上的一个仓库，该仓库将实现 Git 提供支持的源代码管理功能。要详细了解如何在 VS Code 中使用 Git 和源代码管理，[请阅读我们的文档](https://aka.ms/vscode-scm)。"}